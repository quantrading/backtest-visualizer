{"version":3,"sources":["theme.js","pages/notfound.js","apollo/clientState.js","apollo/defaultsState.js","apollo/fragments.js","apollo/queries.js","apollo/resolvers.js","apollo/apollo.js","utils/data.js","utils/utils.js","utils/TradingDate.js","priceData.js","market.js","components/SelectInput.js","utils/chartUtil.js","pages/PriceChartPage/PriceChart.js","components/MarketCalendar.js","components/MarketTimeLine.js","pages/PriceChartPage/index.js","utils/analyst.js","core/strategy.js","utils/simulation.js","pages/AssetAllocationPage/AssetAllocationChart.js","pages/AssetAllocationPage/ResultTable.js","components/ReturnsChart.js","components/DoughnutChart.js","pages/AssetAllocationPage/AssetAllocationPresenter.js","components/WeightsInputTable2.js","pages/AssetAllocationPage/AssetAllocationContainer.js","pages/BackTestPage/PriceChart.js","pages/BackTestPage/RebalanceSelect.js","pages/BackTestPage/StrategySelect.js","pages/BackTestPage/StrategyArgSelect.js","pages/BackTestPage/AssetSelect.js","pages/BackTestPage/BatchSelect.js","pages/BackTestPage/WeightsInputTable.js","pages/BackTestPage/BackTestResultTable.js","pages/BackTestPage/PortFolioPositionChart.js","pages/BackTestPage/BackTestPresenter.js","pages/BackTestPage/BackTestContainer.js","pages/CorrelationMatrix/CorrelationMatrix.js","components/Header/Header.js","App.js","index.js"],"names":["theme","Notfound","react_default","a","createElement","defaults","globalVariables","__typename","startDate","endDate","selectedCode","codeList","selectedAllocation","correlationPage","one","another","rolling","baseDate","assetAllocationPage","weightLimit","069500","minWeight","maxWeight","232080","143850","195930","238720","192090","148070","136340","182490","132030","130680","114800","138230","139660","130730","notes","id","title","content","simulation","NOTE_FRAGMENT","gql","_templateObject","SIMULATION_FRAGMENT","_templateObject2","GET_GLOBAL_VARIABLES","queries_templateObject","GET_NOTES","queries_templateObject2","_templateObject3","_templateObject4","resolvers","_templateObject5","_templateObject6","Query","note","_","variables","_ref","cache","config","dataIdFromObject","readFragment","fragment","_ref2","console","log","Mutation","createNote","_ref3","readQuery","query","newNote","length","writeData","data","concat","Object","toConsumableArray","editNote","_ref4","_ref5","noteId","updatedNote","objectSpread","writeFragment","InMemoryCache","stateLink","withClientState","typeDefs","client","ApolloClient","link","ApolloLink","from","initQueryManager","tradingDateList","nameList","shortNameList","getAssetName","code","idx","indexOf","getAssetShortName","getRandomAllocation","division","weight_list","i","push","Math","random","total_weight","mathjs","map","weight","addOneDay","date","tomorrow","Date","setTime","getTime","getAnnualizedReturns","returns","days","annualized","pow","getAnnualizedStd","std","toRank","array","des","arguments","undefined","sorted","slice","sort","b","v","tradingDates","TradingDate","classCallCheck","this","getDateList","_startDate","_endDate","magnet","startDateIdx","endDateIdx","getNonTradingDateList","_date","after","moment","format","nearDateIdx","firstDateOfMonth","firtDateOfWeek","dayOfWeek","dateMoment","dateList","tmpDate","add","nonDupulicatedDateList","Set","getFirstDateOfWeekInRange","preYearMonth","forEach","yearMonth","parseFirstDateOfMonthFromDateList","price_data","close_price","d3","then","row","price","parseFloat","fillData","Market","createClass","key","value","closePriceObject","getPriceList","keys","closePriceList","values","pctChangeList","index","prePrice","pctChange","cumPctChangeList","basePrice","count","getHistoricalPriceListFromDate","returnsList","getPriceListInRange","slicedClosePriceList","monthlyPriceList","getMonthlyPriceList","getMonthlyPriceListInRange","dynamicColors","floor","schemeCategory20","arr","schemeCategory10","generateSchemeCategory20","market","PriceChart","className","width","height","chartUpdate","_this$props$data$glob","props","dataList","getCumPctChangeInRange","dataset","label","labels","colors","chart","datasets","borderColor","newColor","backgroundColor","num","math","fill","update","_this$props$data$glob2","_create_chart","color","type","options","responsive","tooltips","mode","intersect","hover","onHover","event","element","$","offsetLeft","offset","left","domElement","get","clientX","parseInt","ctx","getContext","clearRect","beginPath","moveTo","lineTo","setLineDash","strokeStyle","stroke","scales","xAxes","display","scaleLabel","labelString","yAxes","Chart","document","getElementById","React","Component","RangePicker","DatePicker","dateFormat","periodStore","testPeriod","testPeriod2","testPeriod3","GAPS2019","GAPS2018","GAPS2017","GAPS2016","MarketCalendar","onChange","setPeriod","periodType","_periodStore$periodTy","setStartDate","setEndDate","disabledDate","currentDate","_this2","_this$props","_data$globalVariables","Fragment","es_button","onClick","Option","Select","assetCodeList","assetNameList","children","SelectInput","es_select","style","placeholder","defaultValue","handleChange","PriceChartPage","react_apollo_esm","loading","error","components_SelectInput","PriceChartPage_PriceChart","Analyst","getMomentum1","window","curPriceList","Number","startPrice","getMomentum2","getMomentum3","oneMonthReturns","getMomentum4","pickedPriceList","t","curIdx","curPrice","momentumScoreList","getCorrEff","returns1","returns2","jStat","getCorMatrix","listOfPriceList","getHistoricalReturnsFromDate","pop","corList","j","corrcoeff","toString","getCorScore","rows","thisCode","filter","getStd","wondow","strategy2","context","allocation","backtest","portfolio","momentumWindow","simulationArgs","reset","scoreList","momentumScore","codeOfMaxScore","max","apply","addWeight","newAllocation","getAllocation","executeAllocation","strategy3","stockCodeList","top","scoreObjList","topCodesList","d","equalWeight","strategy4","selectedAsset","strategyArg1","bondCode","filterdCodeList","numOfFilterdCode","weightOfOneDiv","weightOfBond","strategy5","orderdCodeList","obj","rankWeightList","strategy14","strategyArg2","code1","code2","condition1","condition2","bondsWeights","getRemainsWeight","safetyAssets","allocateRemainsWeightToCash","SEED_MONEY","PortFolio","seedMoney","cash","assets","setDate","_this","curAlloc","NAV","valuation","getAssetsNames","assetName","getPrice","amount","buy","sell","requiredCash","buyValidation","executeBuy","orderList","totalWeight","asset","maximumAmount","orderableMoney","weightToValue","orderableAmount","order","round","sellOrders","buyOrders","_this3","assetsNames","name","afterMarket","shortLog","curAllocation","getCurrentAllocation","dailyLog","navList","allocationList","shouldTrade","rebalanceDateList","intraMarket","strategy","BackTest","_this4","dateIndex","fixedAlloc","returnList","orderLog","eventLog","backTestInfo","result","cumReturnList","getFinalReturn","getSharpeRatio","prevPrice","newReturnList","shift","forwardDate","PortfolioAllocation","Strategy","backtestArgs","backTestArgs","_this5","_this6","absScore","weightOfStock","weightOfDollar","_this7","equalWeigth","_this8","stockWeight","cashWeight","_this9","_this10","_this11","_this12","assetIdx","_this13","momentumScores","volatilityScore","corScoreList","momentumRank","volatilityRank","corScoreRank","totalScore","tempScore","totalScoreRank","rank","_this14","NaN","BackTestArgsHandler","argsObject","DEFAULT_ALLOCATION","WORLD_STOCK","_this15","remainWeight","getWeight","remainsWeight","two","AssetAllocationChart","handleGetElementAtEvent","elem","activePoints","_activePoints$","_datasetIndex","_index","point","_chart","fixedAllocationData","fixedAllocation","alloc","x","annualizedStd","y","annualizedReturns","points","lab","es","position","ticks","min","callbacks","tooltipItem","datasetIndex","xLabel","yLabel","getElementAtEvent","columns","dataIndex","ResultTable","dataSource","toFixed","es_table","size","ReturnsChart","_run","cumPctChange","backTestArgsHandler","replaceAllocation","setDateRange","testArgs","getArgs","backTest","init","run","createMetaData","getCumPctChange","_this$props$data$glob3","_this$props$data$glob4","animation","duration","text","DoughnutChart","schemePaired","hoverBackgroundColor","animateScale","legend","AssetAllocationPresenter","table","handleOnClick","handlePlayClick","handleResetClick","stopSimulation","stateData","AssetAllocationPage_ResultTable","e","AssetAllocationPage_AssetAllocationChart","components_ReturnsChart","components_DoughnutChart","AssetAllocationContainer","possibleConstructorReturn","getPrototypeOf","call","simulationOnce","bind","assertThisInitialized","state","play","tempData","results","HPR","getReturnsListInRange","period","summaryTable","AssetAllocationPage_AssetAllocationPresenter","tmpArray","Array","codeIndex","weightsWithfixedWeight","numOfFreeAssets","weightsOfFree","weightsOfFreeAssets","sumOfWeights","getRandAllocWithFixedWeights","remainWieght","simulationResult","sharpeRatio","setState","player","setInterval","simulationLoopWithTimeLimit","clearInterval","limitTime","startTime","now","limitCounts","selectedDate","portName","selectPortfolio","resultList","isLogScale","allDataPoint","splice","logScaleOptions","callback","RebalanceSelect","preValue","RebalanceSelect_Option","StrategySelect","StrategySelect_Option","StrategyArgSelect","StrategyArgSelect_Option","AssetSelect","AssetSelect_Option","assetShortNameList","BatchSelect","batchSelection","BackTestPage_RebalanceSelect","BackTestPage_StrategySelect","BackTestPage_StrategyArgSelect","BackTestPage_AssetSelect","FormItem","Form","Item","EditableContext","createContext","EditableFormRow","create","form","objectWithoutProperties","Provider","EditableCell","editing","toggleEdit","input","focus","save","record","handleSave","validateFields","currentTarget","_this$props2","editable","restProps","Consumer","margin","getFieldDecorator","rules","required","message","initialValue","ref","node","onPressEnter","onBlur","paddingRight","EditableTable","_this3$columns","selectHandler","selectTarget","defineProperty","handleRun","item","weightsList","_data$","rebalanceType","strategyType","strategyArg3","runHandler","handleDelete","handleAdd","_this3$state","lastData","newData","handleAddPortfolio","_this3$state2","newPortfolio","findIndex","selectColumn","render","components","body","cell","col","onCell","marginBottom","BackTestPage_BatchSelect","rowClassName","bordered","rootComp","_this$state","preState","newState","JSON","stringify","BackTestResultTable","finalReturn","maximumDrowDown","valueList","maxList","getMaximumDrawDown","PortFolioPositionChart","portInfo","portfolioResult","dateIdx","_data","_color","assetIndex","Container","styled","div","BackTestPresenter_templateObject","StrategyInputContainer","BackTestPresenter_templateObject2","BackTestPresenter_templateObject3","ChartContainer","BackTestPresenter_templateObject4","PriceChartContainer","BackTestPresenter_templateObject5","PortFolioPositionChartContainer","BackTestPresenter_templateObject6","BackTestPresenter","func","selectedPortfolio","selectPortfolioHandler","refreshHandler","setLogScale","runSimulation","WeightsInputTable","BackTestPage_PriceChart","BackTestPage_PortFolioPositionChart","BackTestPage_BackTestResultTable","BackTestContainer","setRebalanceDateList","executeBacktest","refreshSimulations","numOfPreSimulation","newResultList","_loop","logScale","column","newValue","newDataSource","port","BackTestPage_BackTestPresenter","run2","run3","run4","run5","topLimit","run6","run7","run8","run9","run10","run11","run12","run13","run14","run15","CorrelationMatrix","getCorMatrixData","CorrelationMatrix_CorrelationMatrixChart","corData","CorrelationMatrixChart","prop","domain","sqrt","range","svg","append","attr","cor","selectAll","enter","ypos","xpos","abs","aS","yA","scale","tickPadding","aG","iR","h","generateCorMatrix","Header","components_MarketCalendar","prodPages","NavLink","exact","activeClassName","to","routing","HashRouter","basename","page","components_Header_Header","Switch","Route","path","component","App","AssetAllocationPage","BackTestPage","GlobalStyle","styled_components_browser_esm","App_Container","createGlobalStyle","App_templateObject","App_templateObject2","mainColor","textColor","ReactDOM","src_App"],"mappings":"sNAYeA,EAFD,0CCNCC,EAFE,kBAAMC,EAAAC,EAAAC,cAAA,mECAVC,ECFgB,CAC3BC,gBAAiB,CACfC,WAAY,kBACZC,UAAW,WACXC,QAAS,WACTC,aAAc,SACdC,SAAU,CAAC,SAAU,SAAU,UAC/BC,mBAAoB,IAGtBC,gBAAiB,CACfN,WAAY,kBACZO,IAAK,SACLC,QAAS,SACTC,QAAS,KACTC,SAAU,MAGZC,oBAAqB,CACnBX,WAAY,sBACZY,YAAa,CACXZ,WAAY,cACZa,SAAU,CAAEb,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEC,OAAU,CAAEhB,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEE,OAAU,CAAEjB,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEG,OAAU,CAAElB,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEI,OAAU,CAAEnB,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEK,OAAU,CAAEpB,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEM,OAAU,CAAErB,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEO,OAAU,CAAEtB,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEQ,OAAU,CAAEvB,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChES,OAAU,CAAExB,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEU,OAAU,CAAEzB,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEW,OAAU,CAAE1B,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEY,OAAU,CAAE3B,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEa,OAAU,CAAE5B,WAAY,cAAec,UAAW,EAAGC,UAAW,KAChEc,OAAU,CAAE7B,WAAY,cAAec,UAAW,EAAGC,UAAW,OAIpEe,MAAO,CACL,CACE9B,WAAY,OACZ+B,GAAI,EACJC,MAAO,QACPC,QAAS,WAIbC,WAAY,CACV,CACElC,WAAY,aACZ+B,GAAI,EACJ9B,UAAW,KACXC,QAAS,wUCpDR,IAAMiC,EAAgBC,IAAHC,KAQbC,EAAsBF,IAAHG,48BCRzB,IAAMC,EAAuBJ,IAAHK,KA+BpBC,GAnBeN,IAAHO,KAWSP,IAAHQ,KAQNR,IAAHS,MC9BTC,GDwCiBV,IAAHW,KASGX,IAAHY,KCjDF,CACvBC,MAAO,CACLC,KAAM,SAACC,EAAGC,EAAJC,GAA6B,IAAZC,EAAYD,EAAZC,MACfvB,EAAKuB,EAAMC,OAAOC,iBAAiB,CACvCxD,WAAY,OACZ+B,GAAIqB,EAAUrB,KAEVmB,EAAOI,EAAMG,aAAa,CAAEC,SAAUvB,EAAeJ,OAC3D,OAAOmB,GAGThB,WAAY,SAACiB,EAAGC,EAAJO,GAA6B,IACjCzB,EADiCyB,EAAZL,MACFG,aAAa,CACpCC,SAAUpB,EACVP,GAAI,IAIN,OAFA6B,QAAQC,IAAI,cACZD,QAAQC,IAAI3B,GACLA,IAGX4B,SAAU,CACRC,WAAY,SAACZ,EAAGC,EAAJY,GAA6B,IAAZV,EAAYU,EAAZV,MACnBxB,EAAUwB,EAAMW,UAAU,CAAEC,MAAOxB,IAAnCZ,MAEFqC,EAAU,CACdnE,WAAY,OACZgC,MAHyBoB,EAAnBpB,MAINC,QAJyBmB,EAAZnB,QAKbF,GAAID,EAAMsC,OAAS,GAOrB,OALAd,EAAMe,UAAU,CACdC,KAAM,CACJxC,MAAK,CAAGqC,GAAHI,OAAAC,OAAAC,EAAA,EAAAD,CAAe1C,OAGjBqC,GAGTO,SAAU,SAACvB,EAADwB,EAAAC,GAA0C,IAApC7C,EAAoC4C,EAApC5C,GAAIC,EAAgC2C,EAAhC3C,MAAOC,EAAyB0C,EAAzB1C,QAAaqB,EAAYsB,EAAZtB,MAChCuB,EAASvB,EAAMC,OAAOC,iBAAiB,CAC3CxD,WAAY,OACZ+B,OAEImB,EAAOI,EAAMG,aAAa,CAAEC,SAAUvB,EAAeJ,GAAI8C,IACzDC,EAAWN,OAAAO,EAAA,EAAAP,CAAA,GACZtB,EADY,CAEflB,QACAC,YAOF,OALAqB,EAAM0B,cAAc,CAClBjD,GAAI8C,EACJnB,SAAUvB,EACVmC,KAAMQ,IAEDA,MClDPxB,EAAQ,IAAI2B,IAEZC,EAAYC,YAAgB,CAChC7B,QACA8B,SLRmB,q5BKSnBtF,WACAgD,cAGIuC,EAAS,IAAIC,IAAa,CAC9BhC,QACAiC,KAAMC,IAAWC,KAAK,CAACP,MAGzBG,EAAOK,mBAEQL,wCCrBTM,EAAkB,CACvB,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACD,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,YAyXMvF,EAAW,CAChB,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,eAGKwF,EAAW,CAChB,WACA,6BACA,yCACA,uDACA,iCACA,gCACA,kCACA,mDACA,uEACA,mCACA,2CACA,0BACA,4CACA,8DACA,gCACA,oDAGKC,EAAgB,CACrB,qBACA,qBACA,SACA,iCACA,YACA,SACA,6BACA,iCACA,2BACA,eACA,eACA,qBACA,eACA,iCACA,2BACA,wCAGKC,EAAe,SAAAC,GACpB,IAAMC,EAAM5F,EAAS6F,QAAQF,GAC7B,OAAOH,EAASI,IAGXE,GAAoB,SAAAH,GACzB,IAAMC,EAAM5F,EAAS6F,QAAQF,GAC7B,OAAOF,EAAcG,uBC1xChBG,GAAsB,SAAAC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","file":"static/js/main.a038d5b0.chunk.js","sourcesContent":["// const theme = {\r\n//   mainColor: \"#2B353A\",\r\n//   textColor: \"#FFFFFF\",\r\n//   subText1Color: \"#4D83D7\",\r\n//   subText2Color: \"#00009F\",\r\n//   subText3Color: \"#1050AE\",\r\n//   bullColor: \"#00B909\",\r\n//   bearColor: \"#C60606\"\r\n// };\r\n\r\nconst theme = {};\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\n\r\nconst Notfound = () => <h1>Not found</h1>;\r\n\r\nexport default Notfound;\r\n","import { defaultsState } from \"./defaultsState\";\r\n\r\nexport const defaults = defaultsState;\r\n\r\nexport const typeDefs = `\r\n    schema {\r\n        query: Query\r\n        mutation: Mutation\r\n    }\r\n    type Query {\r\n        notes: [Note]!\r\n        note(id: Int!): Note\r\n        simulation: Simulation\r\n        globalVariables: GlobalVariables\r\n    }\r\n    type Mutation{\r\n        createNote(title: String!, content: String!): Note\r\n        editNote(id: Int!, title: String, content:String): Note\r\n    }\r\n    type Note{\r\n        id: Int!\r\n        title: Stirng!\r\n        content: String!\r\n    }\r\n\r\n    type Simulation{\r\n        id: Int\r\n        startDate: String\r\n        endDate: String\r\n    }\r\n\r\n    GlobalVariables{\r\n        startDate: String\r\n        endDate: String\r\n        codeList: [String]\r\n        selectedAllocation: []\r\n    }\r\n\r\n    correlationPage: {\r\n        one: String,\r\n        another: String,\r\n        rolling: Int,\r\n        baseDate: String\r\n    }\r\n\r\n    assetAllocationPage: {\r\n        weightLimit: Object\r\n    }\r\n\r\n    `;\r\n","export const defaultsState = {\r\n  globalVariables: {\r\n    __typename: \"GlobalVariables\",\r\n    startDate: \"20170502\",\r\n    endDate: \"20171031\",\r\n    selectedCode: \"069500\",\r\n    codeList: [\"069500\", \"232080\", \"143850\"],\r\n    selectedAllocation: []\r\n  },\r\n\r\n  correlationPage: {\r\n    __typename: \"CorrelationPage\",\r\n    one: \"069500\",\r\n    another: \"232080\",\r\n    rolling: null,\r\n    baseDate: null\r\n  },\r\n\r\n  assetAllocationPage: {\r\n    __typename: \"AssetAllocationPage\",\r\n    weightLimit: {\r\n      __typename: \"weightLimit\",\r\n      \"069500\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"232080\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"143850\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"195930\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"238720\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"192090\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"148070\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"136340\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"182490\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"132030\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"130680\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"114800\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"138230\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"139660\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 },\r\n      \"130730\": { __typename: \"weightRange\", minWeight: 0, maxWeight: 100 }\r\n    }\r\n  },\r\n\r\n  notes: [\r\n    {\r\n      __typename: \"Note\",\r\n      id: 1,\r\n      title: \"First\",\r\n      content: \"Second\"\r\n    }\r\n  ],\r\n\r\n  simulation: [\r\n    {\r\n      __typename: \"Simulation\",\r\n      id: 0,\r\n      startDate: null,\r\n      endDate: null\r\n    }\r\n  ]\r\n};\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const NOTE_FRAGMENT = gql`\r\n  fragment NotePars on Note {\r\n    id\r\n    title\r\n    content\r\n  }\r\n`;\r\n\r\nexport const SIMULATION_FRAGMENT = gql`\r\n  fragment SimulationParts on Simulation {\r\n    startDate\r\n    endDate\r\n  }\r\n`;","import gql from \"graphql-tag\";\r\n\r\nexport const GET_GLOBAL_VARIABLES = gql`\r\n  {\r\n    globalVariables @client {\r\n      startDate\r\n      endDate\r\n      codeList\r\n      selectedCode\r\n      selectedAllocation\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COR_PAGE = gql`\r\n  {\r\n    correlationPage @client {\r\n      one\r\n      another\r\n      rolling\r\n      baseDate\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_ASSET_ALO_PAGE = gql`\r\n  {\r\n    assetAllocationPage @client {\r\n      weightLimit\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_NOTES = gql`\r\n  {\r\n    notes @client {\r\n      id\r\n      title\r\n      content\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_SIMULATION = gql`\r\n  {\r\n    simulation @client {\r\n      startDate\r\n      endDate\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_PRICE_LIST = gql`\r\n  {\r\n    priceList @client {\r\n      code\r\n      closePrice\r\n    }\r\n  }\r\n`;\r\n","import { NOTE_FRAGMENT, SIMULATION_FRAGMENT } from \"./fragments\";\r\nimport { GET_NOTES } from \"./queries\";\r\n\r\nexport const resolvers = {\r\n  Query: {\r\n    note: (_, variables, { cache }) => {\r\n      const id = cache.config.dataIdFromObject({\r\n        __typename: \"Note\",\r\n        id: variables.id\r\n      });\r\n      const note = cache.readFragment({ fragment: NOTE_FRAGMENT, id });\r\n      return note;\r\n    },\r\n\r\n    simulation: (_, variables, { cache }) => {\r\n      const simulation = cache.readFragment({\r\n        fragment: SIMULATION_FRAGMENT,\r\n        id: 0\r\n      });\r\n      console.log(\"simulation\");\r\n      console.log(simulation);\r\n      return simulation;\r\n    }\r\n  },\r\n  Mutation: {\r\n    createNote: (_, variables, { cache }) => {\r\n      const { notes } = cache.readQuery({ query: GET_NOTES });\r\n      const { title, content } = variables;\r\n      const newNote = {\r\n        __typename: \"Note\",\r\n        title,\r\n        content,\r\n        id: notes.length + 1\r\n      };\r\n      cache.writeData({\r\n        data: {\r\n          notes: [newNote, ...notes]\r\n        }\r\n      });\r\n      return newNote;\r\n    },\r\n\r\n    editNote: (_, { id, title, content }, { cache }) => {\r\n      const noteId = cache.config.dataIdFromObject({\r\n        __typename: \"Note\",\r\n        id\r\n      });\r\n      const note = cache.readFragment({ fragment: NOTE_FRAGMENT, id: noteId });\r\n      const updatedNote = {\r\n        ...note,\r\n        title,\r\n        content\r\n      };\r\n      cache.writeFragment({\r\n        id: noteId,\r\n        fragment: NOTE_FRAGMENT,\r\n        data: updatedNote\r\n      });\r\n      return updatedNote;\r\n    }\r\n  }\r\n};\r\n","import { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { withClientState } from \"apollo-link-state\";\r\nimport { ApolloLink } from \"apollo-link\";\r\n\r\nimport { typeDefs, defaults } from \"./clientState\";\r\nimport { resolvers } from \"./resolvers\";\r\n\r\nconst cache = new InMemoryCache();\r\n\r\nconst stateLink = withClientState({\r\n  cache,\r\n  typeDefs,\r\n  defaults,\r\n  resolvers\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  cache,\r\n  link: ApolloLink.from([stateLink])\r\n});\r\n\r\nclient.initQueryManager();\r\n\r\nexport default client;\r\n","// 238720\r\n// 최초일 : 2016.03.03\r\n\r\nconst tradingDateList = [\r\n\t'20160303',\r\n\t'20160304',\r\n\t'20160307',\r\n\t'20160308',\r\n\t'20160309',\r\n\t'20160310',\r\n\t'20160311',\r\n\t'20160314',\r\n\t'20160315',\r\n\t'20160316',\r\n\t'20160317',\r\n\t'20160318',\r\n\t'20160321',\r\n\t'20160322',\r\n\t'20160323',\r\n\t'20160324',\r\n\t'20160325',\r\n\t'20160328',\r\n\t'20160329',\r\n\t'20160330',\r\n\t'20160331',\r\n\t'20160401',\r\n\t'20160404',\r\n\t'20160405',\r\n\t'20160406',\r\n\t'20160407',\r\n\t'20160408',\r\n\t'20160411',\r\n\t'20160412',\r\n\t'20160414',\r\n\t'20160415',\r\n\t'20160418',\r\n\t'20160419',\r\n\t'20160420',\r\n\t'20160421',\r\n\t'20160422',\r\n\t'20160425',\r\n\t'20160426',\r\n\t'20160427',\r\n\t'20160428',\r\n\t'20160429',\r\n\t'20160502',\r\n\t'20160503',\r\n\t'20160504',\r\n\t'20160509',\r\n\t'20160510',\r\n\t'20160511',\r\n\t'20160512',\r\n\t'20160513',\r\n\t'20160516',\r\n\t'20160517',\r\n\t'20160518',\r\n\t'20160519',\r\n\t'20160520',\r\n\t'20160523',\r\n\t'20160524',\r\n\t'20160525',\r\n\t'20160526',\r\n\t'20160527',\r\n\t'20160530',\r\n\t'20160531',\r\n\t'20160601',\r\n\t'20160602',\r\n\t'20160603',\r\n\t'20160607',\r\n\t'20160608',\r\n\t'20160609',\r\n\t'20160610',\r\n\t'20160613',\r\n\t'20160614',\r\n\t'20160615',\r\n\t'20160616',\r\n\t'20160617',\r\n\t'20160620',\r\n\t'20160621',\r\n\t'20160622',\r\n\t'20160623',\r\n\t'20160624',\r\n\t'20160627',\r\n\t'20160628',\r\n\t'20160629',\r\n\t'20160630',\r\n\t'20160701',\r\n\t'20160704',\r\n\t'20160705',\r\n\t'20160706',\r\n\t'20160707',\r\n\t'20160708',\r\n\t'20160711',\r\n\t'20160712',\r\n\t'20160713',\r\n\t'20160714',\r\n\t'20160715',\r\n\t'20160718',\r\n\t'20160719',\r\n\t'20160720',\r\n\t'20160721',\r\n\t'20160722',\r\n\t'20160725',\r\n\t'20160726',\r\n\t'20160727',\r\n\t'20160728',\r\n\t'20160729',\r\n\t'20160801',\r\n\t'20160802',\r\n\t'20160803',\r\n\t'20160804',\r\n\t'20160805',\r\n\t'20160808',\r\n\t'20160809',\r\n\t'20160810',\r\n\t'20160811',\r\n\t'20160812',\r\n\t'20160816',\r\n\t'20160817',\r\n\t'20160818',\r\n\t'20160819',\r\n\t'20160822',\r\n\t'20160823',\r\n\t'20160824',\r\n\t'20160825',\r\n\t'20160826',\r\n\t'20160829',\r\n\t'20160830',\r\n\t'20160831',\r\n\t'20160901',\r\n\t'20160902',\r\n\t'20160905',\r\n\t'20160906',\r\n\t'20160907',\r\n\t'20160908',\r\n\t'20160909',\r\n\t'20160912',\r\n\t'20160913',\r\n\t'20160919',\r\n\t'20160920',\r\n\t'20160921',\r\n\t'20160922',\r\n\t'20160923',\r\n\t'20160926',\r\n\t'20160927',\r\n\t'20160928',\r\n\t'20160929',\r\n\t'20160930',\r\n\t'20161004',\r\n\t'20161005',\r\n\t'20161006',\r\n\t'20161007',\r\n\t'20161010',\r\n\t'20161011',\r\n\t'20161012',\r\n\t'20161013',\r\n\t'20161014',\r\n\t'20161017',\r\n\t'20161018',\r\n\t'20161019',\r\n\t'20161020',\r\n\t'20161021',\r\n\t'20161024',\r\n\t'20161025',\r\n\t'20161026',\r\n\t'20161027',\r\n\t'20161028',\r\n\t'20161031',\r\n\t'20161101',\r\n\t'20161102',\r\n\t'20161103',\r\n\t'20161104',\r\n\t'20161107',\r\n\t'20161108',\r\n\t'20161109',\r\n\t'20161110',\r\n\t'20161111',\r\n\t'20161114',\r\n\t'20161115',\r\n\t'20161116',\r\n\t'20161117',\r\n\t'20161118',\r\n\t'20161121',\r\n\t'20161122',\r\n\t'20161123',\r\n\t'20161124',\r\n\t'20161125',\r\n\t'20161128',\r\n\t'20161129',\r\n\t'20161130',\r\n\t'20161201',\r\n\t'20161202',\r\n\t'20161205',\r\n\t'20161206',\r\n\t'20161207',\r\n\t'20161208',\r\n\t'20161209',\r\n\t'20161212',\r\n\t'20161213',\r\n\t'20161214',\r\n\t'20161215',\r\n\t'20161216',\r\n\t'20161219',\r\n\t'20161220',\r\n\t'20161221',\r\n\t'20161222',\r\n\t'20161223',\r\n\t'20161226',\r\n\t'20161227',\r\n\t'20161228',\r\n\t'20161229',\r\n\t'20170102',\r\n\t'20170103',\r\n\t'20170104',\r\n\t'20170105',\r\n\t'20170106',\r\n\t'20170109',\r\n\t'20170110',\r\n\t'20170111',\r\n\t'20170112',\r\n\t'20170113',\r\n\t'20170116',\r\n\t'20170117',\r\n\t'20170118',\r\n\t'20170119',\r\n\t'20170120',\r\n\t'20170123',\r\n\t'20170124',\r\n\t'20170125',\r\n\t'20170126',\r\n\t'20170131',\r\n\t'20170201',\r\n\t'20170202',\r\n\t'20170203',\r\n\t'20170206',\r\n\t'20170207',\r\n\t'20170208',\r\n\t'20170209',\r\n\t'20170210',\r\n\t'20170213',\r\n\t'20170214',\r\n\t'20170215',\r\n\t'20170216',\r\n\t'20170217',\r\n\t'20170220',\r\n\t'20170221',\r\n\t'20170222',\r\n\t'20170223',\r\n\t'20170224',\r\n\t'20170227',\r\n\t'20170228',\r\n\t'20170302',\r\n\t'20170303',\r\n\t'20170306',\r\n\t'20170307',\r\n\t'20170308',\r\n\t'20170309',\r\n\t'20170310',\r\n\t'20170313',\r\n\t'20170314',\r\n\t'20170315',\r\n\t'20170316',\r\n\t'20170317',\r\n\t'20170320',\r\n\t'20170321',\r\n\t'20170322',\r\n\t'20170323',\r\n\t'20170324',\r\n\t'20170327',\r\n\t'20170328',\r\n\t'20170329',\r\n\t'20170330',\r\n\t'20170331',\r\n\t'20170403',\r\n\t'20170404',\r\n\t'20170405',\r\n\t'20170406',\r\n\t'20170407',\r\n\t'20170410',\r\n\t'20170411',\r\n\t'20170412',\r\n\t'20170413',\r\n\t'20170414',\r\n\t'20170417',\r\n\t'20170418',\r\n\t'20170419',\r\n\t'20170420',\r\n\t'20170421',\r\n\t'20170424',\r\n\t'20170425',\r\n\t'20170426',\r\n\t'20170427',\r\n\t'20170428',\r\n\t'20170502',\r\n\t'20170504',\r\n\t'20170508',\r\n\t'20170510',\r\n\t'20170511',\r\n\t'20170512',\r\n\t'20170515',\r\n\t'20170516',\r\n\t'20170517',\r\n\t'20170518',\r\n\t'20170519',\r\n\t'20170522',\r\n\t'20170523',\r\n\t'20170524',\r\n\t'20170525',\r\n\t'20170526',\r\n\t'20170529',\r\n\t'20170530',\r\n\t'20170531',\r\n\t'20170601',\r\n\t'20170602',\r\n\t'20170605',\r\n\t'20170607',\r\n\t'20170608',\r\n\t'20170609',\r\n\t'20170612',\r\n\t'20170613',\r\n\t'20170614',\r\n\t'20170615',\r\n\t'20170616',\r\n\t'20170619',\r\n\t'20170620',\r\n\t'20170621',\r\n\t'20170622',\r\n\t'20170623',\r\n\t'20170626',\r\n\t'20170627',\r\n\t'20170628',\r\n\t'20170629',\r\n\t'20170630',\r\n\t'20170703',\r\n\t'20170704',\r\n\t'20170705',\r\n\t'20170706',\r\n\t'20170707',\r\n\t'20170710',\r\n\t'20170711',\r\n\t'20170712',\r\n\t'20170713',\r\n\t'20170714',\r\n\t'20170717',\r\n\t'20170718',\r\n\t'20170719',\r\n\t'20170720',\r\n\t'20170721',\r\n\t'20170724',\r\n\t'20170725',\r\n\t'20170726',\r\n\t'20170727',\r\n\t'20170728',\r\n\t'20170731',\r\n\t'20170801',\r\n\t'20170802',\r\n\t'20170803',\r\n\t'20170804',\r\n\t'20170807',\r\n\t'20170808',\r\n\t'20170809',\r\n\t'20170810',\r\n\t'20170811',\r\n\t'20170814',\r\n\t'20170816',\r\n\t'20170817',\r\n\t'20170818',\r\n\t'20170821',\r\n\t'20170822',\r\n\t'20170823',\r\n\t'20170824',\r\n\t'20170825',\r\n\t'20170828',\r\n\t'20170829',\r\n\t'20170830',\r\n\t'20170831',\r\n\t'20170901',\r\n\t'20170904',\r\n\t'20170905',\r\n\t'20170906',\r\n\t'20170907',\r\n\t'20170908',\r\n\t'20170911',\r\n\t'20170912',\r\n\t'20170913',\r\n\t'20170914',\r\n\t'20170915',\r\n\t'20170918',\r\n\t'20170919',\r\n\t'20170920',\r\n\t'20170921',\r\n\t'20170922',\r\n\t'20170925',\r\n\t'20170926',\r\n\t'20170927',\r\n\t'20170928',\r\n\t'20170929',\r\n\t'20171010',\r\n\t'20171011',\r\n\t'20171012',\r\n\t'20171013',\r\n\t'20171016',\r\n\t'20171017',\r\n\t'20171018',\r\n\t'20171019',\r\n\t'20171020',\r\n\t'20171023',\r\n\t'20171024',\r\n\t'20171025',\r\n\t'20171026',\r\n\t'20171027',\r\n\t'20171030',\r\n\t'20171031',\r\n\t'20171101',\r\n\t'20171102',\r\n\t'20171103',\r\n\t'20171106',\r\n\t'20171107',\r\n\t'20171108',\r\n\t'20171109',\r\n\t'20171110',\r\n\t'20171113',\r\n\t'20171114',\r\n\t'20171115',\r\n\t'20171116',\r\n\t'20171117',\r\n\t'20171120',\r\n\t'20171121',\r\n\t'20171122',\r\n\t'20171123',\r\n\t'20171124',\r\n\t'20171127',\r\n\t'20171128',\r\n\t'20171129',\r\n\t'20171130',\r\n\t'20171201',\r\n\t'20171204',\r\n\t'20171205',\r\n\t'20171206',\r\n\t'20171207',\r\n\t'20171208',\r\n\t'20171211',\r\n\t'20171212',\r\n\t'20171213',\r\n\t'20171214',\r\n\t'20171215',\r\n\t'20171218',\r\n\t'20171219',\r\n\t'20171220',\r\n\t'20171221',\r\n\t'20171222',\r\n\t'20171226',\r\n\t'20171227',\r\n\t'20171228',\r\n\t'20180102',\r\n\t'20180103',\r\n\t'20180104',\r\n\t'20180105',\r\n\t'20180108',\r\n\t'20180109',\r\n\t'20180110',\r\n\t'20180111',\r\n\t'20180112',\r\n\t'20180115',\r\n\t'20180116',\r\n\t'20180117',\r\n\t'20180118',\r\n\t'20180119',\r\n\t'20180122',\r\n\t'20180123',\r\n\t'20180124',\r\n\t'20180125',\r\n\t'20180126',\r\n\t'20180129',\r\n\t'20180130',\r\n\t'20180131',\r\n\t'20180201',\r\n\t'20180202',\r\n\t'20180205',\r\n\t'20180206',\r\n\t'20180207',\r\n\t'20180208',\r\n\t'20180209',\r\n\t'20180212',\r\n\t'20180213',\r\n\t'20180214',\r\n\t'20180219',\r\n\t'20180220',\r\n\t'20180221',\r\n\t'20180222',\r\n\t'20180223',\r\n\t'20180226',\r\n\t'20180227',\r\n\t'20180228',\r\n\t'20180302',\r\n\t'20180305',\r\n\t'20180306',\r\n\t'20180307',\r\n\t'20180308',\r\n\t'20180309',\r\n\t'20180312',\r\n\t'20180313',\r\n\t'20180314',\r\n\t'20180315',\r\n\t'20180316',\r\n\t'20180319',\r\n\t'20180320',\r\n\t'20180321',\r\n\t'20180322',\r\n\t'20180323',\r\n\t'20180326',\r\n\t'20180327',\r\n\t'20180328',\r\n\t'20180329',\r\n\t'20180330',\r\n\t'20180402',\r\n\t'20180403',\r\n\t'20180404',\r\n\t'20180405',\r\n\t'20180406',\r\n\t'20180409',\r\n\t'20180410',\r\n\t'20180411',\r\n\t'20180412',\r\n\t'20180413',\r\n\t'20180416',\r\n\t'20180417',\r\n\t'20180418',\r\n\t'20180419',\r\n\t'20180420',\r\n\t'20180423',\r\n\t'20180424',\r\n\t'20180425',\r\n\t'20180426',\r\n\t'20180427',\r\n\t'20180430',\r\n\t'20180502',\r\n\t'20180503',\r\n\t'20180504',\r\n\t'20180508',\r\n\t'20180509',\r\n\t'20180510',\r\n\t'20180511',\r\n\t'20180514',\r\n\t'20180515',\r\n\t'20180516',\r\n\t'20180517',\r\n\t'20180518',\r\n\t'20180521',\r\n\t'20180523',\r\n\t'20180524',\r\n\t'20180525',\r\n\t'20180528',\r\n\t'20180529',\r\n\t'20180530',\r\n\t'20180531',\r\n\t'20180601',\r\n\t'20180604',\r\n\t'20180605',\r\n\t'20180607',\r\n\t'20180608',\r\n\t'20180611',\r\n\t'20180612',\r\n\t'20180614',\r\n\t'20180615',\r\n\t'20180618',\r\n\t'20180619',\r\n\t'20180620',\r\n\t'20180621',\r\n\t'20180622',\r\n\t'20180625',\r\n\t'20180626',\r\n\t'20180627',\r\n\t'20180628',\r\n\t'20180629',\r\n\t'20180702',\r\n\t'20180703',\r\n\t'20180704',\r\n\t'20180705',\r\n\t'20180706',\r\n\t'20180709',\r\n\t'20180710',\r\n\t'20180711',\r\n\t'20180712',\r\n\t'20180713',\r\n\t'20180716',\r\n\t'20180717',\r\n\t'20180718',\r\n\t'20180719',\r\n\t'20180720',\r\n\t'20180723',\r\n\t'20180724',\r\n\t'20180725',\r\n\t'20180726',\r\n\t'20180727',\r\n\t'20180730',\r\n\t'20180731',\r\n\t'20180801',\r\n\t'20180802',\r\n\t'20180803',\r\n\t'20180806',\r\n\t'20180807',\r\n\t'20180808',\r\n\t'20180809',\r\n\t'20180810',\r\n\t'20180813',\r\n\t'20180814',\r\n\t'20180816',\r\n\t'20180817',\r\n\t'20180820',\r\n\t'20180821',\r\n\t'20180822',\r\n\t'20180823',\r\n\t'20180824',\r\n\t'20180827',\r\n\t'20180828',\r\n\t'20180829',\r\n\t'20180830',\r\n\t'20180831',\r\n\t'20180903',\r\n\t'20180904',\r\n\t'20180905',\r\n\t'20180906',\r\n\t'20180907',\r\n\t'20180910',\r\n\t'20180911',\r\n\t'20180912',\r\n\t'20180913',\r\n\t'20180914',\r\n\t'20180917',\r\n\t'20180918',\r\n\t'20180919',\r\n\t'20180920',\r\n\t'20180921',\r\n\t'20180927',\r\n\t'20180928',\r\n\t'20181001',\r\n\t'20181002',\r\n\t'20181004',\r\n\t'20181005',\r\n\t'20181008',\r\n\t'20181010',\r\n\t'20181011',\r\n\t'20181012',\r\n\t'20181015',\r\n\t'20181016',\r\n\t'20181017',\r\n\t'20181018',\r\n\t'20181019',\r\n\t'20181022',\r\n\t'20181023',\r\n\t'20181024',\r\n\t'20181025',\r\n\t'20181026',\r\n\t'20181029',\r\n\t'20181030',\r\n\t'20181031',\r\n\t'20181101',\r\n\t'20181102',\r\n\t'20181105',\r\n\t'20181106',\r\n\t'20181107',\r\n\t'20181108',\r\n\t'20181109',\r\n\t'20181112',\r\n\t'20181113',\r\n\t'20181114',\r\n\t'20181115',\r\n\t'20181116',\r\n\t'20181119',\r\n\t'20181120',\r\n\t'20181121',\r\n\t'20181122',\r\n\t'20181123',\r\n\t'20181126',\r\n\t'20181127',\r\n\t'20181128',\r\n\t'20181129',\r\n\t'20181130',\r\n\t'20181203',\r\n\t'20181204',\r\n\t'20181205',\r\n\t'20181206',\r\n\t'20181207',\r\n\t'20181210',\r\n\t'20181211',\r\n\t'20181212',\r\n\t'20181213',\r\n\t'20181214',\r\n\t'20181217',\r\n\t'20181218',\r\n\t'20181219',\r\n\t'20181220',\r\n\t'20181221',\r\n\t'20181224',\r\n\t'20181226',\r\n\t'20181227',\r\n\t'20181228',\r\n\t'20190102',\r\n\t'20190103',\r\n\t'20190104',\r\n\t'20190107',\r\n\t'20190108',\r\n\t'20190109',\r\n\t'20190110',\r\n\t'20190111',\r\n\t'20190114',\r\n\t'20190115',\r\n\t'20190116',\r\n\t'20190117',\r\n\t'20190118',\r\n\t'20190121',\r\n\t'20190122',\r\n\t'20190123',\r\n\t'20190124',\r\n\t'20190125',\r\n\t'20190128',\r\n\t'20190129',\r\n\t'20190130',\r\n\t'20190131',\r\n\t'20190201',\r\n\t'20190207',\r\n\t'20190208',\r\n\t'20190211',\r\n\t'20190212',\r\n\t'20190213',\r\n\t'20190214',\r\n\t'20190215',\r\n\t'20190218',\r\n\t'20190219',\r\n\t'20190220',\r\n\t'20190221',\r\n\t'20190222',\r\n\t'20190225',\r\n\t'20190226',\r\n\t'20190227',\r\n\t'20190228',\r\n\t'20190304',\r\n\t'20190305',\r\n\t'20190306',\r\n\t'20190307',\r\n\t'20190308',\r\n\t'20190311',\r\n\t'20190312',\r\n\t'20190313',\r\n\t'20190314',\r\n\t'20190315',\r\n\t'20190318',\r\n\t'20190319',\r\n\t'20190320',\r\n\t'20190321',\r\n\t'20190322',\r\n\t'20190325',\r\n\t'20190326',\r\n\t'20190327',\r\n\t'20190328',\r\n\t'20190329',\r\n\t'20190401',\r\n\t'20190402',\r\n\t'20190403',\r\n\t'20190404',\r\n\t'20190405',\r\n\t'20190408',\r\n\t'20190409',\r\n\t'20190410',\r\n\t'20190411',\r\n\t'20190412',\r\n\t'20190415',\r\n\t'20190416',\r\n\t'20190417',\r\n\t'20190418',\r\n\t'20190419',\r\n\t'20190422',\r\n\t'20190423',\r\n\t'20190424',\r\n\t'20190425',\r\n\t'20190426',\r\n\t'20190429',\r\n\t'20190430',\r\n\t'20190502',\r\n\t'20190503',\r\n\t'20190507',\r\n\t'20190508',\r\n\t'20190509',\r\n\t'20190510',\r\n\t'20190513',\r\n\t'20190514',\r\n\t'20190515',\r\n\t'20190516',\r\n\t'20190517',\r\n\t'20190520',\r\n\t'20190521',\r\n\t'20190522',\r\n\t'20190523',\r\n\t'20190524',\r\n\t'20190527',\r\n\t'20190528',\r\n\t'20190529',\r\n\t'20190530',\r\n\t'20190603',\r\n\t'20190604',\r\n\t'20190605',\r\n\t'20190606',\r\n\t'20190607',\r\n\t'20190610',\r\n\t'20190611',\r\n\t'20190612',\r\n\t'20190613',\r\n\t'20190614',\r\n\t'20190617',\r\n\t'20190618',\r\n\t'20190619',\r\n\t'20190620',\r\n\t'20190621',\r\n\t'20190624',\r\n\t'20190625',\r\n\t'20190626',\r\n\t'20190627',\r\n\t'20190628',\r\n\t'20190701',\r\n\t'20190702',\r\n\t'20190703',\r\n\t'20190704',\r\n\t'20190705',\r\n\t'20190708',\r\n\t'20190709',\r\n\t'20190710',\r\n\t'20190711',\r\n\t'20190712',\r\n\t'20190715',\r\n\t'20190716',\r\n\t'20190717',\r\n\t'20190718',\r\n\t'20190719',\r\n\t'20190722',\r\n\t'20190723',\r\n\t'20190724',\r\n\t'20190725',\r\n\t'20190726',\r\n\"20190729\",\r\n\"20190730\",\r\n\"20190731\",\r\n\"20190801\",\r\n\"20190802\",\r\n\"20190805\",\r\n\"20190806\",\r\n\"20190807\",\r\n\"20190808\",\r\n\"20190809\",\r\n\"20190812\",\r\n\"20190813\",\r\n\"20190814\",\r\n\"20190815\",\r\n\"20190816\",\r\n\"20190819\",\r\n\"20190820\",\r\n\"20190821\",\r\n\"20190822\",\r\n\"20190823\",\r\n\"20190826\",\r\n\"20190827\",\r\n\"20190828\",\r\n\"20190829\",\r\n\"20190830\",\r\n\"20190902\",\r\n\"20190903\",\r\n\"20190904\",\r\n\"20190905\",\r\n\"20190906\",\r\n];\r\n\r\nconst holiyDayList = [\r\n\t42434, // 20160305\r\n\t42435,\r\n\t42441,\r\n\t42442,\r\n\t42448,\r\n\t42449,\r\n\t42455,\r\n\t42456,\r\n\t42462,\r\n\t42463,\r\n\t42469,\r\n\t42470,\r\n\t42473,\r\n\t42476,\r\n\t42477,\r\n\t42483,\r\n\t42484,\r\n\t42490,\r\n\t42491,\r\n\t42495,\r\n\t42496,\r\n\t42497,\r\n\t42498,\r\n\t42504,\r\n\t42505,\r\n\t42511,\r\n\t42512,\r\n\t42518,\r\n\t42519,\r\n\t42525,\r\n\t42526,\r\n\t42527,\r\n\t42532,\r\n\t42533,\r\n\t42539,\r\n\t42540,\r\n\t42546,\r\n\t42547,\r\n\t42553,\r\n\t42554,\r\n\t42560,\r\n\t42561,\r\n\t42567,\r\n\t42568,\r\n\t42574,\r\n\t42575,\r\n\t42581,\r\n\t42582,\r\n\t42588,\r\n\t42589,\r\n\t42595,\r\n\t42596,\r\n\t42597,\r\n\t42602,\r\n\t42603,\r\n\t42609,\r\n\t42610,\r\n\t42616,\r\n\t42617,\r\n\t42623,\r\n\t42624,\r\n\t42627,\r\n\t42628,\r\n\t42629,\r\n\t42630,\r\n\t42631,\r\n\t42637,\r\n\t42638,\r\n\t42644,\r\n\t42645,\r\n\t42646,\r\n\t42651,\r\n\t42652,\r\n\t42658,\r\n\t42659,\r\n\t42665,\r\n\t42666,\r\n\t42672,\r\n\t42673,\r\n\t42679,\r\n\t42680,\r\n\t42686,\r\n\t42687,\r\n\t42693,\r\n\t42694,\r\n\t42700,\r\n\t42701,\r\n\t42707,\r\n\t42708,\r\n\t42714,\r\n\t42715,\r\n\t42721,\r\n\t42722,\r\n\t42728,\r\n\t42729,\r\n\t42734,\r\n\t42735,\r\n\t42736,\r\n\t42742,\r\n\t42743,\r\n\t42749,\r\n\t42750,\r\n\t42756,\r\n\t42757,\r\n\t42762,\r\n\t42763,\r\n\t42764,\r\n\t42765,\r\n\t42770,\r\n\t42771,\r\n\t42777,\r\n\t42778,\r\n\t42784,\r\n\t42785,\r\n\t42791,\r\n\t42792,\r\n\t42795,\r\n\t42798,\r\n\t42799,\r\n\t42805,\r\n\t42806,\r\n\t42812,\r\n\t42813,\r\n\t42819,\r\n\t42820,\r\n\t42826,\r\n\t42827,\r\n\t42833,\r\n\t42834,\r\n\t42840,\r\n\t42841,\r\n\t42847,\r\n\t42848,\r\n\t42854,\r\n\t42855,\r\n\t42856,\r\n\t42858,\r\n\t42860,\r\n\t42861,\r\n\t42862,\r\n\t42864,\r\n\t42868,\r\n\t42869,\r\n\t42875,\r\n\t42876,\r\n\t42882,\r\n\t42883,\r\n\t42889,\r\n\t42890,\r\n\t42892,\r\n\t42896,\r\n\t42897,\r\n\t42903,\r\n\t42904,\r\n\t42910,\r\n\t42911,\r\n\t42917,\r\n\t42918,\r\n\t42924,\r\n\t42925,\r\n\t42931,\r\n\t42932,\r\n\t42938,\r\n\t42939,\r\n\t42945,\r\n\t42946,\r\n\t42952,\r\n\t42953,\r\n\t42959,\r\n\t42960,\r\n\t42962,\r\n\t42966,\r\n\t42967,\r\n\t42973,\r\n\t42974,\r\n\t42980,\r\n\t42981,\r\n\t42987,\r\n\t42988,\r\n\t42994,\r\n\t42995,\r\n\t43001,\r\n\t43002,\r\n\t43008,\r\n\t43009,\r\n\t43010,\r\n\t43011,\r\n\t43012,\r\n\t43013,\r\n\t43014,\r\n\t43015,\r\n\t43016,\r\n\t43017,\r\n\t43022,\r\n\t43023,\r\n\t43029,\r\n\t43030,\r\n\t43036,\r\n\t43037,\r\n\t43043,\r\n\t43044,\r\n\t43050,\r\n\t43051,\r\n\t43057,\r\n\t43058,\r\n\t43064,\r\n\t43065,\r\n\t43071,\r\n\t43072,\r\n\t43078,\r\n\t43079,\r\n\t43085,\r\n\t43086,\r\n\t43092,\r\n\t43093,\r\n\t43094,\r\n\t43098,\r\n\t43099,\r\n\t43100,\r\n\t43101,\r\n\t43106,\r\n\t43107,\r\n\t43113,\r\n\t43114,\r\n\t43120,\r\n\t43121,\r\n\t43127,\r\n\t43128,\r\n\t43134,\r\n\t43135,\r\n\t43141,\r\n\t43142,\r\n\t43146,\r\n\t43147,\r\n\t43148,\r\n\t43149,\r\n\t43155,\r\n\t43156,\r\n\t43160,\r\n\t43162,\r\n\t43163,\r\n\t43169,\r\n\t43170,\r\n\t43176,\r\n\t43177,\r\n\t43183,\r\n\t43184,\r\n\t43190,\r\n\t43191,\r\n\t43197,\r\n\t43198,\r\n\t43204,\r\n\t43205,\r\n\t43211,\r\n\t43212,\r\n\t43218,\r\n\t43219,\r\n\t43221,\r\n\t43225,\r\n\t43226,\r\n\t43227,\r\n\t43232,\r\n\t43233,\r\n\t43239,\r\n\t43240,\r\n\t43242,\r\n\t43246,\r\n\t43247,\r\n\t43253,\r\n\t43254,\r\n\t43257,\r\n\t43260,\r\n\t43261,\r\n\t43264,\r\n\t43267,\r\n\t43268,\r\n\t43274,\r\n\t43275,\r\n\t43281,\r\n\t43282,\r\n\t43288,\r\n\t43289,\r\n\t43295,\r\n\t43296,\r\n\t43302,\r\n\t43303,\r\n\t43309,\r\n\t43310,\r\n\t43316,\r\n\t43317,\r\n\t43323,\r\n\t43324,\r\n\t43327,\r\n\t43330,\r\n\t43331,\r\n\t43337,\r\n\t43338,\r\n\t43344,\r\n\t43345,\r\n\t43351,\r\n\t43352,\r\n\t43358,\r\n\t43359,\r\n\t43365,\r\n\t43366,\r\n\t43367,\r\n\t43368,\r\n\t43369,\r\n\t43372,\r\n\t43373,\r\n\t43376,\r\n\t43379,\r\n\t43380,\r\n\t43382,\r\n\t43386,\r\n\t43387,\r\n\t43393,\r\n\t43394,\r\n\t43400,\r\n\t43401,\r\n\t43407,\r\n\t43408,\r\n\t43414,\r\n\t43415,\r\n\t43421,\r\n\t43422,\r\n\t43428,\r\n\t43429,\r\n\t43435,\r\n\t43436,\r\n\t43442,\r\n\t43443,\r\n\t43449,\r\n\t43450,\r\n\t43456,\r\n\t43457,\r\n\t43459,\r\n\t43463,\r\n\t43464,\r\n\t43465,\r\n\t43466,\r\n\t43470,\r\n\t43471,\r\n\t43477,\r\n\t43478,\r\n\t43484,\r\n\t43485,\r\n\t43491,\r\n\t43492,\r\n\t43498,\r\n\t43499,\r\n\t43500,\r\n\t43501,\r\n\t43502,\r\n\t43505,\r\n\t43506,\r\n\t43512,\r\n\t43513,\r\n\t43519,\r\n\t43520,\r\n\t43525,\r\n\t43526,\r\n\t43527,\r\n\t43533,\r\n\t43534,\r\n\t43540,\r\n\t43541,\r\n\t43547,\r\n\t43548,\r\n\t43554,\r\n\t43555\r\n];\r\n\r\nconst codeList = [\r\n\t'069500',\r\n\t'232080',\r\n\t'143850',\r\n\t'195930',\r\n\t'238720',\r\n\t'192090',\r\n\t'148070',\r\n\t'136340',\r\n\t'182490',\r\n\t'132030',\r\n\t'130680',\r\n\t'114800',\r\n\t'138230',\r\n\t'139660',\r\n\t'130730',\r\n\t'WORLD_STOCK'\r\n];\r\n\r\nconst nameList = [\r\n\t'KODEX200',\r\n\t'TIGER코스닥150',\r\n\t'TIGER미국S&P500선물(H)',\r\n\t'TIGER유로스탁스50(합성H)',\r\n\t'KINDEX일본Nikkei225(H)',\r\n\t'TIGER차이나CSI300',\r\n\t'KOSEF국고채10년',\r\n\t'KBSTAR중기우량회사채',\r\n\t'TIGER단기선진하이일드(합성H)',\r\n\t'KODEX골드선물(H)',\r\n\t'TIGER원유선물Enhanced(H)',\r\n\t'KODEX인버스',\r\n\t'KOSEF미국달러선물',\r\n\t'KOSEF미국달러선물인버스',\r\n\t'KOSEF단기자금',\r\n\t'세계종합주가지수'\r\n];\r\n\r\nconst shortNameList = [\r\n\t'코스피',\r\n\t'코스닥',\r\n\t'S&P500',\r\n\t'유로스탁스',\r\n\t'Nikkei225',\r\n\t'CSI300',\r\n\t'국고채10년',\r\n\t'중기회사채',\r\n\t'하이일드',\r\n\t'골드',\r\n\t'원유',\r\n\t'인버스',\r\n\t'달러',\r\n\t'달러인버스',\r\n\t'단기자금',\r\n\t'세계주가지수'\r\n];\r\n\r\nconst getAssetName = code => {\r\n\tconst idx = codeList.indexOf(code);\r\n\treturn nameList[idx];\r\n};\r\n\r\nconst getAssetShortName = code => {\r\n\tconst idx = codeList.indexOf(code);\r\n\treturn shortNameList[idx];\r\n};\r\n\r\nconst getAssetId = code => {\r\n\tconst idx = codeList.indexOf(code);\r\n\treturn idx;\r\n};\r\n\r\nexport {\r\n\ttradingDateList,\r\n\tcodeList as assetCodeList,\r\n\tnameList as assetNameList,\r\n\tshortNameList as assetShortNameList,\r\n\tgetAssetId,\r\n\tgetAssetName,\r\n\tgetAssetShortName\r\n};","import * as mathjs from \"mathjs\";\r\nimport * as jStat from \"jStat\";\r\n\r\nconst getRandomAllocation = division => {\r\n  let weight_list = [];\r\n  for (let i = 0; i < division; i++) {\r\n    weight_list.push(Math.random());\r\n  }\r\n  const total_weight = mathjs.sum(weight_list);\r\n  weight_list = weight_list.map(weight => {\r\n    return (weight / total_weight) * 100;\r\n  });\r\n  return weight_list;\r\n};\r\n\r\nconst getIntRandWeights = division => {\r\n  let randomWeights = getRandomAllocation(division);\r\n  randomWeights = randomWeights.map(value => mathjs.floor(value));\r\n  const remainWieght = 100 - mathjs.sum(randomWeights);\r\n  randomWeights[randomWeights.length - 1] += remainWieght;\r\n  return randomWeights;\r\n};\r\n\r\nconst getFloatRandWeights = (division, digits = 2) => {\r\n  let randomWeights = getRandomAllocation(division);\r\n\r\n  randomWeights = randomWeights.map(value => value * 10 ** digits);\r\n\r\n  randomWeights = randomWeights.map(value => mathjs.floor(value));\r\n  const remainWieght = 100 * 10 ** digits - mathjs.sum(randomWeights);\r\n  randomWeights[randomWeights.length - 1] += remainWieght;\r\n\r\n  randomWeights = randomWeights.map(value => value / 10 ** digits);\r\n\r\n  return randomWeights;\r\n};\r\n\r\nconst getRandAllocWithFixedWeights = weightsWithfixedWeight => {\r\n  const numOfFreeAssets = weightsWithfixedWeight.filter(d => d === null).length;\r\n  const weightsOfFree =\r\n    100 - mathjs.sum(weightsWithfixedWeight.filter(d => d !== null));\r\n\r\n  let weightsOfFreeAssets = getRandomAllocation(numOfFreeAssets);\r\n\r\n  const sumOfWeights = mathjs.sum(weightsOfFreeAssets);\r\n  weightsOfFreeAssets = mathjs.multiply(\r\n    weightsOfFreeAssets,\r\n    weightsOfFree / sumOfWeights\r\n  );\r\n\r\n  const output = weightsWithfixedWeight.map(d => {\r\n    if (d !== null) return d;\r\n    return weightsOfFreeAssets.shift();\r\n  });\r\n  return output;\r\n};\r\n\r\nconst getCumPctChange = navList => {\r\n  const cumPctChangeList = [];\r\n\r\n  const basePrice = navList[0];\r\n  navList.map(price => {\r\n    const pctChange = ((price - basePrice) / basePrice) * 100;\r\n    cumPctChangeList.push(pctChange);\r\n    return null;\r\n  });\r\n\r\n  return cumPctChangeList;\r\n};\r\n\r\nconst mStd = (arr, stIdx, enIdx) => {\r\n  return std(arr.slice(stIdx, enIdx));\r\n};\r\n\r\nconst std = arr => {\r\n  return mathjs.std(arr);\r\n};\r\n\r\n// function avg(arr, idx, range) {\r\n//   return sum(arr.slice(idx - range, idx)) / range;\r\n// }\r\n\r\nconst getStdMovingAvg = (pctChange, window) => {\r\n  const length = pctChange.length;\r\n  const data = [];\r\n  let value = null;\r\n  for (let i = 0; i < length - window + 1; i++) {\r\n    value = mStd(pctChange, i, i + window);\r\n    data.push(value);\r\n  }\r\n  return data;\r\n\r\n  // let data = sma(pctChange, ma, d => d);\r\n};\r\n\r\nconst getMovingCor = (onePctChange, anotherPctChange, window) => {\r\n  if (onePctChange.length !== anotherPctChange.length) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw \"length error\";\r\n  }\r\n\r\n  const length = onePctChange.length;\r\n  const data = [];\r\n  let corrcoeff = null;\r\n  for (let i = 0; i < length - window + 1; i++) {\r\n    corrcoeff = jStat.corrcoeff(\r\n      onePctChange.slice(i, i + window),\r\n      anotherPctChange.slice(i, i + window)\r\n    );\r\n    data.push(corrcoeff);\r\n  }\r\n  return data;\r\n};\r\n\r\nconst createLinearReturns = (finalReturn, length) => {\r\n  const step = Math.pow(finalReturn, 1 / length);\r\n  const array = new Array(length).fill(step);\r\n  return array;\r\n};\r\n\r\nconst addOneDay = date => {\r\n  const tomorrow = new Date();\r\n  tomorrow.setTime(date.getTime() + 86400000); // 86400000 하루 ms\r\n  return tomorrow;\r\n};\r\n\r\nconst getAnnualizedReturns = (returns, days) => {\r\n  const numOfTradingDaysOfOneYear = 252;\r\n  const annualized = days / numOfTradingDaysOfOneYear;\r\n  return (1 + returns) ** (1 / annualized) - 1;\r\n};\r\n\r\nconst getAnnualizedStd = std => {\r\n  const N = 252;\r\n  return std * N ** (1 / 2);\r\n};\r\n\r\nconst toRank = (array, des = true) => {\r\n  const sorted = array.slice().sort((a, b) => {\r\n    if (des) {\r\n      return b - a;\r\n    } else {\r\n      return a - b;\r\n    }\r\n  });\r\n  const ranks = array.slice().map(v => {\r\n    return sorted.indexOf(v) + 1;\r\n  });\r\n  return ranks;\r\n};\r\n\r\n// const getMaximumDrawDown = valueList => {\r\n//   let lastPeak = {\r\n//     value: 0\r\n//   };\r\n//   let lastDrawDown = {\r\n//     startIndex: null,\r\n//     endIndex: null\r\n//   };\r\n//   valueList.forEach((value, index) => {\r\n//     if (value > lastPeak.value) {\r\n//       // end last drawdown\r\n//     } else {\r\n//       // start new drawdown\r\n//     }\r\n//   });\r\n// };\r\n\r\nconst getMaximumDrawDown = valueList => {\r\n  const maxList = [0];\r\n\r\n  valueList.forEach((value, index) => {\r\n    if (index === 0) {\r\n      return null;\r\n    } else {\r\n      maxList.push(Math.max(maxList[index - 1], value));\r\n    }\r\n  });\r\n\r\n  const maxDrowDown = Math.min(...mathjs.dotDivide(valueList, maxList));\r\n  return 1 - maxDrowDown;\r\n};\r\n\r\nexport {\r\n  getRandomAllocation,\r\n  getRandAllocWithFixedWeights,\r\n  getStdMovingAvg,\r\n  getCumPctChange,\r\n  getMovingCor,\r\n  addOneDay,\r\n  getIntRandWeights,\r\n  getFloatRandWeights,\r\n  getAnnualizedReturns,\r\n  getAnnualizedStd,\r\n  toRank,\r\n  getMaximumDrawDown\r\n};\r\n","import { tradingDateList } from \"./data\";\r\nimport * as moment from \"moment\";\r\nimport { addOneDay } from \"./utils\";\r\n\r\n// const tradingDates = tradingDateList.map(tradingDate =>\r\n//   moment(tradingDate, \"YYYYMMDD\").toDate()\r\n// );\r\n\r\nconst tradingDates = tradingDateList;\r\n\r\n// console.log(tradingDates);\r\n\r\nclass TradingDate {\r\n  static getDateList = (_startDate, _endDate) => {\r\n    const startDate = TradingDate.magnet(_startDate, true);\r\n    const endDate = TradingDate.magnet(_endDate, false);\r\n\r\n    const startDateIdx = tradingDates.indexOf(startDate);\r\n    const endDateIdx = tradingDates.indexOf(endDate);\r\n\r\n    return tradingDates.slice(startDateIdx, endDateIdx + 1);\r\n  };\r\n\r\n  static getNonTradingDateList = (startDate, endDate) => {\r\n    console.log(\"getNonTradingDateList\");\r\n  };\r\n\r\n  static magnet = (_date, after = true) => {\r\n    const date = moment(_date).format(\"YYYYMMDD\");\r\n\r\n    if (tradingDates.indexOf(date) !== -1) {\r\n      return date;\r\n    }\r\n\r\n    let nearDateIdx = null;\r\n    for (let i = 0; i < tradingDates.length; i++) {\r\n      if (tradingDates[i] > date) {\r\n        nearDateIdx = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (after) {\r\n      return tradingDates[nearDateIdx];\r\n    } else {\r\n      return tradingDates[nearDateIdx - 1];\r\n    }\r\n  };\r\n\r\n  constructor(date) {\r\n    this.date = date;\r\n  }\r\n\r\n  addOneDay = () => {};\r\n}\r\n\r\n// TradingDate.getDateList(new Date(2017, 1, 5), new Date(2018, 1, 5));\r\n// console.log(TradingDate.magnet(new Date(2017, 1, 5)));\r\n// console.log(TradingDate.magnet(new Date(2017, 1, 5), false));\r\n// console.log(TradingDate.magnet(\"20170105\", false));\r\n\r\nexport default TradingDate;\r\n","// 국내주식                             40 - 10\r\n// 069500\tKODEX200 \t\t\t\t\t           40 - 0\r\n// 232080\tTIGER코스닥150\t\t\t\t        20 - 0\r\n// 해외주식                             40 - 10\r\n// 143850\tTIGER미국S&P500선물(H)\t\t    20 - 0\r\n// 195930\tTIGER유로스탁스50(합성H)\t     20 - 0\r\n// 238720\tKINDEX일본Nikkei225(H)\t      20 - 0\r\n// 192090\tTIGER차이나CSI300\t\t\t        20 - 0\r\n// 국내채권, 해외채권                    60-20\r\n// 148070\tKOSEF국고채10년\t\t\t\t        50 - 0\r\n// 136340\tKBSTAR중기우량회사채\t\t       40 - 0\r\n// 182490\tTIGER단기선진하이일드(합성H)\t 40 - 5\r\n// 원자재                               20 - 5\r\n// 132030\tKODEX골드선물(H)\t\t\t        15 - 0\r\n// 130680\tTIGER원유선물Enhanced(H)\t    15 - 0\r\n// 리스크 관리 수단\r\n// Inverse\t                           20 - 0\r\n// 114800\tKODEX인버스\t\t\t\t            20 - 0\r\n// FX\t                                 20 - 0\r\n// 138230\tKOSEF미국달러선물\t\t\t        20 - 0\r\n// 139660\tKOSEF미국달러선물인버스\t    \t20 - 0\r\n// 현금\t                               50 - 1\r\n// 130730\tKOSEF단기자금\t\t\t\t         49 - 0\r\n// 현금\t\t\t\t\t\t\t\t                 50 - 1\r\n\r\nimport * as d3 from \"d3\";\r\nimport * as moment from \"moment\";\r\nimport TradingDate from \"utils/TradingDate\";\r\nimport { tradingDateList as dateList } from \"utils/data\";\r\n\r\nlet firstDateOfMonth = [];\r\n\r\nconst parseFirstDateOfMonthFromDateList = (\r\n  dateList,\r\n  baseYearMonth = \"201602\"\r\n) => {\r\n  let preYearMonth = baseYearMonth;\r\n  const array = [];\r\n  dateList.forEach(date => {\r\n    let yearMonth = date.slice(0, 6);\r\n    if (yearMonth > preYearMonth) {\r\n      array.push(date);\r\n      preYearMonth = yearMonth;\r\n    }\r\n  });\r\n  return array;\r\n};\r\n\r\nconst firstMonday = \"20160104\";\r\nconst firstFriday = \"20160108\";\r\n\r\nconst getFirstDateOfWeekInRange = (\r\n  startDate = \"20160101\",\r\n  endDate = \"20191231\",\r\n  dayOfWeek = true // true: first(usually monday), false(usually friday)\r\n) => {\r\n  let date = null;\r\n  if (dayOfWeek) {\r\n    date = firstMonday;\r\n  } else {\r\n    date = firstFriday;\r\n  }\r\n\r\n  const dateMoment = moment(date, \"YYYYMMDD\");\r\n  const dateList = [];\r\n\r\n  let i = 0;\r\n  while (true) {\r\n    const tmpDate = dateMoment.add(7, \"days\").format(\"YYYYMMDD\");\r\n    if (tmpDate > endDate) break;\r\n\r\n    dateList.push(TradingDate.magnet(tmpDate, true));\r\n    i += 1;\r\n  }\r\n\r\n  const nonDupulicatedDateList = new Set(dateList);\r\n  return [...nonDupulicatedDateList];\r\n};\r\n\r\nconst firtDateOfWeek = getFirstDateOfWeekInRange();\r\n\r\nfirstDateOfMonth = parseFirstDateOfMonthFromDateList(dateList);\r\n\r\n// d3.csv(\"/dateList.csv\").then(data => {\r\n//   dateList = parseDateListFromCSVData(data);\r\n//   firstDateOfMonth = parseFirstDateOfMonthFromDateList(dateList);\r\n// });\r\n\r\nconst parseDateListFromCSVData = data => {\r\n  const rows = data;\r\n  const array = [];\r\n  rows.forEach(row => {\r\n    const date = Object.values(row)[0];\r\n    array.push(date);\r\n  });\r\n  return array;\r\n};\r\n\r\nexport { dateList, firstDateOfMonth, firtDateOfWeek };\r\n","import { firstDateOfMonth } from \"./priceData\";\r\nimport { assetCodeList as codeList } from \"utils/data\";\r\nimport * as d3 from \"d3\";\r\n// import { price_data, firstDateOfMonth } from \"./priceData\";\r\n\r\nconst price_data = {};\r\ncodeList.forEach(code => {\r\n  price_data[code] = { close_price: {} };\r\n});\r\n\r\nconst fillData = data => {\r\n  const rows = data;\r\n  rows.forEach(row => {\r\n    const { date } = row;\r\n    codeList.forEach(code => {\r\n      const price = parseFloat(row[code]);\r\n      price_data[code][\"close_price\"][date] = price;\r\n    });\r\n  });\r\n};\r\n\r\nd3.csv(\"/adjusted_price.csv\").then(data => {\r\n  fillData(data);\r\n});\r\n\r\nexport class Market {\r\n  constructor(date) {\r\n    this.date = date;\r\n  }\r\n\r\n  setDate(date) {\r\n    this.date = date;\r\n  }\r\n\r\n  getCurrentDate() {\r\n    return this.date;\r\n  }\r\n\r\n  getPrice(code) {\r\n    return price_data[code][\"close_price\"][this.date];\r\n  }\r\n\r\n  static getPrice(code, date) {\r\n    return price_data[code][\"close_price\"][date];\r\n  }\r\n\r\n  static getMonthlyPriceList(code) {\r\n    const priceList = firstDateOfMonth.map(\r\n      date => price_data[code][\"close_price\"][date]\r\n    );\r\n    return priceList;\r\n  }\r\n\r\n  static getMonthlyPriceListInRange(code, startDate, endDate) {\r\n    const monthlyPriceList = this.getMonthlyPriceList(code);\r\n\r\n    const startDateIdx = firstDateOfMonth.indexOf(startDate);\r\n    const endDateIdx = firstDateOfMonth.indexOf(endDate);\r\n\r\n    const slicedMonthlyPriceList = monthlyPriceList.slice(\r\n      startDateIdx,\r\n      endDateIdx + 1\r\n    );\r\n\r\n    return slicedMonthlyPriceList;\r\n  }\r\n\r\n  static getMonthlyReturns(code) {\r\n    const monthlyPriceList = Market.getMonthlyPriceList(code);\r\n\r\n    const pctChangeList = [];\r\n\r\n    monthlyPriceList.forEach((price, index) => {\r\n      if (index === 0) return;\r\n\r\n      const prePrice = monthlyPriceList[index - 1];\r\n      const pctChange = ((price - prePrice) / prePrice) * 100;\r\n      pctChangeList.push(pctChange);\r\n    });\r\n\r\n    return pctChangeList;\r\n  }\r\n\r\n  static getMonthlyReturnsInRange(code, startDate, endDate) {\r\n    const monthlyPriceList = Market.getMonthlyPriceListInRange(\r\n      code,\r\n      startDate,\r\n      endDate\r\n    );\r\n\r\n    const pctChangeList = [];\r\n\r\n    monthlyPriceList.forEach((price, index) => {\r\n      if (index === 0) return;\r\n\r\n      const prePrice = monthlyPriceList[index - 1];\r\n      const pctChange = ((price - prePrice) / prePrice) * 100;\r\n      pctChangeList.push(pctChange);\r\n    });\r\n\r\n    return pctChangeList;\r\n  }\r\n\r\n  getPriceList(code) {\r\n    return price_data[code][\"close_price\"];\r\n  }\r\n\r\n  getPctChange(code) {\r\n    const closePriceObject = this.getPriceList(code);\r\n    const dateList = Object.keys(closePriceObject);\r\n    const closePriceList = Object.values(closePriceObject);\r\n    const pctChangeList = [];\r\n\r\n    closePriceList.map((price, index) => {\r\n      if (index === 0) return null;\r\n\r\n      const prePrice = closePriceList[index - 1];\r\n      const pctChange = ((price - prePrice) / prePrice) * 100;\r\n      pctChangeList.push(pctChange);\r\n\r\n      return null;\r\n    });\r\n\r\n    const data = {};\r\n    data[\"dateList\"] = dateList.slice(1);\r\n    data[\"pctChange\"] = pctChangeList;\r\n\r\n    return data;\r\n  }\r\n\r\n  getCumPctChange(code) {\r\n    const closePriceObject = this.getPriceList(code);\r\n    const dateList = Object.keys(closePriceObject);\r\n    const closePriceList = Object.values(closePriceObject);\r\n    const cumPctChangeList = [];\r\n\r\n    const basePrice = closePriceList[0];\r\n    closePriceList.map(price => {\r\n      const pctChange = ((price - basePrice) / basePrice) * 100;\r\n      cumPctChangeList.push(pctChange);\r\n      return null;\r\n    });\r\n\r\n    const data = {};\r\n    data[\"dateList\"] = dateList.slice(1);\r\n    data[\"pctChange\"] = cumPctChangeList;\r\n\r\n    return data;\r\n  }\r\n\r\n  getPriceListInRange(code, startDate, endDate) {\r\n    const closePriceObject = this.getPriceList(code);\r\n    const closePriceList = Object.values(closePriceObject);\r\n\r\n    const dateList = Object.keys(closePriceObject);\r\n    const startDateIdx = dateList.indexOf(startDate);\r\n    const endDateIdx = dateList.indexOf(endDate);\r\n\r\n    const slicedClosePriceList = closePriceList.slice(\r\n      startDateIdx,\r\n      endDateIdx + 1\r\n    );\r\n\r\n    return slicedClosePriceList;\r\n  }\r\n\r\n  getHistoricalPriceListFromDate(code, date, count = 60) {\r\n    const closePriceObject = this.getPriceList(code);\r\n    const closePriceList = Object.values(closePriceObject);\r\n\r\n    const dateList = Object.keys(closePriceObject);\r\n    const endDateIdx = dateList.indexOf(date);\r\n    let startDateIdx = endDateIdx - count + 1;\r\n\r\n    if (startDateIdx < 0) {\r\n      startDateIdx = 0;\r\n    }\r\n\r\n    const slicedClosePriceList = closePriceList.slice(\r\n      startDateIdx,\r\n      endDateIdx + 1\r\n    );\r\n\r\n    return slicedClosePriceList;\r\n  }\r\n\r\n  getHistoricalReturnsFromDate(code, date, count) {\r\n    const closePriceList = this.getHistoricalPriceListFromDate(\r\n      code,\r\n      date,\r\n      count\r\n    );\r\n\r\n    const returnsList = [];\r\n    closePriceList.map((price, index) => {\r\n      if (index === 0) return null;\r\n\r\n      const prePrice = closePriceList[index - 1];\r\n      const pctChange = ((price - prePrice) / prePrice) * 100;\r\n      returnsList.push(pctChange);\r\n\r\n      return null;\r\n    });\r\n\r\n    return returnsList;\r\n  }\r\n\r\n  getReturnsListInRange(code, startDate, endDate) {\r\n    const closePriceList = this.getPriceListInRange(code, startDate, endDate);\r\n\r\n    const returnsList = [];\r\n\r\n    closePriceList.map((price, index) => {\r\n      if (index === 0) return null;\r\n\r\n      const prePrice = closePriceList[index - 1];\r\n      const pctChange = ((price - prePrice) / prePrice) * 100;\r\n      returnsList.push(pctChange);\r\n\r\n      return null;\r\n    });\r\n\r\n    return returnsList;\r\n  }\r\n\r\n  getCumPctChangeInRange(code, startDate, endDate) {\r\n    const closePriceObject = this.getPriceList(code);\r\n    const closePriceList = Object.values(closePriceObject);\r\n\r\n    const dateList = Object.keys(closePriceObject);\r\n    const startDateIdx = dateList.indexOf(startDate);\r\n    const endDateIdx = dateList.indexOf(endDate);\r\n\r\n    const slicedClosePriceList = closePriceList.slice(\r\n      startDateIdx,\r\n      endDateIdx + 1\r\n    );\r\n\r\n    const cumPctChangeList = [];\r\n\r\n    const basePrice = slicedClosePriceList[0];\r\n    slicedClosePriceList.map(price => {\r\n      const pctChange = ((price - basePrice) / basePrice) * 100;\r\n      cumPctChangeList.push(pctChange);\r\n      return null;\r\n    });\r\n\r\n    const data = {};\r\n    data[\"dateList\"] = dateList.slice(startDateIdx, endDateIdx + 1);\r\n    data[\"pctChange\"] = cumPctChangeList;\r\n\r\n    return data;\r\n  }\r\n}\r\n","import { Select } from \"antd\";\r\nimport React from \"react\";\r\nimport { assetCodeList, assetNameList } from \"utils/data\";\r\n\r\nconst Option = Select.Option;\r\n\r\nconst codeList = assetCodeList;\r\nconst nameList = assetNameList;\r\n\r\nconst children = [];\r\n\r\nfor (let i = 0; i < codeList.length; i++) {\r\n  children.push(<Option key={codeList[i]}>{nameList[i]}</Option>);\r\n}\r\n\r\nfunction handleChange(value, client) {\r\n  client.writeData({\r\n    data: {\r\n      globalVariables: {\r\n        __typename: \"GlobalVariables\",\r\n        codeList: value\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nconst SelectInput = props => {\r\n  return (\r\n    <Select\r\n      mode=\"multiple\"\r\n      style={{ width: \"100%\" }}\r\n      placeholder=\"Please select\"\r\n      defaultValue={props.data.globalVariables.codeList}\r\n      onChange={value => handleChange(value, props.client)}\r\n    >\r\n      {children}\r\n    </Select>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","import { schemeCategory10 } from \"d3-scale-chromatic\";\r\n\r\nconst dynamicColors = () => {\r\n  var r = Math.floor(Math.random() * 255);\r\n  var g = Math.floor(Math.random() * 255);\r\n  var b = Math.floor(Math.random() * 255);\r\n  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r\n};\r\n\r\nconst linspace = (a, b, n) => {\r\n  if (typeof n === \"undefined\") n = Math.max(Math.round(b - a) + 1, 1);\r\n  if (n < 2) {\r\n    return n === 1 ? [a] : [];\r\n  }\r\n  var i,\r\n    ret = Array(n);\r\n  n--;\r\n  for (i = n; i >= 0; i--) {\r\n    ret[i] = (i * b + (n - i) * a) / n;\r\n  }\r\n  return ret;\r\n};\r\n\r\nconst getLineDataFromEquation = (gradient, yIntercept) => {\r\n  const x = linspace(-2, 2, 100);\r\n  const y = x.map(d => d * gradient + yIntercept);\r\n\r\n  return x.map((data, index) => {\r\n    return { x: data, y: y[index] };\r\n  });\r\n};\r\n\r\nconst generateSchemeCategory20 = () => {\r\n  const arr = [...schemeCategory10];\r\n  for (let i = 0; i < 10; i++) {\r\n    arr.push(dynamicColors());\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst schemeCategory20 = generateSchemeCategory20();\r\n\r\nexport { dynamicColors, getLineDataFromEquation, schemeCategory20 };\r\n","import React from \"react\";\r\nimport { Market } from \"market\";\r\nimport * as math from \"mathjs\";\r\nimport * as $ from \"jquery\";\r\nimport Chart from \"chart.js\";\r\nimport { dynamicColors } from \"utils/chartUtil\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\n\r\nconst market = new Market(\"20161207\");\r\n\r\nclass PriceChart extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"chart__container\">\r\n        <canvas id=\"cursor\" width=\"800\" height=\"450\" />\r\n        <canvas id=\"line-chart\" width=\"800\" height=\"450\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.chartUpdate();\r\n  }\r\n\r\n  chartUpdate() {\r\n    const { startDate, endDate, codeList } = this.props.data.globalVariables;\r\n\r\n    const dataList = [];\r\n\r\n    for (let i = 0; i < codeList.length; i++) {\r\n      let price_data = market.getCumPctChangeInRange(\r\n        codeList[i],\r\n        startDate,\r\n        endDate\r\n      );\r\n      let dataset = {};\r\n      dataset.data = price_data;\r\n      dataset.label = codeList[i];\r\n      dataList.push(dataset);\r\n    }\r\n\r\n    const priceData = market.getCumPctChangeInRange(\r\n      \"232080\",\r\n      startDate,\r\n      endDate\r\n    );\r\n    const labels = priceData.dateList;\r\n\r\n    // same colors\r\n    const colors = this.chart.data.datasets.map(dataset => dataset.borderColor);\r\n    const datasets = [];\r\n    dataList.map((data, index) => {\r\n      const newColor = dynamicColors();\r\n      const dataset = {\r\n        label: data.label,\r\n        backgroundColor: colors[index] ? colors[index] : newColor,\r\n        borderColor: colors[index] ? colors[index] : newColor,\r\n        data: data.data.pctChange.map(num => math.round(num, 2)),\r\n        fill: false\r\n      };\r\n      datasets.push(dataset);\r\n      return null;\r\n    });\r\n\r\n    const data = {\r\n      labels: labels,\r\n      datasets\r\n    };\r\n    this.chart.data = data;\r\n    this.chart.update();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { startDate, endDate, codeList } = this.props.data.globalVariables;\r\n\r\n    const dataList = [];\r\n\r\n    for (let i = 0; i < codeList.length; i++) {\r\n      let price_data = market.getCumPctChangeInRange(\r\n        codeList[i],\r\n        startDate,\r\n        endDate\r\n      );\r\n      let dataset = {};\r\n      dataset.data = price_data;\r\n      dataset.label = codeList[i];\r\n      dataList.push(dataset);\r\n    }\r\n\r\n    const priceData = market.getCumPctChangeInRange(\r\n      \"232080\",\r\n      startDate,\r\n      endDate\r\n    );\r\n    const labels = priceData.dateList;\r\n\r\n    this._create_chart(dataList, labels);\r\n  }\r\n\r\n  _create_chart(price_data = [], labels = []) {\r\n    const datasets = [];\r\n    price_data.map((data, index) => {\r\n      const color = index < 10 ? schemeCategory10[index] : dynamicColors();\r\n      const dataset = {\r\n        label: data.label,\r\n        backgroundColor: color,\r\n        borderColor: color,\r\n        data: data.data.pctChange.map(num => math.round(num, 2)),\r\n        fill: false\r\n      };\r\n      datasets.push(dataset);\r\n      return null;\r\n    });\r\n\r\n    const data = {\r\n      labels: labels,\r\n      datasets\r\n    };\r\n\r\n    const config = {\r\n      type: \"line\",\r\n      data: data,\r\n      options: {\r\n        responsive: true,\r\n        // title: {\r\n        //   display: true,\r\n        //   text: \"asset's returns\"\r\n        // },\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false\r\n        },\r\n        hover: {\r\n          mode: \"nearest\",\r\n          intersect: true\r\n        },\r\n        onHover: event => {\r\n          const element = $(\"#cursor\");\r\n          const offsetLeft = element.offset().left;\r\n          const domElement = element.get(0);\r\n          const clientX = parseInt(event.clientX - offsetLeft);\r\n          const ctx = element.get(0).getContext(\"2d\");\r\n          ctx.clearRect(0, 0, domElement.width, domElement.height);\r\n          ctx.beginPath();\r\n          ctx.moveTo(clientX, 0);\r\n          ctx.lineTo(clientX, domElement.height);\r\n          ctx.setLineDash([10, 10]);\r\n          ctx.strokeStyle = \"#333\";\r\n          ctx.stroke();\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Date\"\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Return(%)\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    };\r\n\r\n    this.chart = new Chart(document.getElementById(\"line-chart\"), config);\r\n  }\r\n}\r\n\r\nexport default PriceChart;\r\n","import React from \"react\";\r\nimport { DatePicker } from \"antd\";\r\nimport * as moment from \"moment\";\r\nimport { tradingDateList } from \"../utils/data\";\r\nimport { Button } from \"antd\";\r\nimport MarketTimeLine from \"./MarketTimeLine\";\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst dateFormat = \"YYYYMMDD\";\r\n\r\nconst periodStore = {\r\n  testPeriod: {\r\n    startDate: \"20160701\",\r\n    endDate: tradingDateList[tradingDateList.length - 1]\r\n  },\r\n  testPeriod2: {\r\n    startDate: \"20170403\",\r\n    endDate: tradingDateList[tradingDateList.length - 1]\r\n  },\r\n  testPeriod3: {\r\n    startDate: \"20161004\",\r\n    endDate: \"20190516\"\r\n  },\r\n  GAPS2019: {\r\n    startDate: \"20190603\",\r\n    endDate: tradingDateList[tradingDateList.length - 1]\r\n  },\r\n  GAPS2018: {\r\n    startDate: \"20180601\",\r\n    endDate: \"20181031\"\r\n  },\r\n  GAPS2017: {\r\n    startDate: \"20170601\",\r\n    endDate: \"20171031\"\r\n  },\r\n  GAPS2016: {\r\n    startDate: \"20160601\",\r\n    endDate: \"20161031\"\r\n  }\r\n};\r\n\r\nclass MarketCalendar extends React.Component {\r\n  render() {\r\n    const { client, data } = this.props;\r\n    const { startDate, endDate } = data.globalVariables;\r\n    return (\r\n      <React.Fragment>\r\n        <RangePicker\r\n          onChange={date => this.onChange(date, client)}\r\n          value={[moment(startDate, dateFormat), moment(endDate, dateFormat)]}\r\n          format={dateFormat}\r\n          disabledDate={this.disabledDate}\r\n        />\r\n        <Button\r\n          type=\"default\"\r\n          onClick={() => this.setPeriod(client, \"testPeriod\")}\r\n        >\r\n          TestPeriod\r\n        </Button>\r\n        <Button\r\n          type=\"default\"\r\n          onClick={() => this.setPeriod(client, \"testPeriod2\")}\r\n        >\r\n          TestPeriod2\r\n        </Button>\r\n        <Button\r\n          type=\"default\"\r\n          onClick={() => this.setPeriod(client, \"testPeriod3\")}\r\n        >\r\n          TestPeriod3\r\n        </Button>\r\n        <Button type=\"default\" onClick={() => this.setStartDate(client)}>\r\n          최초일({tradingDateList[0]})\r\n        </Button>\r\n        <Button type=\"default\" onClick={() => this.setEndDate(client)}>\r\n          최종일({tradingDateList[tradingDateList.length - 1]})\r\n        </Button>\r\n        <Button\r\n          type=\"default\"\r\n          onClick={() => this.setPeriod(client, \"GAPS2019\")}\r\n        >\r\n          GAPS 2019\r\n        </Button>\r\n        <Button\r\n          type=\"default\"\r\n          onClick={() => this.setPeriod(client, \"GAPS2018\")}\r\n        >\r\n          GAPS 2018\r\n        </Button>\r\n        <Button\r\n          type=\"default\"\r\n          onClick={() => this.setPeriod(client, \"GAPS2017\")}\r\n        >\r\n          GAPS 2017\r\n        </Button>\r\n        <Button\r\n          type=\"default\"\r\n          onClick={() => this.setPeriod(client, \"GAPS2016\")}\r\n        >\r\n          GAPS 2016\r\n        </Button>\r\n        {/* <MarketTimeLine data={{ startDate, endDate }} client={client} /> */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  onChange = (date, client) => {\r\n    const startDate = date[0].format(dateFormat);\r\n    const endDate = date[1].format(dateFormat);\r\n    client.writeData({\r\n      data: {\r\n        globalVariables: {\r\n          __typename: \"GlobalVariables\",\r\n          startDate,\r\n          endDate\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  setPeriod = (client, periodType) => {\r\n    const { startDate, endDate } = periodStore[periodType];\r\n    client.writeData({\r\n      data: {\r\n        globalVariables: {\r\n          __typename: \"GlobalVariables\",\r\n          startDate,\r\n          endDate\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  setStartDate = client => {\r\n    const startDate = tradingDateList[0];\r\n    client.writeData({\r\n      data: {\r\n        globalVariables: {\r\n          __typename: \"GlobalVariables\",\r\n          startDate\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  setEndDate = client => {\r\n    const endDate = tradingDateList[tradingDateList.length - 1];\r\n    client.writeData({\r\n      data: {\r\n        globalVariables: {\r\n          __typename: \"GlobalVariables\",\r\n          endDate\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  disabledDate = currentDate => {\r\n    const date = currentDate.format(dateFormat);\r\n    if (tradingDateList.indexOf(date) === -1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n}\r\n\r\nexport default MarketCalendar;\r\n","import React from \"react\";\r\nimport Timeline from \"react-visjs-timeline\";\r\nimport { Button } from \"antd\";\r\nimport * as moment from \"moment\";\r\nimport { tradingDateList } from \"utils/data\";\r\nimport { addOneDay } from \"utils/utils\";\r\n\r\nclass MarketTimeLine extends React.Component {\r\n  render() {\r\n    const { startDate, endDate } = this.props.data;\r\n\r\n    const _startDate = moment(startDate, \"YYYYMMDD\").toDate();\r\n    const _endDate = moment(endDate, \"YYYYMMDD\").toDate();\r\n    const _minDate = moment(\"20160110\", \"YYYYMMDD\").toDate();\r\n    const _maxDate = moment(\"20190510\", \"YYYYMMDD\").toDate();\r\n\r\n    // const hiddenDates;\r\n\r\n    // tradingDateList.forEach(tradingDate =>{\r\n\r\n    // })\r\n\r\n    const options = {\r\n      editable: {\r\n        updateTime: true\r\n      },\r\n      orientation: {\r\n        axis: \"top\"\r\n      },\r\n      min: _minDate,\r\n      max: _maxDate,\r\n      zoomMin: 1000 * 60 * 60 * 24 * 4, // 4 day  최소 4일 해야 시간값 안나옴\r\n      zoomMax: 1000 * 60 * 60 * 24 * 365 * 10, // about 10 year\r\n      height: \"130px\",\r\n      showCurrentTime: true,\r\n\r\n      hiddenDates: [\r\n        {\r\n          start: \"2016-01-02 00:00:00\",\r\n          end: \"2016-01-04 00:00:00\",\r\n          repeat: \"weekly\"\r\n        }\r\n      ]\r\n    };\r\n    const items = [\r\n      {\r\n        id: \"validRange\",\r\n        start: _startDate,\r\n        end: _endDate\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Timeline ref=\"timeline\" options={options} items={items} />\r\n        <Button type=\"default\" onClick={this._fit}>\r\n          fit\r\n        </Button>\r\n        <Button type=\"default\" onClick={this._createCustomTime}>\r\n          create custom time\r\n        </Button>\r\n        <Button type=\"default\" onClick={this._play}>\r\n          play\r\n        </Button>\r\n        <Button type=\"default\" onClick={this._stop}>\r\n          stop\r\n        </Button>\r\n        <Button type=\"default\" onClick={this._reset}>\r\n          reset\r\n        </Button>\r\n        <Button type=\"default\" onClick={this._show}>\r\n          show data\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const timeline = this.refs.timeline.$el;\r\n    const customTimeId = \"id\";\r\n\r\n    this.timeline = timeline;\r\n    this.customTimeId = customTimeId;\r\n\r\n    timeline.itemsData.on(\"*\", this._itemUpdataHandler);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.timeline.itemsData.on(\"*\", this._itemUpdataHandler);\r\n  }\r\n\r\n  _fit = () => {\r\n    const timeline = this.timeline;\r\n\r\n    timeline.fit();\r\n  };\r\n\r\n  _itemUpdataHandler = (event, properties, senderId) => {\r\n    const { items, data } = properties;\r\n    const client = this.props.client;\r\n\r\n    items.forEach((item, index) => {\r\n      if (item === \"validRange\") {\r\n        const itemData = data[index];\r\n        const { start, end } = itemData;\r\n\r\n        const startDate = moment(start).format(\"YYYYMMDD\");\r\n        const endDate = moment(end).format(\"YYYYMMDD\");\r\n\r\n        if (\r\n          tradingDateList.indexOf(startDate) === -1 ||\r\n          tradingDateList.indexOf(endDate) === -1\r\n        )\r\n          return;\r\n\r\n        client.writeData({\r\n          data: {\r\n            globalVariables: {\r\n              __typename: \"GlobalVariables\",\r\n              startDate,\r\n              endDate\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  _show = () => {\r\n    const timeline = this.timeline;\r\n    console.log(timeline);\r\n    // console.log(timeline.items);\r\n    console.log(timeline.options);\r\n  };\r\n\r\n  _createCustomTime = () => {\r\n    const timeline = this.timeline;\r\n    const id = this.customTimeId;\r\n\r\n    timeline.addCustomTime(\"2017-10-20 13:00:00\", id);\r\n  };\r\n\r\n  _play = () => {\r\n    this.intervalId = setInterval(this._addOneDayToCustomTime, 100);\r\n  };\r\n\r\n  _stop = () => {\r\n    clearInterval(this.intervalId);\r\n  };\r\n\r\n  _reset = () => {\r\n    const timeline = this.timeline;\r\n    const id = this.customTimeId;\r\n\r\n    timeline.removeCustomTime(id);\r\n  };\r\n\r\n  _addOneDayToCustomTime = () => {\r\n    const timeline = this.timeline;\r\n    const id = this.customTimeId;\r\n\r\n    const customTime = timeline.getCustomTime(id);\r\n    const newCustomTime = addOneDay(customTime);\r\n    timeline.setCustomTime(newCustomTime, id);\r\n  };\r\n}\r\nexport default MarketTimeLine;\r\n","import React from \"react\";\r\nimport \"./PriceChartPage.css\";\r\nimport { GET_GLOBAL_VARIABLES } from \"apollo/queries\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Query } from \"react-apollo\";\r\nimport PriceChart from \"./PriceChart\";\r\nimport MarketCalendar from \"components/MarketCalendar\";\r\nimport SelectInput from \"components/SelectInput\";\r\n\r\nclass PriceChartPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id=\"chart\">\r\n        <h1>PriceChart</h1>\r\n        <Query query={GET_GLOBAL_VARIABLES}>\r\n          {({ loading, error, data, client }) => {\r\n            return (\r\n              <div>\r\n                <SelectInput data={data} client={client} />\r\n                <PriceChart data={data} />\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PriceChartPage;\r\n","import { Market } from \"../market\";\r\nimport * as math from \"mathjs\";\r\nimport * as jStat from \"jStat\";\r\n\r\nconst market = new Market(\"20160101\");\r\n\r\nclass Analyst {\r\n  // 최근 3개월 수익률\r\n  static getMomentum1 = (code, date, window = 60, excludeCurrentDay=true) => {\r\n    // '데이터 미리보기' 오류를 피하기 위해 조회날짜의 전날 까지의 데이터만 접근\r\n    // window + 1\r\n    // length - 2\r\n\r\n\t  if(excludeCurrentDay){\r\n\t\t      const curPriceList = market.getHistoricalPriceListFromDate(\r\n      code,\r\n      date,\r\n      Number(window) + 1\r\n    );\r\n\r\n    const startPrice = curPriceList[0];\r\n    const endPrice = curPriceList[curPriceList.length - 2];\r\n\r\n    const returns = (endPrice - startPrice) / startPrice;\r\n    return returns;\r\n\t  }\r\n\t  else {\r\n\t\t      const curPriceList = market.getHistoricalPriceListFromDate(\r\n      code,\r\n      date,\r\n      Number(window)\r\n    );\r\n\r\n    const startPrice = curPriceList[0];\r\n    const endPrice = curPriceList[curPriceList.length - 1];\r\n\r\n    const returns = (endPrice - startPrice) / startPrice;\r\n    return returns;\r\n\t  }\r\n\r\n  };\r\n\r\n  // 최근 1,3,6개월 평균수익률\r\n  static getMomentum2 = (code, date) => {\r\n    const oneMonthReturns = Analyst.getMomentum1(code, date, 20);\r\n    const threeMonthReturns = Analyst.getMomentum1(code, date, 60);\r\n    const sixMonthReturns = Analyst.getMomentum1(code, date, 120);\r\n    return (oneMonthReturns + threeMonthReturns + sixMonthReturns) / 3;\r\n  };\r\n\r\n  // 최근 t개월 수익률 - 최근 1개월 수익률\r\n  static getMomentum3 = (code, date, t = 30) => {\r\n    const oneMonthReturns = Analyst.getMomentum1(code, date, 20);\r\n    const threeMonthReturns = Analyst.getMomentum1(code, date, 60);\r\n    return threeMonthReturns - oneMonthReturns;\r\n  };\r\n\r\n  // 평균 모멘텀 스코어 systrader79\r\n  static getMomentum4 = (code, date) => {\r\n    const curPriceList = market.getHistoricalPriceListFromDate(code, date, 241);\r\n\r\n    const pickedPriceList = [];\r\n    const recentMonthList = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n    recentMonthList.forEach(t => {\r\n      const curIdx = curPriceList.length - 1;\r\n      // price[`D-${t * 20}`] = curPriceList[curIdx - t * 20];\r\n      const price = curPriceList[curIdx - t * 20];\r\n      pickedPriceList.push(price);\r\n    });\r\n\r\n    const curPrice = pickedPriceList[0];\r\n\r\n    const momentumScoreList = pickedPriceList\r\n      .slice(1, pickedPriceList.length)\r\n      .map(price => {\r\n        if (curPrice > price) return 1;\r\n        else return 0;\r\n      });\r\n\r\n    const meanOfmomentumScore = math.sum(momentumScoreList) / 12;\r\n\r\n    return meanOfmomentumScore;\r\n  };\r\n\r\n  static getCorrEff = (returns1, returns2) => {\r\n    return jStat.corrcoeff(returns1, returns2);\r\n  };\r\n\r\n  static getCorMatrix = (codeList, date, window) => {\r\n    // '데이터 미리보기' 오류를 피하기 위해 조회날짜의 전날 까지의 데이터만 접근\r\n    // window + 1\r\n    // 마지막 날짜 pop() 으로 빼줌\r\n\r\n    const listOfPriceList = codeList.map(code => {\r\n      const returns = market.getHistoricalReturnsFromDate(\r\n        code,\r\n        date,\r\n        Number(window) + 1\r\n      );\r\n      returns.pop();\r\n      return returns;\r\n    });\r\n\r\n    const corList = [];\r\n    for (let i = 0; i < codeList.length; i++) {\r\n      let row = {};\r\n      row[\"\"] = codeList[i];\r\n      for (let j = 0; j < codeList.length; j++) {\r\n        const corrcoeff = jStat.corrcoeff(\r\n          listOfPriceList[i],\r\n          listOfPriceList[j]\r\n        );\r\n        row[codeList[j]] = corrcoeff.toString();\r\n      }\r\n      corList.push(row);\r\n    }\r\n\r\n    corList[\"columns\"] = [\"\"].concat(codeList);\r\n    return corList;\r\n  };\r\n\r\n  static getCorScore = (codeList, date, window) => {\r\n    const corMatrix = Analyst.getCorMatrix(codeList, date, window);\r\n    const corScoreList = corMatrix.map(rows => {\r\n      const thisCode = rows[\"\"];\r\n      delete rows[\"\"];\r\n\r\n      const keys = Object.keys(rows);\r\n      // 자신을 제외한 상관계수 리스트\r\n      const corList = keys.filter(key => key != thisCode).map(key => rows[key]);\r\n      return math.sum(corList);\r\n    });\r\n    return corScoreList;\r\n  };\r\n\r\n  static getStd = (code, date, wondow) => {\r\n    // '데이터 미리보기' 오류를 피하기 위해 조회날짜의 전날 까지의 데이터만 접근\r\n    // window + 1\r\n    // 마지막 날짜 pop() 으로 빼줌\r\n    const returns = market.getHistoricalReturnsFromDate(code, date, wondow + 1);\r\n    returns.pop();\r\n    return math.std(returns);\r\n  };\r\n}\r\n\r\nconst func = () => {\r\n  const sampleCode = \"232080\";\r\n  const sampleDate = \"20170601\";\r\n  // const result = Analyst.getMomentum4(sampleCode, sampleDate);\r\n  const result1 = Analyst.getStd(sampleCode, sampleDate, 60);\r\n  const result2 = Analyst.getCorMatrix(\r\n    [sampleCode, \"069500\", \"143850\"],\r\n    sampleDate,\r\n    60\r\n  );\r\n  const result3 = Analyst.getCorScore(\r\n    [sampleCode, \"069500\", \"143850\"],\r\n    sampleDate,\r\n    60\r\n  );\r\n  console.log(result1);\r\n  console.log(result2);\r\n  console.log(result3);\r\n};\r\n\r\n// setTimeout(() => func(), 2000);\r\n\r\nexport { Analyst };\r\n","import { Analyst } from \"utils/analyst\";\r\nimport { assetCodeList, assetNameList} from \"utils/data\"\r\n\r\nconst strategy2 = context => {\r\n  // gaps 의 '모든 자산'에 대한 상대모멘텀\r\n  // 리밸런싱 날, 모멘텀 점수가 가장 높은 자산의 비중을 100\r\n  // 모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n  const { allocation, backtest, portfolio, codeList, simulationArgs } = context;\r\n  const { momentumWindow } = simulationArgs;\r\n  allocation.reset();\r\n  const scoreList = [];\r\n  codeList.forEach((code, index) => {\r\n    const momentumScore = Analyst.getMomentum1(\r\n      code,\r\n      backtest.date,\r\n      momentumWindow\r\n    );\r\n    scoreList.push(momentumScore);\r\n  });\r\n\r\n  let maxScoreIdx = scoreList.indexOf(Math.max(...scoreList));\r\n  const codeOfMaxScore = codeList[maxScoreIdx];\r\n\r\n  allocation.addWeight(codeOfMaxScore, 100);\r\n  const newAllocation = allocation.getAllocation();\r\n\r\n  portfolio.executeAllocation(newAllocation);\r\n};\r\n\r\nconst strategy3 = context => {\r\n  // top <= 6\r\n  // 모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n  // 리밸런싱 날, '주식'지수 6개중 모멘텀 점수가 높은 top개 지수를 100/top 씩 (동일비중)\r\n  const {\r\n    allocation,\r\n    backtest,\r\n    portfolio,\r\n    stockCodeList,\r\n    simulationArgs\r\n  } = context;\r\n  const { momentumWindow, top } = simulationArgs;\r\n  allocation.reset();\r\n  const scoreList = [];\r\n\r\n  stockCodeList.forEach((code, index) => {\r\n    const momentumScore = Analyst.getMomentum1(\r\n      code,\r\n      backtest.date,\r\n      momentumWindow\r\n    );\r\n    scoreList.push(momentumScore);\r\n  });\r\n\r\n  const scoreObjList = [];\r\n  stockCodeList.forEach((code, i) => {\r\n    scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n  });\r\n\r\n  // 모멘텀 점수 내림차순 정렬\r\n  scoreObjList.sort((a, b) => {\r\n    return b.momentumScore - a.momentumScore;\r\n  });\r\n\r\n  const topCodesList = scoreObjList.slice(0, top).map(d => d.code);\r\n  const equalWeight = 100 / top;\r\n\r\n  topCodesList.forEach(code => allocation.addWeight(code, equalWeight));\r\n\r\n  const newAllocation = allocation.getAllocation();\r\n  portfolio.executeAllocation(newAllocation);\r\n};\r\n\r\nconst strategy4 = context => {\r\n  // 모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n  // 리밸런싱 날, 우선적으로 절대모멘텀 점수로 필터링\r\n  // 필터링된 주가지수 n개\r\n  // n 의 크기에 따라 주식:채권 비중 결정\r\n  // 채권: selectedAsset\r\n  const {\r\n    allocation,\r\n    backtest,\r\n    portfolio,\r\n    stockCodeList,\r\n    simulationArgs\r\n  } = context;\r\n  const { selectedAsset } = simulationArgs;\r\n  const momentumWindow = simulationArgs.strategyArg1;\r\n\r\n  // 절대모멘텀 필터 점수\r\n  const absScore = 0;\r\n  // 채권\r\n  const bondCode = selectedAsset;\r\n  allocation.reset();\r\n  const scoreList = [];\r\n\r\n  stockCodeList.forEach((code, index) => {\r\n    const momentumScore = Analyst.getMomentum1(\r\n      code,\r\n      backtest.date,\r\n      momentumWindow\r\n    );\r\n    scoreList.push(momentumScore);\r\n  });\r\n\r\n  const scoreObjList = [];\r\n  stockCodeList.forEach((code, i) => {\r\n    scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n  });\r\n\r\n  // 절대모멘텀 충족 필터\r\n  const filterdCodeList = scoreObjList\r\n    .filter(d => d.momentumScore > absScore)\r\n    .map(d => d.code);\r\n\r\n  const numOfFilterdCode = filterdCodeList.length;\r\n\r\n  const weightOfOneDiv = Math.floor(100 / stockCodeList.length);\r\n\r\n  const weightOfStock = weightOfOneDiv * numOfFilterdCode;\r\n  const weightOfBond = 100 - weightOfStock;\r\n\r\n  filterdCodeList.forEach(code => allocation.addWeight(code, weightOfOneDiv));\r\n  allocation.addWeight(bondCode, weightOfBond);\r\n\r\n  const newAllocation = allocation.getAllocation();\r\n  portfolio.executeAllocation(newAllocation);\r\n};\r\n\r\nconst strategy5 = context => {\r\n  // 모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n  // 리밸런싱 날, 주식지수 6개의 모멘텀 점수 랭크를 메긴 다음, 순위별로 차등 비중\r\n  const {\r\n    allocation,\r\n    backtest,\r\n    portfolio,\r\n    stockCodeList,\r\n    simulationArgs\r\n  } = context;\r\n\r\n  const momentumWindow = simulationArgs.strategyArg1;\r\n\r\n  allocation.reset();\r\n  const scoreList = [];\r\n\r\n  stockCodeList.forEach((code, index) => {\r\n    const momentumScore = Analyst.getMomentum1(\r\n      code,\r\n      backtest.date,\r\n      momentumWindow\r\n    );\r\n    scoreList.push(momentumScore);\r\n  });\r\n\r\n  const scoreObjList = [];\r\n  stockCodeList.forEach((code, i) => {\r\n    scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n  });\r\n\r\n  // 모멘텀 점수 내림차순 정렬\r\n  scoreObjList.sort((a, b) => {\r\n    return b.momentumScore - a.momentumScore;\r\n  });\r\n\r\n  const orderdCodeList = scoreObjList.map(obj => obj.code);\r\n  const rankWeightList = [30, 25, 20, 15, 10, 0];\r\n  orderdCodeList.forEach((code, index) =>\r\n    allocation.addWeight(code, rankWeightList[index])\r\n  );\r\n\r\n  const newAllocation = allocation.getAllocation();\r\n\r\n  portfolio.executeAllocation(newAllocation);\r\n};\r\n\r\nconst strategy14 = context => {\r\n  // run10 과 유사하나 인버스 편입 안하였음\r\n  // 절대모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n  // 세계주가지수를 절대모멘텀으로 두고\r\n  // 주가지수들의 상대모멘텀으로 자산 배분\r\n  // 상승장일경우, 주식 비중 높게\r\n  // 하락장일경우, 주식 비중 낮게\r\n\r\n  // GAPS 비중제한 적용하여\r\n\r\n  // top=1, 상위 1개가 코스피인 경우 : 코스피20 미국10\r\n  // top=1, 상위 1개가 코스닥인 경우 : 코스닥10 미국10\r\n  // top=1, 상위 1개가 해외인 경우 : 코스피10 해외20\r\n\r\n  // top=2, 상위 2개가 코스피,코스닥인 경우 : 코스피20 코스닥10 미국10\r\n  // top=2, 상위 2개가 코스피,해외인 경우 : 코스피20 해외20\r\n  // top=2, 상위 2개가 코스닥,해외인 경우 : 코스닥10 해외20\r\n  // top=2, 상위 2개가 둘다 해외인 경우 : 해외1 20 해외2 20\r\n  const {\r\n    allocation,\r\n    backtest,\r\n    portfolio,\r\n    simulationArgs,\r\n    stockCodeList\r\n  } = context;\r\n\r\n  const momentumWindow = simulationArgs.strategyArg1;\r\n  const top = simulationArgs.strategyArg2;\r\n\r\n  allocation.reset();\r\n\r\n  const marketState = Analyst.getMomentum1(\r\n    \"WORLD_STOCK\",\r\n    backtest.date,\r\n    momentumWindow\r\n  );\r\n\r\n  if (marketState > 0) {\r\n    // 상승장\r\n    const scoreList = [];\r\n    stockCodeList.forEach((code, index) => {\r\n      const momentumScore = Analyst.getMomentum1(\r\n        code,\r\n        backtest.date,\r\n        momentumWindow\r\n      );\r\n      scoreList.push(momentumScore);\r\n    });\r\n\r\n    const scoreObjList = [];\r\n    stockCodeList.forEach((code, i) => {\r\n      scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n    });\r\n\r\n    // 모멘텀 점수 내림차순 정렬\r\n    scoreObjList.sort((a, b) => {\r\n      return b.momentumScore - a.momentumScore;\r\n    });\r\n\r\n    const topCodesList = scoreObjList.slice(0, top).map(d => d.code);\r\n\r\n    if (top == 1) {\r\n      const code = topCodesList[0];\r\n      if (code === \"069500\") {\r\n        // 코스피\r\n        // 코스피20 미국10\r\n        allocation.addWeight(\"069500\", 20);\r\n        allocation.addWeight(\"143850\", 10);\r\n      } else if (code === \"232080\") {\r\n        // 코스닥\r\n        // 코스닥10 미국10\r\n        allocation.addWeight(\"232080\", 20);\r\n        allocation.addWeight(\"143850\", 10);\r\n      } else {\r\n        // 해외\r\n        // 코스피10 해외20\r\n        allocation.addWeight(\"069500\", 10);\r\n        allocation.addWeight(code, 20);\r\n      }\r\n    } else if (top == 2) {\r\n      const code1 = topCodesList[0];\r\n      const code2 = topCodesList[1];\r\n\r\n      const condition1 = code1 === \"069500\" || code2 === \"069500\";\r\n      const condition2 = code1 === \"232080\" || code2 === \"232080\";\r\n\r\n      if (condition1 && condition2) {\r\n        // 코스피 & 코스닥\r\n        // 코스피20 코스닥20\r\n        // 미국10\r\n        allocation.addWeight(\"069500\", 20);\r\n        allocation.addWeight(\"232080\", 20);\r\n        allocation.addWeight(\"143850\", 10);\r\n      } else if (condition1 || condition2) {\r\n        if (condition1) {\r\n          // 코스피20 해외20\r\n          allocation.addWeight(\"069500\", 20);\r\n          if (code1 === \"069500\") {\r\n            allocation.addWeight(code2, 20);\r\n          } else {\r\n            allocation.addWeight(code1, 20);\r\n          }\r\n        } else {\r\n          // 코스닥20 해외20\r\n          allocation.addWeight(\"232080\", 20);\r\n          if (code1 === \"232080\") {\r\n            allocation.addWeight(code2, 20);\r\n          } else {\r\n            allocation.addWeight(code1, 20);\r\n          }\r\n        }\r\n      } else {\r\n        // 해외1 20 해외2 20 코스피10\r\n        allocation.addWeight(code1, 20);\r\n        allocation.addWeight(code2, 20);\r\n        allocation.addWeight(\"069500\", 10);\r\n      }\r\n    } else {\r\n      console.log(top);\r\n      throw \"invalid top arg\";\r\n    }\r\n    allocation.addWeight(\"132030\", 5); // 골드 최소비중\r\n\r\n    // 남은 비중 국채, 중기회사채, 하이일드 배분\r\n    const safetyAssets = [\"148070\", \"136340\", \"182490\"];\r\n    let equalWeight = null;\r\n    let bondsWeights = [];\r\n\r\n    if (allocation.getRemainsWeight() > 60) {\r\n      // bondsWeights = [28, 27, 5];\r\n      bondsWeights = [20, 20, 20];\r\n    } else {\r\n      // equalWeight = (allocation.getRemainsWeight() - 5) / 3;\r\n      equalWeight = allocation.getRemainsWeight() / 3;\r\n      // bondsWeights = [equalWeight * 2, equalWeight, 5];\r\n      bondsWeights = [equalWeight, equalWeight, equalWeight];\r\n    }\r\n\r\n    safetyAssets.forEach((code, index) => {\r\n      allocation.addWeight(code, bondsWeights[index]);\r\n    });\r\n  } else {\r\n    // 하락장\r\n\r\n    // 코스피10 미국10\r\n    allocation.addWeight(\"069500\", 10);\r\n    allocation.addWeight(\"143850\", 10);\r\n\r\n    // 남은 비중 채권, 인버스, 달러 배분\r\n\r\n    // KOSEF국고채10년\r\n    // KBSTAR중기우량회사채\r\n    // TIGER단기선진하이일드(합성H)\r\n    // 다른 채권과 달리 하이일드는 주식과 양의 상관관계를 가졌기 때문에 낮은 비중 주었음\r\n    const bonds = [\"148070\", \"136340\", \"182490\"];\r\n    const bondsWeights = [36, 19, 5];\r\n    allocation.addWeight(\"132030\", 5); // 골드 최소비중\r\n\r\n    bonds.forEach((code, index) => {\r\n      allocation.addWeight(code, bondsWeights[index]);\r\n    });\r\n\r\n    const safetyAssets = [\r\n      \"114800\", // KODEX인버스\r\n      \"138230\" // KOSEF미국달러선물\r\n    ];\r\n\r\n    const equalWeight = allocation.getRemainsWeight() / safetyAssets.length;\r\n\r\n    safetyAssets.forEach(code => {\r\n      allocation.addWeight(code, equalWeight);\r\n    });\r\n  }\r\n\r\n  allocation.allocateRemainsWeightToCash();\r\n  const newAllocation = allocation.getAllocation();\r\n\r\n  portfolio.executeAllocation(newAllocation);\r\n};\r\n\r\nconst positionOfStrategy14 = (context, date) => {\r\n  const {\r\n    allocation,\r\n    simulationArgs,\r\n    stockCodeList\r\n  } = context;\r\n\r\n  const momentumWindow = simulationArgs.strategyArg1;\r\n  const top = simulationArgs.strategyArg2;\r\n\r\n  allocation.reset();\r\n\r\n  const marketState = Analyst.getMomentum1(\r\n    \"WORLD_STOCK\",\r\n    date,\r\n    momentumWindow,\r\n\t  false\r\n  );\r\n\r\n  if (marketState > 0) {\r\n    // 상승장\r\n    const scoreList = [];\r\n    stockCodeList.forEach((code, index) => {\r\n      const momentumScore = Analyst.getMomentum1(\r\n        code,\r\n        date,\r\n        momentumWindow,\r\n\t\t  false\r\n\t  \r\n      );\r\n      scoreList.push(momentumScore);\r\n    });\r\n\r\n    const scoreObjList = [];\r\n    stockCodeList.forEach((code, i) => {\r\n      scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n    });\r\n\r\n    // 모멘텀 점수 내림차순 정렬\r\n    scoreObjList.sort((a, b) => {\r\n      return b.momentumScore - a.momentumScore;\r\n    });\r\n\r\n    const topCodesList = scoreObjList.slice(0, top).map(d => d.code);\r\n\r\n    if (top == 1) {\r\n      const code = topCodesList[0];\r\n      if (code === \"069500\") {\r\n        // 코스피\r\n        // 코스피20 미국10\r\n        allocation.addWeight(\"069500\", 20);\r\n        allocation.addWeight(\"143850\", 10);\r\n      } else if (code === \"232080\") {\r\n        // 코스닥\r\n        // 코스닥10 미국10\r\n        allocation.addWeight(\"232080\", 20);\r\n        allocation.addWeight(\"143850\", 10);\r\n      } else {\r\n        // 해외\r\n        // 코스피10 해외20\r\n        allocation.addWeight(\"069500\", 10);\r\n        allocation.addWeight(code, 20);\r\n      }\r\n    } else if (top == 2) {\r\n      const code1 = topCodesList[0];\r\n      const code2 = topCodesList[1];\r\n\r\n      const condition1 = code1 === \"069500\" || code2 === \"069500\";\r\n      const condition2 = code1 === \"232080\" || code2 === \"232080\";\r\n\r\n      if (condition1 && condition2) {\r\n        // 코스피 & 코스닥\r\n        // 코스피20 코스닥20\r\n        // 미국10\r\n        allocation.addWeight(\"069500\", 20);\r\n        allocation.addWeight(\"232080\", 20);\r\n        allocation.addWeight(\"143850\", 10);\r\n      } else if (condition1 || condition2) {\r\n        if (condition1) {\r\n          // 코스피20 해외20\r\n          allocation.addWeight(\"069500\", 20);\r\n          if (code1 === \"069500\") {\r\n            allocation.addWeight(code2, 20);\r\n          } else {\r\n            allocation.addWeight(code1, 20);\r\n          }\r\n        } else {\r\n          // 코스닥20 해외20\r\n          allocation.addWeight(\"232080\", 20);\r\n          if (code1 === \"232080\") {\r\n            allocation.addWeight(code2, 20);\r\n          } else {\r\n            allocation.addWeight(code1, 20);\r\n          }\r\n        }\r\n      } else {\r\n        // 해외1 20 해외2 20 코스피10\r\n        allocation.addWeight(code1, 20);\r\n        allocation.addWeight(code2, 20);\r\n        allocation.addWeight(\"069500\", 10);\r\n      }\r\n    } else {\r\n      console.log(top);\r\n      throw \"invalid top arg\";\r\n    }\r\n    allocation.addWeight(\"132030\", 5); // 골드 최소비중\r\n\r\n    // 남은 비중 국채, 중기회사채, 하이일드 배분\r\n    const safetyAssets = [\"148070\", \"136340\", \"182490\"];\r\n    let equalWeight = null;\r\n    let bondsWeights = [];\r\n\r\n    if (allocation.getRemainsWeight() > 60) {\r\n      // bondsWeights = [28, 27, 5];\r\n      bondsWeights = [20, 20, 20];\r\n    } else {\r\n      // equalWeight = (allocation.getRemainsWeight() - 5) / 3;\r\n      equalWeight = allocation.getRemainsWeight() / 3;\r\n      // bondsWeights = [equalWeight * 2, equalWeight, 5];\r\n      bondsWeights = [equalWeight, equalWeight, equalWeight];\r\n    }\r\n\r\n    safetyAssets.forEach((code, index) => {\r\n      allocation.addWeight(code, bondsWeights[index]);\r\n    });\r\n  } else {\r\n    // 하락장\r\n\r\n    // 코스피10 미국10\r\n    allocation.addWeight(\"069500\", 10);\r\n    allocation.addWeight(\"143850\", 10);\r\n\r\n    // 남은 비중 채권, 인버스, 달러 배분\r\n\r\n    // KOSEF국고채10년\r\n    // KBSTAR중기우량회사채\r\n    // TIGER단기선진하이일드(합성H)\r\n    // 다른 채권과 달리 하이일드는 주식과 양의 상관관계를 가졌기 때문에 낮은 비중 주었음\r\n    const bonds = [\"148070\", \"136340\", \"182490\"];\r\n    const bondsWeights = [36, 19, 5];\r\n    allocation.addWeight(\"132030\", 5); // 골드 최소비중\r\n\r\n    bonds.forEach((code, index) => {\r\n      allocation.addWeight(code, bondsWeights[index]);\r\n    });\r\n\r\n    const safetyAssets = [\r\n      \"114800\", // KODEX인버스\r\n      \"138230\" // KOSEF미국달러선물\r\n    ];\r\n\r\n    const equalWeight = allocation.getRemainsWeight() / safetyAssets.length;\r\n\r\n    safetyAssets.forEach(code => {\r\n      allocation.addWeight(code, equalWeight);\r\n    });\r\n  }\r\n\r\n  allocation.allocateRemainsWeightToCash();\r\n  const newAllocation = allocation.getAllocation();\r\n  \r\n\tconst result = newAllocation.map(asset => {\r\n\t\tconst assetIdx = assetCodeList.indexOf(asset.code);\r\n\t\treturn {...asset, name: assetNameList[assetIdx]}\r\n\t})\r\n\t\r\n\t\r\n\treturn result;\r\n};\r\n\r\nexport { strategy2, strategy3, strategy4, strategy5, strategy14, positionOfStrategy14 };\r\n","import { Market } from \"market\";\r\nimport * as math from \"mathjs\";\r\nimport { tradingDateList, assetCodeList } from \"utils/data\";\r\nimport { getAnnualizedReturns, getAnnualizedStd, toRank } from \"utils/utils\";\r\nimport { Analyst } from \"utils/analyst\";\r\nimport * as Strategy from \"core/strategy\";\r\n\r\nconst SEED_MONEY = 10000000000;\r\n// const COMMISION_RATE = 0.015 / 100;\r\nconst COMMISION_RATE = 0 / 100;\r\nconst TAX_RATE = 0;\r\n// const TAX_RATE = 0.3 / 100;\r\n\r\nclass PortFolio {\r\n  constructor(date, seedMoney = SEED_MONEY) {\r\n    this.date = date;\r\n    this.cash = seedMoney;\r\n    this.assets = {};\r\n    this.log = [];\r\n    this.market = new Market(date);\r\n  }\r\n\r\n  setDate(date) {\r\n    this.date = date;\r\n    this.market.setDate(date);\r\n  }\r\n\r\n  getCurrentAllocation() {\r\n    const curAlloc = [];\r\n    const NAV = this.valuation();\r\n    const assetsNames = this.getAssetsNames();\r\n    assetsNames.map(assetName => {\r\n      const code = assetName;\r\n      const amount = this.assets[assetName];\r\n      const price = this.market.getPrice(code);\r\n      const assetValue = amount * price;\r\n      const weight = (assetValue / NAV) * 100;\r\n      curAlloc.push({ code: code, weight: weight });\r\n      return null;\r\n    });\r\n\r\n    curAlloc.push({ code: \"cash\", weight: (this.cash / NAV) * 100 });\r\n\r\n    return curAlloc;\r\n  }\r\n\r\n  orderableAmount(cash, price) {\r\n    return Math.floor(cash / price);\r\n  }\r\n\r\n  order(code, amount) {\r\n    if (amount > 0) {\r\n      this.buy(code, amount);\r\n    } else {\r\n      this.sell(code, -amount);\r\n    }\r\n  }\r\n\r\n  buyValidation(requiredCash) {\r\n    if (this.cash > requiredCash) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  buy(code, amount) {\r\n    const price = this.market.getPrice(code);\r\n\r\n    const cashForAsset = price * amount;\r\n    const commision = price * amount * COMMISION_RATE;\r\n    const requiredCash = cashForAsset + commision;\r\n\r\n    if (this.buyValidation(requiredCash)) {\r\n      this.executeBuy(code, amount, requiredCash);\r\n      const log =\r\n        \"date \" +\r\n        this.date +\r\n        \" buy \" +\r\n        code +\r\n        \" \" +\r\n        price +\r\n        \" \" +\r\n        amount +\r\n        \" shares\";\r\n      this.log.push(log);\r\n    } else {\r\n      console.log(\"reject buy order\");\r\n    }\r\n  }\r\n\r\n  executeBuy(code, amount, requiredCash) {\r\n    this.cash -= requiredCash;\r\n    if (this.assets[code] === undefined) {\r\n      this.assets[code] = amount;\r\n    } else {\r\n      this.assets[code] += amount;\r\n    }\r\n  }\r\n\r\n  sell(code, amount) {\r\n    const price = this.market.getPrice(code, this.date);\r\n    const liquidatedCash = price * amount;\r\n    const commision = price * amount * COMMISION_RATE;\r\n    const tax = price * amount * TAX_RATE;\r\n    const cash = liquidatedCash - commision - tax;\r\n\r\n    this.assets[code] -= amount;\r\n    this.cash += cash;\r\n\r\n    const log =\r\n      \"date \" +\r\n      this.date +\r\n      \" sell \" +\r\n      code +\r\n      \" \" +\r\n      price +\r\n      \" \" +\r\n      amount +\r\n      \" shares\";\r\n    this.log.push(log);\r\n  }\r\n\r\n  rebalance(newAllocation) {}\r\n\r\n  executeAllocation(newAllocation) {\r\n    const orderList = [];\r\n\r\n    let totalWeight = 0;\r\n    newAllocation.map(asset => {\r\n      const code = asset.code;\r\n      const weight = asset.weight;\r\n      totalWeight += weight;\r\n\r\n      if (code === \"cash\") return null;\r\n\r\n      let maximumAmount = null;\r\n      if (weight === 0) {\r\n        maximumAmount = 0;\r\n      } else {\r\n        const orderableMoney = this.weightToValue(weight);\r\n        const price = this.market.getPrice(code);\r\n        maximumAmount = this.orderableAmount(orderableMoney, price);\r\n      }\r\n\r\n      const curAmount = this.assets[code] === undefined ? 0 : this.assets[code];\r\n      const amountDelta = maximumAmount - curAmount;\r\n\r\n      const order = { code: code, amount: amountDelta };\r\n      orderList.push(order);\r\n      return null;\r\n    });\r\n\r\n    // 결과값이 99.999999 인 경우 핸들링 위해 반올림 하였음\r\n    if (Math.round(totalWeight) !== 100) {\r\n      console.log(totalWeight);\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw \"total weight is not 100\";\r\n    }\r\n\r\n    // 수수료 현금확보를 위해 매도 -> 매수 순서로\r\n\r\n    const sellOrders = orderList.filter(order => order.amount < 0);\r\n    const buyOrders = orderList.filter(order => order.amount > 0);\r\n\r\n    sellOrders.map(order => this.order(order.code, order.amount));\r\n    buyOrders.map(order => this.order(order.code, order.amount));\r\n  }\r\n\r\n  weightToValue(weight) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    if (weight === 0) throw \"weight can't be 0\";\r\n\r\n    const NAV = this.valuation();\r\n\r\n    // // weight 5% 가감\r\n    // weight *= 0.95;\r\n\r\n    return (NAV / 100) * weight;\r\n  }\r\n\r\n  valuation() {\r\n    const assetsNames = this.getAssetsNames();\r\n    let NAV = this.cash;\r\n    assetsNames.map(name => {\r\n      const price = this.market.getPrice(name, this.date);\r\n      const amount = this.assets[name];\r\n      NAV += price * amount;\r\n      return null;\r\n    });\r\n    return NAV;\r\n  }\r\n\r\n  getAssetsNames() {\r\n    return Object.keys(this.assets);\r\n  }\r\n\r\n  print() {\r\n    console.log(this.assets);\r\n  }\r\n}\r\n\r\n// context 의 값들은 ref 여야함\r\n\r\nconst afterMarket = context => {\r\n  const { backtest, portfolio } = context;\r\n  const { date } = backtest;\r\n\r\n  const NAV = portfolio.valuation();\r\n  const shortLog = \"date: \" + date + \" NAV: \" + NAV;\r\n  const curAllocation = portfolio.getCurrentAllocation();\r\n\r\n  backtest.dailyLog.push(shortLog);\r\n  backtest.navList.push(NAV);\r\n  backtest.allocationList.push(curAllocation);\r\n  backtest.dateList.push(date);\r\n};\r\n\r\nconst shouldTrade = context => {\r\n  const { backtest } = context;\r\n  const { date } = backtest;\r\n  const rebalanceDay = backtest.rebalanceDateList.indexOf(date);\r\n  if (rebalanceDay !== -1) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst intraMarket = (context, strategy) => {\r\n  strategy(context);\r\n};\r\n\r\nclass BackTest {\r\n  afterMarket = () => {\r\n    const NAV = this.portfolio.valuation();\r\n    const shortLog = \"date: \" + this.date + \" NAV: \" + NAV;\r\n    const curAllocation = this.portfolio.getCurrentAllocation();\r\n\r\n    this.dailyLog.push(shortLog);\r\n    this.navList.push(NAV);\r\n    this.allocationList.push(curAllocation);\r\n    this.dateList.push(this.date);\r\n  };\r\n\r\n  shouldTrade = () => {\r\n    const rebalanceDay = this.rebalanceDateList.indexOf(this.date);\r\n    if (rebalanceDay !== -1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  constructor() {\r\n    this.startDate = null;\r\n    this.endDate = null;\r\n    this.date = null;\r\n    this.dateIndex = null;\r\n    this.portfolio = null;\r\n    this.rebalanceDateList = null;\r\n    this.fixedAlloc = null;\r\n    this.navList = null;\r\n    this.returnList = null;\r\n    this.orderLog = null;\r\n    this.eventLog = null;\r\n  }\r\n\r\n  init(backTestInfo) {\r\n    const { startDate, endDate, rebalanceDateList, allocation } = backTestInfo;\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n    this.date = startDate;\r\n    this.dateIndex = tradingDateList.indexOf(this.date);\r\n    this.portfolio = new PortFolio(startDate);\r\n    this.rebalanceDateList = rebalanceDateList;\r\n    this.fixedAlloc = allocation;\r\n    this.navList = [];\r\n    this.returnList = [];\r\n    this.dateList = [];\r\n    this.allocationList = [];\r\n    this.orderLog = [];\r\n    this.eventLog = [];\r\n    this.dailyLog = [];\r\n  }\r\n\r\n  result() {\r\n    const result = {};\r\n\r\n    result[\"navList\"] = this.navList;\r\n    result[\"returnList\"] = this.returnList;\r\n    result[\"cumReturnList\"] = this.cumReturnList;\r\n    result[\"allocationList\"] = this.allocationList;\r\n    result[\"dateList\"] = this.dateList;\r\n    result[\"orderLog\"] = this.orderLog;\r\n    result[\"eventLog\"] = this.eventLog;\r\n\r\n    result[\"finalReturn\"] = this.getFinalReturn();\r\n    result[\"annualizedReturns\"] = this.getAnnualizedReturns();\r\n    result[\"annualizedStd\"] = this.getAnnualizedStd();\r\n    result[\"sharpeRatio\"] = this.getSharpeRatio();\r\n\r\n    result[\"std\"] = this.getStd();\r\n\r\n    return result;\r\n  }\r\n\r\n  getFinalReturn() {\r\n    const prevPrice = this.navList[0];\r\n    const aftPrice = this.navList[this.navList.length - 1];\r\n    const finalReturn = (aftPrice - prevPrice) / prevPrice;\r\n    return finalReturn;\r\n  }\r\n\r\n  getAnnualizedReturns() {\r\n    const returns = this.getFinalReturn();\r\n    const days = this.navList.length - 1;\r\n    return getAnnualizedReturns(returns, days);\r\n  }\r\n\r\n  getAnnualizedStd() {\r\n    const std = this.getStd();\r\n    return getAnnualizedStd(std);\r\n  }\r\n\r\n  getSharpeRatio() {\r\n    const sharpeRatio = this.getAnnualizedReturns() / this.getAnnualizedStd();\r\n    return sharpeRatio;\r\n  }\r\n\r\n  getStd() {\r\n    let newReturnList = this.returnList.map(returns => returns / 100);\r\n    // let newReturnList = this.returnList.map(returns => returns);\r\n    newReturnList.shift();\r\n    const std = math.std(newReturnList);\r\n    return std;\r\n  }\r\n\r\n  forwardDate(days = 1) {\r\n    this.dateIndex += days;\r\n    if (this.dateIndex >= tradingDateList.length) {\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw \"dateIndex out of range\";\r\n    }\r\n    this.date = tradingDateList[this.dateIndex];\r\n    this.portfolio.setDate(this.date);\r\n  }\r\n\r\n  fixedAllocation(allocation) {\r\n    this.allocation = allocation;\r\n  }\r\n\r\n  setRebalanceDateList(dateList) {\r\n    this.rebalanceDateList = dateList;\r\n  }\r\n\r\n  run() {\r\n    const context = {\r\n      backtest: this,\r\n      portfolio: this.portfolio\r\n    };\r\n\r\n    this.portfolio.executeAllocation(this.fixedAlloc);\r\n    while (true) {\r\n      if (shouldTrade(context)) {\r\n        this.portfolio.executeAllocation(this.fixedAlloc);\r\n      }\r\n      afterMarket(context);\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run2(simulationArgs) {\r\n    const codeList = assetCodeList;\r\n    const allocation = new PortfolioAllocation();\r\n\r\n    const context = {\r\n      backtest: this,\r\n      portfolio: this.portfolio,\r\n      allocation,\r\n      codeList,\r\n      simulationArgs\r\n    };\r\n\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    while (true) {\r\n      if (shouldTrade(context)) {\r\n        intraMarket(context, Strategy.strategy2);\r\n      }\r\n      afterMarket(context);\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run3(simulationArgs) {\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const codeList = assetCodeList;\r\n    const stockCodeList = codeList.slice(0, 6);\r\n\r\n    const allocation = new PortfolioAllocation();\r\n\r\n    const context = {\r\n      backtest: this,\r\n      portfolio: this.portfolio,\r\n      allocation,\r\n      codeList,\r\n      stockCodeList,\r\n      simulationArgs\r\n    };\r\n\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        intraMarket(context, Strategy.strategy3);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run4(backtestArgs) {\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const codeList = assetCodeList;\r\n    const stockCodeList = codeList.slice(0, 6);\r\n    const allocation = new PortfolioAllocation();\r\n    const context = {\r\n      backtest: this,\r\n      portfolio: this.portfolio,\r\n      allocation,\r\n      codeList,\r\n      stockCodeList,\r\n      simulationArgs: backtestArgs\r\n    };\r\n\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        intraMarket(context, Strategy.strategy4);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run5(backTestArgs) {\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const codeList = assetCodeList;\r\n    const stockCodeList = codeList.slice(0, 6);\r\n    const allocation = new PortfolioAllocation();\r\n    const context = {\r\n      backtest: this,\r\n      portfolio: this.portfolio,\r\n      allocation,\r\n      codeList,\r\n      stockCodeList,\r\n      simulationArgs: backTestArgs\r\n    };\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        intraMarket(context, Strategy.strategy5);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  // run6\r\n  // 모멘텀 점수 : 1,3,6개월 평균수익률\r\n  // 리밸런싱 날, 주식지수 6개중 모멘텀 점수가 높은 top개 지수를 100/top 씩 (동일비중)\r\n  run6(top = 2) {\r\n    // 모멘텀 점수 : 1,3,6개월 평균수익률\r\n    // 리밸런싱 날, 주식지수 6개중 모멘텀 점수가 높은 top개 지수를 100/top 씩 (동일비중)\r\n\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const codeList = assetCodeList;\r\n    const stockCodeList = codeList.slice(0, 6);\r\n    const allocation = new PortfolioAllocation();\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        allocation.reset();\r\n        const scoreList = [];\r\n\r\n        stockCodeList.forEach((code, index) => {\r\n          const momentumScore = Analyst.getMomentum2(code, this.date);\r\n          scoreList.push(momentumScore);\r\n        });\r\n\r\n        const scoreObjList = [];\r\n        stockCodeList.forEach((code, i) => {\r\n          scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n        });\r\n\r\n        // 모멘텀 점수 내림차순 정렬\r\n        scoreObjList.sort((a, b) => {\r\n          return b.momentumScore - a.momentumScore;\r\n        });\r\n\r\n        const topCodesList = scoreObjList.slice(0, top).map(d => d.code);\r\n        const equalWeight = 100 / top;\r\n\r\n        topCodesList.forEach(code => {\r\n          allocation.addWeight(code, equalWeight);\r\n        });\r\n\r\n        const newAllocation = allocation.getAllocation();\r\n        this.portfolio.executeAllocation(newAllocation);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  // run7\r\n  // 모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n  // 리밸런싱 날, 우선적으로 절대모멘텀 점수로 필터링\r\n  // 필터링된 주가지수 n개\r\n  // n 의 크기에 따라 주식:채권,달러 비중 결정 (채권은 하이일드)\r\n  // absScore 절대모멘텀 필터 점수\r\n  run7(momentumWindow = 60, absScore = 0) {\r\n    // 모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n    // 리밸런싱 날, 우선적으로 절대모멘텀 점수로 필터링\r\n    // 필터링된 주가지수 n개\r\n    // n 의 크기에 따라 주식:채권,달러 비중 결정 (채권은 하이일드)\r\n    // absScore 절대모멘텀 필터 점수\r\n\r\n    // 채권\r\n    const bondCode = \"182490\";\r\n    const dollarCode = \"138230\";\r\n\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const codeList = assetCodeList;\r\n    const stockCodeList = codeList.slice(0, 6);\r\n    const allocation = new PortfolioAllocation();\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        allocation.reset();\r\n        const scoreList = [];\r\n\r\n        stockCodeList.forEach((code, index) => {\r\n          const momentumScore = Analyst.getMomentum1(\r\n            code,\r\n            this.date,\r\n            momentumWindow\r\n          );\r\n          scoreList.push(momentumScore);\r\n        });\r\n\r\n        const scoreObjList = [];\r\n        stockCodeList.forEach((code, i) => {\r\n          scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n        });\r\n\r\n        // 절대모멘텀 충족 필터\r\n        const filterdCodeList = scoreObjList\r\n          .filter(d => d.momentumScore > absScore)\r\n          .map(d => d.code);\r\n\r\n        const numOfFilterdCode = filterdCodeList.length;\r\n\r\n        const weightOfOneDiv = Math.floor(100 / stockCodeList.length);\r\n\r\n        const weightOfStock = weightOfOneDiv * numOfFilterdCode;\r\n        const weightOfBond = (100 - weightOfStock) / 2;\r\n        const weightOfDollar = (100 - weightOfStock) / 2;\r\n\r\n        filterdCodeList.forEach(code => {\r\n          allocation.addWeight(code, weightOfOneDiv);\r\n        });\r\n        allocation.add(bondCode, weightOfBond);\r\n        allocation.add(dollarCode, weightOfDollar);\r\n\r\n        const newAllocation = allocation.getAllocation();\r\n        this.portfolio.executeAllocation(newAllocation);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  // run8\r\n  // 모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n  // 리밸런싱 날, 모멘텀 점수가 높은 top개 지수를 100/top 씩 (동일비중)\r\n  run8(top = 1, momentumWindow = 60) {\r\n    // top <= 15\r\n    // 모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n    // 리밸런싱 날, 모멘텀 점수가 높은 top개 지수를 100/top 씩 (동일비중)\r\n\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const codeList = assetCodeList;\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        const scoreList = [];\r\n\r\n        codeList.forEach((code, index) => {\r\n          const momentumScore = Analyst.getMomentum1(\r\n            code,\r\n            this.date,\r\n            momentumWindow\r\n          );\r\n          scoreList.push(momentumScore);\r\n        });\r\n\r\n        const scoreObjList = [];\r\n        codeList.forEach((code, i) => {\r\n          scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n        });\r\n\r\n        // 모멘텀 점수 내림차순 정렬\r\n        scoreObjList.sort((a, b) => {\r\n          return b.momentumScore - a.momentumScore;\r\n        });\r\n\r\n        const topCodesList = scoreObjList.slice(0, top).map(d => d.code);\r\n        const equalWeigth = 100 / top;\r\n\r\n        const newAllocation = [...codeList, \"cash\"].map(code => {\r\n          if (topCodesList.indexOf(code) !== -1) {\r\n            return {\r\n              code,\r\n              weight: equalWeigth\r\n            };\r\n          } else {\r\n            return {\r\n              code,\r\n              weight: 0\r\n            };\r\n          }\r\n        });\r\n\r\n        this.portfolio.executeAllocation(newAllocation);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run9(momentumWindow, selectedAsset) {\r\n    // 절대모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n    // 상승장일경우, 주식 100\r\n    // 하락장일경우, 현금 100\r\n\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const codeList = assetCodeList;\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        const momentumScore = Analyst.getMomentum1(\r\n          selectedAsset,\r\n          this.date,\r\n          momentumWindow\r\n        );\r\n\r\n        let stockWeight, cashWeight;\r\n        if (momentumScore > 0) {\r\n          stockWeight = 100;\r\n          cashWeight = 0;\r\n        } else {\r\n          stockWeight = 0;\r\n          cashWeight = 100;\r\n        }\r\n\r\n        const newAllocation = [...codeList, \"cash\"].map(code => {\r\n          if (code === selectedAsset) {\r\n            return {\r\n              code,\r\n              weight: stockWeight\r\n            };\r\n          } else if (code === \"cash\") {\r\n            return {\r\n              code,\r\n              weight: cashWeight\r\n            };\r\n          } else {\r\n            return {\r\n              code,\r\n              weight: 0\r\n            };\r\n          }\r\n        });\r\n\r\n        this.portfolio.executeAllocation(newAllocation);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run10(momentumWindow, top) {\r\n    // 절대모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n    // 세계주가지수를 절대모멘텀으로 두고\r\n    // 주가지수들의 상대모멘텀으로 자산 배분\r\n    // 상승장일경우, 주식 비중 높게\r\n    // 하락장일경우, 주식 비중 낮게\r\n\r\n    // GAPS 비중제한 적용하여\r\n\r\n    // top=1, 상위 1개가 코스피인 경우 : 코스피20 미국10\r\n    // top=1, 상위 1개가 코스닥인 경우 : 코스닥10 미국10\r\n    // top=1, 상위 1개가 해외인 경우 : 코스피10 해외20\r\n\r\n    // top=2, 상위 2개가 코스피,코스닥인 경우 : 코스피20 코스닥10 미국10\r\n    // top=2, 상위 2개가 코스피,해외인 경우 : 코스피20 해외20\r\n    // top=2, 상위 2개가 코스닥,해외인 경우 : 코스닥10 해외20\r\n    // top=2, 상위 2개가 둘다 해외인 경우 : 해외1 20 해외2 20\r\n\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const stockCodeList = [\r\n      \"069500\",\r\n      \"232080\",\r\n      \"143850\",\r\n      \"195930\",\r\n      \"238720\",\r\n      \"192090\"\r\n    ];\r\n\r\n    const allocation = new PortfolioAllocation();\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        allocation.reset();\r\n\r\n        const marketState = Analyst.getMomentum1(\r\n          \"WORLD_STOCK\",\r\n          this.date,\r\n          momentumWindow\r\n        );\r\n\r\n        if (marketState > 0) {\r\n          // 상승장\r\n          const scoreList = [];\r\n          stockCodeList.forEach((code, index) => {\r\n            const momentumScore = Analyst.getMomentum1(\r\n              code,\r\n              this.date,\r\n              momentumWindow\r\n            );\r\n            scoreList.push(momentumScore);\r\n          });\r\n\r\n          const scoreObjList = [];\r\n          stockCodeList.forEach((code, i) => {\r\n            scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n          });\r\n\r\n          // 모멘텀 점수 내림차순 정렬\r\n          scoreObjList.sort((a, b) => {\r\n            return b.momentumScore - a.momentumScore;\r\n          });\r\n\r\n          const topCodesList = scoreObjList.slice(0, top).map(d => d.code);\r\n\r\n          if (top == 1) {\r\n            const code = topCodesList[0];\r\n            if (code === \"069500\") {\r\n              // 코스피\r\n              // 코스피40 미국10\r\n              allocation.addWeight(\"069500\", 20);\r\n              allocation.addWeight(\"143850\", 10);\r\n            } else if (code === \"232080\") {\r\n              // 코스닥\r\n              // 코스닥20 미국10\r\n              allocation.addWeight(\"232080\", 10);\r\n              allocation.addWeight(\"143850\", 10);\r\n            } else {\r\n              // 해외\r\n              // 코스피10 해외20\r\n              allocation.addWeight(\"069500\", 10);\r\n              allocation.addWeight(code, 20);\r\n            }\r\n          } else if (top == 2) {\r\n            const code1 = topCodesList[0];\r\n            const code2 = topCodesList[1];\r\n\r\n            const condition1 = code1 === \"069500\" || code2 === \"069500\";\r\n            const condition2 = code1 === \"232080\" || code2 === \"232080\";\r\n\r\n            if (condition1 && condition2) {\r\n              // 코스피 & 코스닥\r\n              // 코스피20 코스닥20\r\n              // 미국10\r\n              allocation.addWeight(\"069500\", 20);\r\n              allocation.addWeight(\"232080\", 10);\r\n              allocation.addWeight(\"143850\", 10);\r\n            } else if (condition1 || condition2) {\r\n              if (condition1) {\r\n                // 코스피40\r\n                allocation.addWeight(\"069500\", 20);\r\n              } else {\r\n                // 코스닥20\r\n                allocation.addWeight(\"232080\", 10);\r\n              }\r\n              // 미국10\r\n              allocation.addWeight(\"143850\", 10);\r\n            } else {\r\n              //  해외1 20 해외2 20\r\n              allocation.addWeight(code1, 20);\r\n              allocation.addWeight(code2, 20);\r\n            }\r\n          } else {\r\n            console.log(top);\r\n            throw \"invalid top arg\";\r\n          }\r\n          allocation.addWeight(\"132030\", 5); // 골드 최소비중\r\n\r\n          // 남은 비중 중기회사채, 하이일드 배분\r\n          const safetyAssets = [\"136340\", \"182490\"];\r\n          const equalWeight =\r\n            allocation.getRemainsWeight() / safetyAssets.length;\r\n\r\n          safetyAssets.forEach(code => {\r\n            allocation.addWeight(code, equalWeight);\r\n          });\r\n        } else {\r\n          // 하락장\r\n\r\n          // 코스피10 미국10\r\n          allocation.addWeight(\"069500\", 10);\r\n          allocation.addWeight(\"143850\", 10);\r\n\r\n          // 남은 비중 채권, 인버스, 달러 배분\r\n\r\n          // KOSEF국고채10년                15\r\n          // KBSTAR중기우량회사채           35\r\n          // TIGER단기선진하이일드(합성H)      10\r\n          const bonds = [\"148070\", \"136340\", \"182490\"];\r\n          // const bondsWeights = [15, 35, 10];\r\n          const bondsWeights = [20, 20, 20];\r\n\r\n          bonds.forEach((code, index) => {\r\n            allocation.addWeight(code, bondsWeights[index]);\r\n          });\r\n\r\n          const safetyAssets = [\r\n            \"114800\", // KODEX인버스\r\n            \"138230\" // KOSEF미국달러선물\r\n          ];\r\n\r\n          const equalWeight =\r\n            allocation.getRemainsWeight() / safetyAssets.length;\r\n\r\n          safetyAssets.forEach(code => {\r\n            allocation.addWeight(code, equalWeight);\r\n          });\r\n        }\r\n\r\n        allocation.allocateRemainsWeightToCash();\r\n        const newAllocation = allocation.getAllocation();\r\n\r\n        this.portfolio.executeAllocation(newAllocation);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run11(top = 1, momentumWindow = 60) {\r\n    // 모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n    // 상대모멘텀으로 정렬후 절대모멘텀 충족시 매수\r\n    // 상위 top개\r\n\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const allocation = new PortfolioAllocation();\r\n    const codeList = assetCodeList;\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        allocation.reset();\r\n        const scoreObjList = [];\r\n        codeList.forEach((code, index) => {\r\n          const momentumScore = Analyst.getMomentum1(\r\n            code,\r\n            this.date,\r\n            momentumWindow\r\n          );\r\n          scoreObjList.push({ code, momentumScore });\r\n        });\r\n\r\n        // 모멘텀 점수 내림차순 정렬\r\n        scoreObjList.sort((a, b) => {\r\n          return b.momentumScore - a.momentumScore;\r\n        });\r\n\r\n        const filterdCodeList = scoreObjList\r\n          .filter(asset => asset.momentumScore > 0)\r\n          .map(asset => asset.code)\r\n          .slice(0, top);\r\n\r\n        const equalWeight = 30;\r\n        filterdCodeList.forEach(code => {\r\n          allocation.addWeight(code, equalWeight);\r\n        });\r\n        allocation.allocateRemainsWeightToCash();\r\n\r\n        const newAllocation = allocation.getAllocation();\r\n        this.portfolio.executeAllocation(newAllocation);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run12(momentumWindow, top) {\r\n    // 절대모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n    // 세계주가지수를 절대모멘텀으로 두고\r\n    // 주가지수들의 상대모멘텀으로 자산 배분\r\n    // 상승장일경우, 주식 60\r\n    // 하락장일경우, 주식 20\r\n\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const stockCodeList = [\r\n      \"069500\",\r\n      \"232080\",\r\n      \"143850\",\r\n      \"195930\",\r\n      \"238720\",\r\n      \"192090\"\r\n    ];\r\n\r\n    const allocation = new PortfolioAllocation();\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        allocation.reset();\r\n\r\n        // 코스피10 미국10 하이일드10 골드5\r\n        allocation.addWeight(\"069500\", 10);\r\n        allocation.addWeight(\"143850\", 10);\r\n        allocation.addWeight(\"182490\", 5);\r\n        allocation.addWeight(\"132030\", 5);\r\n\r\n        const marketState = Analyst.getMomentum1(\r\n          \"WORLD_STOCK\",\r\n          this.date,\r\n          momentumWindow\r\n        );\r\n\r\n        if (marketState > 0) {\r\n          // 상승장\r\n          const scoreList = [];\r\n          stockCodeList.forEach((code, index) => {\r\n            const momentumScore = Analyst.getMomentum1(\r\n              code,\r\n              this.date,\r\n              momentumWindow\r\n            );\r\n            scoreList.push(momentumScore);\r\n          });\r\n\r\n          const scoreObjList = [];\r\n          stockCodeList.forEach((code, i) => {\r\n            scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n          });\r\n\r\n          // 모멘텀 점수 내림차순 정렬\r\n          scoreObjList.sort((a, b) => {\r\n            return b.momentumScore - a.momentumScore;\r\n          });\r\n\r\n          const topCodesList = scoreObjList.slice(0, top).map(d => d.code);\r\n\r\n          topCodesList.forEach(code => {\r\n            allocation.addWeight(code, 20);\r\n          });\r\n\r\n          // 남은 비중 중기회사채, 하이일드 배분\r\n          const safetyAssets = [\"136340\", \"182490\"];\r\n          const equalWeight =\r\n            allocation.getRemainsWeight() / safetyAssets.length;\r\n          safetyAssets.forEach(code => {\r\n            allocation.addWeight(code, equalWeight);\r\n          });\r\n        } else {\r\n          // 하락장\r\n          // 남은 비중 채권, 인버스, 달러 배분\r\n\r\n          const safetyAssets = [\r\n            \"148070\", // KOSEF국고채10년\r\n            \"136340\", // KBSTAR중기우량회사채\r\n            \"182490\", // TIGER단기선진하이일드(합성H)\r\n            \"114800\", // KODEX인버스\r\n            \"138230\" // KOSEF미국달러선물\r\n          ];\r\n          const equalWeight =\r\n            allocation.getRemainsWeight() / safetyAssets.length;\r\n          safetyAssets.forEach(code => {\r\n            allocation.addWeight(code, equalWeight);\r\n          });\r\n        }\r\n        allocation.allocateRemainsWeightToCash();\r\n\r\n        const newAllocation = allocation.getAllocation();\r\n        this.portfolio.executeAllocation(newAllocation);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run13(momentumWindow, top, stockWeight, asset) {\r\n    // 절대모멘텀 점수 : 최근 momentumWindow 거래일 수익률\r\n    // 세계주가지수를 절대모멘텀으로 두고\r\n    // 주가지수들의 상대모멘텀으로 자산 배분\r\n    // 상승장일경우, 주식 100\r\n    // 하락장일경우, 주식 0\r\n\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    stockWeight = Number(stockWeight);\r\n\r\n    const stockCodeList = [\r\n      \"069500\",\r\n      \"232080\",\r\n      \"143850\",\r\n      \"195930\",\r\n      \"238720\",\r\n      \"192090\"\r\n    ];\r\n\r\n    const allocation = new PortfolioAllocation();\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        allocation.reset();\r\n\r\n        const marketState = Analyst.getMomentum1(\r\n          \"WORLD_STOCK\",\r\n          this.date,\r\n          momentumWindow\r\n        );\r\n\r\n        if (marketState > 0) {\r\n          // 상승장\r\n          const scoreList = [];\r\n          stockCodeList.forEach((code, index) => {\r\n            const momentumScore = Analyst.getMomentum1(\r\n              code,\r\n              this.date,\r\n              momentumWindow\r\n            );\r\n            scoreList.push(momentumScore);\r\n          });\r\n\r\n          const scoreObjList = [];\r\n          stockCodeList.forEach((code, i) => {\r\n            scoreObjList.push({ code, momentumScore: scoreList[i] });\r\n          });\r\n\r\n          // 모멘텀 점수 내림차순 정렬\r\n          scoreObjList.sort((a, b) => {\r\n            return b.momentumScore - a.momentumScore;\r\n          });\r\n\r\n          const topCodesList = scoreObjList.slice(0, top).map(d => d.code);\r\n          const weightOfOneDiv = stockWeight / topCodesList.length;\r\n\r\n          topCodesList.forEach(code => {\r\n            allocation.addWeight(code, weightOfOneDiv);\r\n          });\r\n          // // 남은 비중 채권배분\r\n          // const safetyAssets = [\r\n          //   \"148070\", // KOSEF국고채10년\r\n          //   \"136340\", // KBSTAR중기우량회사채\r\n          //   \"182490\" // TIGER단기선진하이일드(합성H)\r\n          // ];\r\n          // const equalWeight =\r\n          //   allocation.getRemainsWeight() / safetyAssets.length;\r\n          // safetyAssets.forEach(code => {\r\n          //   allocation.addWeight(code, equalWeight);\r\n          // });\r\n          allocation.addWeight(asset, allocation.getRemainsWeight());\r\n        } else {\r\n          //   하락장\r\n          //   custom 비중으로 배분\r\n          //   // 남은 비중 채권, 인버스, 달러 배분\r\n          //   const safetyAssets = [\r\n          //     \"148070\", // KOSEF국고채10년\r\n          //     \"136340\", // KBSTAR중기우량회사채\r\n          //     \"182490\", // TIGER단기선진하이일드(합성H)\r\n          //     \"114800\", // KODEX인버스\r\n          //     \"138230\" // KOSEF미국달러선물\r\n          //   ];\r\n          //   const equalWeight =\r\n          //     allocation.getRemainsWeight() / safetyAssets.length;\r\n          //   safetyAssets.forEach(code => {\r\n          //     allocation.addWeight(code, equalWeight);\r\n          //   });\r\n          // this.fixedAlloc.forEach(asset => {\r\n          //   allocation.addWeight(asset.code, asset.weight);\r\n          // });\r\n          allocation.addWeight(asset, allocation.getRemainsWeight());\r\n        }\r\n        allocation.allocateRemainsWeightToCash();\r\n        const newAllocation = allocation.getAllocation();\r\n        this.portfolio.executeAllocation(newAllocation);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run14(backtestArgs) {\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const stockCodeList = [\r\n      \"069500\",\r\n      \"232080\",\r\n      \"143850\",\r\n      \"195930\",\r\n      \"238720\",\r\n      \"192090\"\r\n    ];\r\n\r\n    const allocation = new PortfolioAllocation();\r\n\r\n    const context = {\r\n      stockCodeList,\r\n      allocation,\r\n      simulationArgs: backtestArgs,\r\n      backtest: this,\r\n      portfolio: this.portfolio\r\n    };\r\n\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        intraMarket(context, Strategy.strategy14);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n\t  \r\n\t  \r\n\tconsole.log(\"end date : \", context.backtest.date)\r\n\tconsole.log(\"next position : \", Strategy.positionOfStrategy14(context, context.backtest.date));\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  run15(momentumWindow, top) {\r\n    // FAA 전략 모멘텀 + 변동성 + 상관성\r\n\r\n    // 첫 거래일, 초기 비중 설정을 위해\r\n    this.rebalanceDateList.push(this.date);\r\n\r\n    const assetCodeList = [\r\n      \"069500\", // KODEX200\r\n      \"232080\", // TIGER코스닥150\r\n      \"143850\", // TIGER미국S&P500선물(H)\r\n      \"195930\", // TIGER유로스탁스50(합성H)\r\n      \"238720\", // KINDEX일본Nikkei225(H)\r\n      \"192090\", // TIGER차이나CSI300\r\n      \"148070\", // KOSEF국고채10년\r\n      \"136340\", // KBSTAR중기우량회사채\r\n      \"182490\" // TIGER단기선진하이일드(합성\r\n      // \"132030\", // KODEX골드선물(H)\r\n      // \"130680\", // TIGER원유선물Enhanced(H)\r\n      // \"138230\" // KOSEF미국달러선물\r\n      // \"130730\", // KOSEF단기자금\r\n      // \"114800\", // KODEX인버스\r\n      // \"139660\" // KOSEF미국달러선물인버스\r\n    ];\r\n\r\n    const allocation = new PortfolioAllocation();\r\n    while (true) {\r\n      if (this.shouldTrade()) {\r\n        allocation.reset();\r\n\r\n        const momentumScores = assetCodeList.map(code =>\r\n          Analyst.getMomentum1(code, this.date, momentumWindow)\r\n        );\r\n        const volatilityScore = assetCodeList.map(code =>\r\n          Analyst.getStd(code, this.date, momentumWindow)\r\n        );\r\n        const corScoreList = Analyst.getCorScore(\r\n          assetCodeList,\r\n          this.date,\r\n          momentumWindow\r\n        );\r\n\r\n        const momentumRank = toRank(momentumScores, true); // 내림차순\r\n        const volatilityRank = toRank(volatilityScore, false); // 오름차순\r\n        const corScoreRank = toRank(corScoreList, false); // 오름차순\r\n\r\n        const totalScore = [];\r\n        for (let i = 0; i < assetCodeList.length; i++) {\r\n          const tempScore =\r\n            momentumRank[i] + volatilityRank[i] * 2 + corScoreRank[i] * 2;\r\n          totalScore.push(tempScore);\r\n        }\r\n        const totalScoreRank = toRank(corScoreRank, false);\r\n\r\n        const scoreObjList = assetCodeList.map((code, i) => {\r\n          return { code, rank: totalScoreRank[i] };\r\n        });\r\n        scoreObjList.sort((a, b) => {\r\n          return a.rank - b.rank; // 모멘텀 점수 오름차순 정렬\r\n        });\r\n        const topCodesList = scoreObjList.slice(0, top).map(d => d.code);\r\n\r\n        const div = 25;\r\n        // 최근 수익률이 0 이상이면 매수\r\n        topCodesList.forEach(code => {\r\n          const momentum = Analyst.getMomentum1(\r\n            code,\r\n            this.date,\r\n            momentumWindow\r\n          );\r\n          if (momentum > 0) {\r\n            allocation.addWeight(code, div);\r\n          }\r\n        });\r\n\r\n        allocation.allocateRemainsWeightToCash();\r\n        const newAllocation = allocation.getAllocation();\r\n\r\n        this.portfolio.executeAllocation(newAllocation);\r\n      }\r\n      this.afterMarket();\r\n\r\n      if (this.date === this.endDate) break;\r\n      this.forwardDate();\r\n    }\r\n    this.orderLog = this.portfolio.log;\r\n  }\r\n\r\n  createMetaData() {\r\n    this.returnList = this.navList.map((price, index) => {\r\n      if (index === 0) {\r\n        return NaN;\r\n      }\r\n\r\n      const prevPrice = this.navList[index - 1];\r\n      const pctChange = ((price - prevPrice) / prevPrice) * 100;\r\n      return pctChange;\r\n    });\r\n\r\n    this.cumReturnList = this.navList.map((price, index) => {\r\n      if (index === 0) {\r\n        return 0;\r\n      }\r\n\r\n      const prevPrice = this.navList[0];\r\n      const pctChange = ((price - prevPrice) / prevPrice) * 100;\r\n      return pctChange;\r\n    });\r\n  }\r\n}\r\n\r\nclass BackTestArgsHandler {\r\n  constructor() {\r\n    this.argsObject = {\r\n      startDate: \"20170216\",\r\n      endDate: \"20181207\",\r\n      rebalanceDateList: [],\r\n      allocation: [\r\n        { code: \"069500\", weight: 30 },\r\n        { code: \"232080\", weight: 0 },\r\n\r\n        { code: \"143850\", weight: 20 },\r\n        { code: \"195930\", weight: 0 },\r\n        { code: \"238720\", weight: 0 },\r\n        { code: \"192090\", weight: 0 },\r\n\r\n        { code: \"148070\", weight: 20 },\r\n        { code: \"136340\", weight: 15 },\r\n        { code: \"182490\", weight: 5 },\r\n\r\n        { code: \"132030\", weight: 5 },\r\n        { code: \"130680\", weight: 0 },\r\n\r\n        { code: \"114800\", weight: 0 },\r\n\r\n        { code: \"138230\", weight: 0 },\r\n        { code: \"139660\", weight: 0 },\r\n\r\n        { code: \"130730\", weight: 4 },\r\n        { code: \"WORLD_STOCK\", weight: 0 },\r\n        { code: \"cash\", weight: 1 }\r\n      ]\r\n    };\r\n  }\r\n\r\n  setDateRange(startDate, endDate) {\r\n    this.argsObject.startDate = startDate;\r\n    this.argsObject.endDate = endDate;\r\n  }\r\n\r\n  setRebalanceDateList(dateList) {\r\n    this.argsObject.rebalanceDateList = dateList;\r\n  }\r\n\r\n  getArgs() {\r\n    return this.argsObject;\r\n  }\r\n\r\n  replaceAllocation(newAllocation) {\r\n    this.argsObject.allocation = this.argsObject.allocation.map(\r\n      (data, index) => {\r\n        return {\r\n          code: data.code,\r\n          weight: newAllocation[index]\r\n        };\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nconst DEFAULT_ALLOCATION = {\r\n  \"069500\": 0, // KODEX200\r\n  \"232080\": 0, // TIGER코스닥150\r\n  \"143850\": 0, // TIGER미국S&P500선물(H)\r\n  \"195930\": 0, // TIGER유로스탁스50(합성H)\r\n  \"238720\": 0, // KINDEX일본Nikkei225(H)\r\n  \"192090\": 0, // TIGER차이나CSI300\r\n  \"148070\": 0, // KOSEF국고채10년\r\n  \"136340\": 0, // KBSTAR중기우량회사채\r\n  \"182490\": 0, // TIGER단기선진하이일드(합성\r\n  \"132030\": 0, // KODEX골드선물(H)\r\n  \"130680\": 0, // TIGER원유선물Enhanced(H)\r\n  \"114800\": 0, // KODEX인버스\r\n  \"138230\": 0, // KOSEF미국달러선물\r\n  \"139660\": 0, // KOSEF미국달러선물인버스\r\n  \"130730\": 0, // KOSEF단기자금\r\n  WORLD_STOCK: 0, // 세계종합주가지수\r\n  cash: 0 // 현금\r\n};\r\n\r\nclass PortfolioAllocation {\r\n  constructor() {\r\n    this.allocation = { ...DEFAULT_ALLOCATION };\r\n  }\r\n\r\n  addWeight = (code, weight) => {\r\n    if (this.remainWeight < weight) {\r\n      throw \"not enough remainWeight \";\r\n    }\r\n    this.allocation[code] += weight;\r\n  };\r\n\r\n  getWeight = code => {\r\n    return this.allocation[code];\r\n  };\r\n\r\n  reset = () => {\r\n    this.allocation = { ...DEFAULT_ALLOCATION };\r\n  };\r\n\r\n  getRemainsWeight = () => {\r\n    const keys = Object.keys(this.allocation);\r\n    let totalWeight = 0;\r\n    keys.forEach(key => {\r\n      totalWeight += this.allocation[key];\r\n    });\r\n    return 100 - totalWeight;\r\n  };\r\n\r\n  allocateRemainsWeightToCash = () => {\r\n    const remainsWeight = this.getRemainsWeight();\r\n    this.addWeight(\"cash\", remainsWeight);\r\n  };\r\n\r\n  getAllocation = () => {\r\n    if (this.getRemainsWeight() !== 0) {\r\n      console.log(this.getRemainsWeight());\r\n      throw \"remainsWeight !== 0\";\r\n    }\r\n\r\n    const keys = Object.keys(this.allocation);\r\n    return keys.map(key => {\r\n      return {\r\n        code: key,\r\n        weight: this.allocation[key]\r\n      };\r\n    });\r\n  };\r\n}\r\n\r\nconst summaryTable = (codeList, startDate, endDate) => {\r\n  const market = new Market(startDate);\r\n  const results = [];\r\n  codeList.forEach(code => {\r\n    let result = {};\r\n\r\n    result.code = code;\r\n\r\n    market.setDate(startDate);\r\n    const basePrice = market.getPrice(code);\r\n    market.setDate(endDate);\r\n    const finalPrice = market.getPrice(code);\r\n    const HPR = (finalPrice - basePrice) / basePrice;\r\n    result.returns = HPR;\r\n\r\n    const returnsList = market\r\n      .getReturnsListInRange(code, startDate, endDate)\r\n      .map(returns => returns / 100);\r\n    returnsList.shift();\r\n\r\n    const period = returnsList.length;\r\n    result.annualizedReturns = getAnnualizedReturns(HPR, period);\r\n\r\n    const std = math.std(returnsList);\r\n    result.std = std;\r\n    result.annualizedStd = getAnnualizedStd(std);\r\n\r\n    results.push(result);\r\n  });\r\n  return results;\r\n};\r\n\r\nconst a = { one: 1, two: 2 };\r\nconsole.log(a);\r\n\r\nconst test = arg => {\r\n  arg.one = 2;\r\n};\r\ntest(a);\r\nconsole.log(a);\r\n\r\nexport { BackTest, BackTestArgsHandler, summaryTable };\r\n","import React, { Component } from \"react\";\r\nimport { Scatter } from \"react-chartjs-2\";\r\n\r\nclass AssetAllocationChart extends Component {\r\n  render() {\r\n    const allocations = this.props.fixedAllocation;\r\n    const fixedAllocationData = allocations.map(alloc => {\r\n      return {\r\n        x: alloc.annualizedStd,\r\n        y: alloc.annualizedReturns,\r\n        code: alloc.code\r\n      };\r\n    });\r\n\r\n    const points = this.props.data;\r\n    const labels = points.map(point => point.labels.map(lab => parseInt(lab)));\r\n\r\n    const data = {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          label: \"Fixed Allocation\",\r\n          data: fixedAllocationData,\r\n          backgroundColor: \"rgb(0, 99, 132)\"\r\n        },\r\n\r\n        {\r\n          label: \"Random Allocation\",\r\n          data: points,\r\n          backgroundColor: \"rgb(255, 99, 132)\"\r\n        }\r\n      ]\r\n    };\r\n    const options = {\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            type: \"linear\",\r\n            position: \"bottom\",\r\n            ticks: {\r\n              min: 0\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              min: -0.2\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      tooltips: {\r\n        callbacks: {\r\n          label: (tooltipItem, data) => {\r\n            const { index, datasetIndex } = tooltipItem;\r\n            let label = null;\r\n            if (datasetIndex === 0) {\r\n              label = data.datasets[0].data[index].code;\r\n            } else {\r\n              label = data.labels[tooltipItem.index];\r\n            }\r\n\r\n            return (\r\n              label +\r\n              \" : (\" +\r\n              tooltipItem.xLabel +\r\n              \", \" +\r\n              tooltipItem.yLabel +\r\n              \")\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Scatter\r\n        data={data}\r\n        options={options}\r\n        width={300}\r\n        height={150}\r\n        getElementAtEvent={this.handleGetElementAtEvent}\r\n      />\r\n    );\r\n  }\r\n\r\n  handleGetElementAtEvent = elem => {\r\n    const activePoints = elem;\r\n    const { client } = this.props;\r\n\r\n    if (activePoints[0]) {\r\n      const { _datasetIndex, _index, _chart } = activePoints[0];\r\n      const point = _chart.data.datasets[_datasetIndex].data[_index];\r\n\r\n      if (point !== null && point.labels !== undefined) {\r\n        client.writeData({\r\n          data: {\r\n            globalVariables: {\r\n              __typename: \"GlobalVariables\",\r\n              selectedAllocation: point.labels\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default AssetAllocationChart;\r\n","import { Table } from \"antd\";\r\nimport React from \"react\";\r\nimport * as math from \"mathjs\";\r\nimport { getAssetName } from \"utils/data\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Code\",\r\n    dataIndex: \"code\",\r\n    key: \"code\"\r\n  },\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\"\r\n  },\r\n  {\r\n    title: \"Returns(%)\",\r\n    dataIndex: \"returns\",\r\n    key: \"returns\"\r\n  },\r\n  {\r\n    title: \"Std(%)\",\r\n    dataIndex: \"std\",\r\n    key: \"std\"\r\n  },\r\n  {\r\n    title: \"AnnualizedReturns(%)\",\r\n    dataIndex: \"annualizedReturns\",\r\n    key: \"annualizedReturns\"\r\n  },\r\n  {\r\n    title: \"AnnualizedStd(%)\",\r\n    dataIndex: \"annualizedStd\",\r\n    key: \"annualizedStd\"\r\n  }\r\n];\r\n\r\nconst ResultTable = props => {\r\n  const floatingPoint = 2;\r\n  const dataSource = props.data.map((data, index) => {\r\n    let { code, returns, std, annualizedReturns, annualizedStd } = data;\r\n    returns = math.round(returns, 4);\r\n    std = math.round(std, 4);\r\n    annualizedReturns = math.round(annualizedReturns, 4);\r\n    annualizedStd = math.round(annualizedStd, 4);\r\n\r\n    return {\r\n      key: index,\r\n      code,\r\n      name: getAssetName(code),\r\n      returns: (returns * 100).toFixed(floatingPoint) + \" %\",\r\n      std: (std * 100).toFixed(floatingPoint) + \" %\",\r\n      annualizedReturns:\r\n        (annualizedReturns * 100).toFixed(floatingPoint) + \" %\",\r\n      annualizedStd: (annualizedStd * 100).toFixed(floatingPoint) + \" %\"\r\n    };\r\n  });\r\n\r\n  return <Table dataSource={dataSource} columns={columns} size=\"small\" />;\r\n};\r\n\r\nexport default ResultTable;\r\n","import React from \"react\";\r\nimport { Market } from \"../market\";\r\nimport * as math from \"mathjs\";\r\nimport * as $ from \"jquery\";\r\nimport Chart from \"chart.js\";\r\nimport { dynamicColors } from \"../utils/chartUtil\";\r\nimport { getCumPctChange } from \"../utils/utils\";\r\nimport { BackTest, BackTestArgsHandler } from \"utils/simulation\";\r\n\r\nconst market = new Market(\"20161207\");\r\n\r\nclass ReturnsChart extends React.Component {\r\n  render() {\r\n    this._run();\r\n    return (\r\n      <div className=\"chart__container\">\r\n        <canvas id=\"cursor\" width=\"800\" height=\"450\" />\r\n        <canvas id=\"line-chart\" width=\"800\" height=\"450\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.chartUpdate();\r\n  }\r\n\r\n  chartUpdate() {\r\n    const { startDate, endDate } = this.props.data.globalVariables;\r\n\r\n    const priceData = market.getCumPctChangeInRange(\r\n      \"232080\",\r\n      startDate,\r\n      endDate\r\n    );\r\n    const labels = priceData.dateList;\r\n\r\n    const cumPctChange = this._run();\r\n\r\n    const color = dynamicColors();\r\n    const data = {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          backgroundColor: color,\r\n          borderColor: color,\r\n          data: cumPctChange,\r\n          fill: false\r\n        }\r\n      ]\r\n    };\r\n\r\n    this.chart.data = data;\r\n    this.chart.update();\r\n  }\r\n\r\n  _run() {\r\n    const {\r\n      startDate,\r\n      endDate,\r\n      selectedAllocation\r\n    } = this.props.data.globalVariables;\r\n\r\n    if (selectedAllocation == false) {\r\n      return;\r\n    }\r\n\r\n    const backTestArgsHandler = new BackTestArgsHandler();\r\n    backTestArgsHandler.replaceAllocation(selectedAllocation);\r\n    backTestArgsHandler.setDateRange(startDate, endDate);\r\n\r\n    const testArgs = backTestArgsHandler.getArgs();\r\n    const backTest = new BackTest();\r\n    backTest.init(testArgs);\r\n    backTest.run();\r\n    backTest.createMetaData();\r\n    const result = backTest.result();\r\n\r\n    return getCumPctChange(result.navList);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { startDate, endDate, codeList } = this.props.data.globalVariables;\r\n\r\n    const dataList = [];\r\n\r\n    for (let i = 0; i < codeList.length; i++) {\r\n      let price_data = market.getCumPctChangeInRange(\r\n        codeList[i],\r\n        startDate,\r\n        endDate\r\n      );\r\n      let dataset = {};\r\n      dataset.data = price_data;\r\n      dataset.label = codeList[i];\r\n      dataList.push(dataset);\r\n    }\r\n\r\n    const priceData = market.getCumPctChangeInRange(\r\n      \"232080\",\r\n      startDate,\r\n      endDate\r\n    );\r\n    const labels = priceData.dateList;\r\n\r\n    this._create_chart(dataList, labels);\r\n  }\r\n\r\n  _create_chart() {\r\n    const cumPctChange = this._run();\r\n\r\n    const { startDate, endDate } = this.props.data.globalVariables;\r\n    const priceData = market.getCumPctChangeInRange(\r\n      \"232080\",\r\n      startDate,\r\n      endDate\r\n    );\r\n    const labels = priceData.dateList;\r\n\r\n    const color = dynamicColors();\r\n    const data = {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          // label: data.label,\r\n          backgroundColor: color,\r\n          borderColor: color,\r\n          data: cumPctChange,\r\n          fill: false\r\n        }\r\n      ]\r\n    };\r\n\r\n    const config = {\r\n      type: \"line\",\r\n      data: data,\r\n      options: {\r\n        animation: {\r\n          duration: false\r\n        },\r\n        responsive: true,\r\n        title: {\r\n          display: true,\r\n          text: \"Portfolio Returns\"\r\n        },\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false\r\n        },\r\n        hover: {\r\n          mode: \"nearest\",\r\n          intersect: true\r\n        },\r\n        onHover: event => {\r\n          const element = $(\"#cursor\");\r\n          const offsetLeft = element.offset().left;\r\n          const domElement = element.get(0);\r\n          const clientX = parseInt(event.clientX - offsetLeft);\r\n          const ctx = element.get(0).getContext(\"2d\");\r\n          ctx.clearRect(0, 0, domElement.width, domElement.height);\r\n          ctx.beginPath();\r\n          ctx.moveTo(clientX, 0);\r\n          ctx.lineTo(clientX, domElement.height);\r\n          ctx.setLineDash([10, 10]);\r\n          ctx.strokeStyle = \"#333\";\r\n          ctx.stroke();\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Date\"\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Return(%)\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    };\r\n\r\n    this.chart = new Chart(document.getElementById(\"line-chart\"), config);\r\n  }\r\n}\r\n\r\nexport default ReturnsChart;\r\n","import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { assetNameList } from \"utils/data\";\r\nimport { schemePaired } from \"d3-scale-chromatic\";\r\n\r\nassetNameList.push(\"현금\");\r\n\r\nclass DoughnutChart extends React.Component {\r\n  render() {\r\n    const { selectedAllocation } = this.props.data.globalVariables;\r\n\r\n    const data = {\r\n      labels: assetNameList,\r\n      datasets: [\r\n        {\r\n          data: selectedAllocation,\r\n          backgroundColor: schemePaired,\r\n          hoverBackgroundColor: schemePaired\r\n        }\r\n      ]\r\n    };\r\n\r\n    const options = {\r\n      animation: {\r\n        animateScale: true\r\n      },\r\n      legend: {\r\n        position: \"left\"\r\n      }\r\n    };\r\n\r\n    return <Doughnut data={data} options={options} width={600} height={250} />;\r\n  }\r\n}\r\n\r\nexport default DoughnutChart;\r\n","import React from \"react\";\r\nimport AssetAllocationChart from \"./AssetAllocationChart\";\r\nimport MarketCalendar from \"components/MarketCalendar\";\r\nimport SelectInput from \"components/SelectInput\";\r\nimport ResultTable from \"./ResultTable\";\r\nimport ReturnsChart from \"components/ReturnsChart\";\r\nimport DoughnutChart from \"components/DoughnutChart\";\r\nimport { Button } from \"antd\";\r\nimport WeightsInputTable2 from \"components/WeightsInputTable2\";\r\n\r\nconst AssetAllocationPresenter = props => {\r\n  const {\r\n    data,\r\n    client,\r\n    table,\r\n    handleOnClick,\r\n    handlePlayClick,\r\n    handleResetClick,\r\n    stopSimulation,\r\n    stateData\r\n  } = props;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"asset-allocation-page\">\r\n        <SelectInput data={data} client={client} />\r\n        {table ? <ResultTable data={table} /> : null}\r\n        {/* <WeightsInputTable2 data={data} client={client} /> */}\r\n        <Button type=\"primary\" onClick={e => handleOnClick(e, data)}>\r\n          Run\r\n        </Button>\r\n        <Button onClick={e => handlePlayClick(e, data)}>Play</Button>\r\n        <Button onClick={stopSimulation}>Stop</Button>\r\n        <Button type=\"danger\" onClick={handleResetClick}>\r\n          Reset\r\n        </Button>\r\n        <AssetAllocationChart\r\n          data={stateData}\r\n          fixedAllocation={table}\r\n          client={client}\r\n        />\r\n        <ReturnsChart data={data} />\r\n        <DoughnutChart data={data} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssetAllocationPresenter;\r\n","import { Table } from \"antd\";\r\nimport React from \"react\";\r\nimport { InputNumber } from \"antd\";\r\nimport { getAssetName } from \"utils/data\";\r\n\r\nclass WeightsInputTable2 extends React.Component {\r\n  render() {\r\n    const { codeList } = this.props.data.globalVariables;\r\n    const dataSource = this.createDataSource(codeList);\r\n    const columns = [\r\n      {\r\n        title: \"Code\",\r\n        dataIndex: \"code\",\r\n        key: \"code\"\r\n      },\r\n      {\r\n        title: \"Name\",\r\n        dataIndex: \"name\",\r\n        key: \"name\"\r\n      },\r\n      {\r\n        title: \"Weight\",\r\n        dataIndex: \"weight\",\r\n        key: \"weight\"\r\n      },\r\n      {\r\n        title: \"MinWeight\",\r\n        dataIndex: \"minWeight\",\r\n        key: \"minWeight\"\r\n      },\r\n      {\r\n        title: \"MaxWeight\",\r\n        dataIndex: \"maxWeight\",\r\n        key: \"maxWeight\"\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        size=\"small\"\r\n        bordered={true}\r\n      />\r\n    );\r\n  }\r\n\r\n  createDataSource = codeList => {\r\n    const dataSource = codeList.map((code, index) => {\r\n      return {\r\n        key: index,\r\n        code,\r\n        name: getAssetName(code)\r\n      };\r\n    });\r\n\r\n    dataSource.forEach((data, index) => {\r\n      [\r\n        { col: \"weight\", defaultValue: null },\r\n        { col: \"minWeight\", defaultValue: 0 },\r\n        { col: \"maxWeight\", defaultValue: 100 }\r\n      ].forEach(\r\n        obj =>\r\n          (dataSource[index][obj.col] = (\r\n            <InputNumber\r\n              min={0}\r\n              max={100}\r\n              defaultValue={obj.defaultValue}\r\n              onChange={val => this.onChange(val, data.key, obj.col)}\r\n            />\r\n          ))\r\n      );\r\n    });\r\n    return dataSource;\r\n  };\r\n\r\n  onChange = (value, index, col) => {\r\n    const client = this.props.client;\r\n    const code = this.props.data.globalVariables.codeList[index];\r\n\r\n    console.log(client);\r\n    console.log(code);\r\n    console.log(\"changed\", value, index, col);\r\n  };\r\n}\r\n\r\nexport default WeightsInputTable2;\r\n","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport * as math from \"mathjs\";\r\nimport { GET_GLOBAL_VARIABLES } from \"apollo/queries\";\r\nimport { BackTest, BackTestArgsHandler, summaryTable } from \"utils/simulation\";\r\nimport { getRandAllocWithFixedWeights } from \"utils/utils\";\r\nimport { assetCodeList } from \"utils/data\";\r\nimport AssetAllocationPresenter from \"./AssetAllocationPresenter\";\r\n\r\nclass AssetAllocationContainer extends Component {\r\n  render() {\r\n    return (\r\n      <Query query={GET_GLOBAL_VARIABLES}>\r\n        {({ loading, error, data, client }) => {\r\n          const { codeList, startDate, endDate } = data.globalVariables;\r\n          const table = summaryTable(codeList, startDate, endDate);\r\n          return (\r\n            <div>\r\n              <div className=\"asset-allocation-page\">\r\n                <AssetAllocationPresenter\r\n                  data={data}\r\n                  client={client}\r\n                  table={table}\r\n                  handleOnClick={this.handleOnClick}\r\n                  handlePlayClick={this.handlePlayClick}\r\n                  stopSimulation={this.stopSimulation}\r\n                  handleResetClick={this.handleResetClick}\r\n                  stateData={this.state.data}\r\n                />\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.simulationOnce = this.simulationOnce.bind(this);\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n    this.handleResetClick = this.handleResetClick.bind(this);\r\n    this.handlePlayClick = this.handlePlayClick.bind(this);\r\n    this.stopSimulation = this.stopSimulation.bind(this);\r\n    this.state = {\r\n      data: [],\r\n      play: false\r\n    };\r\n    this.tempData = [];\r\n  }\r\n\r\n  simulationOnce(variables) {\r\n    const { startDate, endDate, codeList } = variables;\r\n\r\n    const tmpArray = new Array(17).fill(0);\r\n\r\n    // const weightLimit = {\r\n    //   \"069500\": 20\r\n    // };\r\n\r\n    codeList.forEach(code => {\r\n      const codeIndex = assetCodeList.indexOf(code);\r\n      if (codeIndex !== -1) {\r\n        tmpArray[codeIndex] = null;\r\n\r\n        // const isInweightLimit = Object.keys(weightLimit).indexOf(code);\r\n        // if (isInweightLimit !== -1) {\r\n        //   tmpArray[codeIndex] = weightLimit[code];\r\n        // }\r\n      }\r\n    });\r\n\r\n    let newAllocation = getRandAllocWithFixedWeights(tmpArray);\r\n\r\n    // EF LINE 에 영향을 미침\r\n    newAllocation = newAllocation.map(value => math.floor(value));\r\n    const remainWieght = 100 - math.sum(newAllocation);\r\n    newAllocation[newAllocation.length - 1] += remainWieght;\r\n\r\n    const backTestArgsHandler = new BackTestArgsHandler();\r\n    backTestArgsHandler.replaceAllocation(newAllocation);\r\n    backTestArgsHandler.setDateRange(startDate, endDate);\r\n\r\n    const testArgs = backTestArgsHandler.getArgs();\r\n    const backTest = new BackTest();\r\n    backTest.init(testArgs);\r\n    backTest.run();\r\n    backTest.createMetaData();\r\n    const result = backTest.result();\r\n\r\n    const simulationResult = {\r\n      // x: math.round(result.std, 4),\r\n      // y: math.round(result.finalReturn, 4),\r\n      x: math.round(result.annualizedStd, 4),\r\n      y: math.round(result.annualizedReturns, 4),\r\n      labels: newAllocation,\r\n      sharpeRatio: result.sharpeRatio\r\n    };\r\n\r\n    this.tempData.push(simulationResult);\r\n    return simulationResult;\r\n  }\r\n\r\n  handlePlayClick(event, variables) {\r\n    const globalVariables = variables.globalVariables;\r\n\r\n    this.setState({ play: true });\r\n    this.player = setInterval(() => {\r\n      this.simulationLoopWithTimeLimit(globalVariables, 100);\r\n      this.setState({\r\n        data: [...this.state.data, ...this.tempData]\r\n      });\r\n      this.tempData = [];\r\n    }, 1);\r\n  }\r\n\r\n  stopSimulation() {\r\n    this.setState({ play: false });\r\n    clearInterval(this.player);\r\n  }\r\n\r\n  simulationLoopWithTimeLimit(variables, limitTime = 1000) {\r\n    const startTime = Date.now();\r\n    let curTime = Date.now();\r\n    while (true) {\r\n      this.simulationOnce(variables);\r\n      curTime = Date.now();\r\n      if (curTime - startTime > limitTime) break;\r\n    }\r\n  }\r\n\r\n  simulationLoopWithCountsLimit(variables, limitCounts = 1000) {\r\n    let i = 0;\r\n    while (true) {\r\n      if (i === limitCounts) break;\r\n      this.simulationOnce(variables);\r\n      i++;\r\n    }\r\n  }\r\n\r\n  handleOnClick(event, data) {\r\n    const globalVariables = data.globalVariables;\r\n    this.simulationLoopWithTimeLimit(globalVariables);\r\n    this.setState({\r\n      data: [...this.state.data, ...this.tempData]\r\n    });\r\n    this.tempData = [];\r\n  }\r\n\r\n  handleResetClick(event) {\r\n    this.setState({\r\n      data: []\r\n    });\r\n  }\r\n}\r\n\r\nexport default AssetAllocationContainer;\r\n","import React from \"react\";\r\nimport * as math from \"mathjs\";\r\nimport { dynamicColors } from \"utils/chartUtil\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport TradingDate from \"utils/TradingDate\";\r\n\r\nclass PriceChart extends React.Component {\r\n  render() {\r\n    const { startDate, endDate } = this.props.data.globalVariables;\r\n    const resultList = this.props.resultList;\r\n    const isLogScale = this.props.isLogScale;\r\n\r\n    const dataList = [];\r\n\r\n    for (let i = 0; i < resultList.length; i++) {\r\n      let price_data = null;\r\n      if (isLogScale) {\r\n        price_data = resultList[i].result.navList.map(d => d / 100000000);\r\n      } else {\r\n        price_data = resultList[i].result.cumReturnList;\r\n      }\r\n\r\n      let dataset = {};\r\n      dataset.data = price_data;\r\n      dataset.label = resultList[i].name;\r\n      dataList.push(dataset);\r\n    }\r\n\r\n    const labels = TradingDate.getDateList(startDate, endDate);\r\n\r\n    const datasets = [];\r\n    dataList.forEach((data, index) => {\r\n      const color = index < 10 ? schemeCategory10[index] : dynamicColors();\r\n      const dataset = {\r\n        label: data.label,\r\n        backgroundColor: color,\r\n        borderColor: color,\r\n        data: data.data.map(num => math.round(num, 2)),\r\n        fill: false\r\n      };\r\n      datasets.push(dataset);\r\n    });\r\n\r\n    const data = {\r\n      labels: labels,\r\n      datasets\r\n    };\r\n\r\n    let allDataPoint = [100];\r\n    datasets.forEach(dataset => allDataPoint.splice(0, 0, ...dataset.data));\r\n    const minValue = math.floor(math.min(allDataPoint));\r\n    const maxValue = math.ceil(math.max(allDataPoint));\r\n\r\n    const options = {\r\n      responsive: true,\r\n      tooltips: {\r\n        mode: \"index\",\r\n        intersect: false\r\n      },\r\n      hover: {\r\n        mode: \"nearest\",\r\n        intersect: true\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            display: true,\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Date\"\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            type: \"linear\",\r\n            display: true,\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Return(%)\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    const logScaleOptions = {\r\n      responsive: true,\r\n      tooltips: {\r\n        mode: \"index\",\r\n        intersect: false\r\n      },\r\n      hover: {\r\n        mode: \"nearest\",\r\n        intersect: true\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            display: true,\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Date\"\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            type: \"logarithmic\",\r\n            ticks: {\r\n              min: minValue,\r\n              max: maxValue,\r\n              callback: function(value, index, values) {\r\n                return Number(value.toString()); //pass tick values as a string into Number function\r\n              }\r\n            },\r\n            display: true,\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: \"Return(%)\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {isLogScale ? (\r\n          <Line\r\n            key=\"1\"\r\n            data={data}\r\n            options={logScaleOptions}\r\n            getElementAtEvent={this.handleGetElementAtEvent}\r\n          />\r\n        ) : (\r\n          <Line\r\n            key=\"2\"\r\n            data={data}\r\n            options={options}\r\n            getElementAtEvent={this.handleGetElementAtEvent}\r\n          />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  handleGetElementAtEvent = elem => {\r\n    const activePoints = elem;\r\n    if (activePoints.length !== 0) {\r\n      const { _datasetIndex, _index, _chart } = activePoints[0];\r\n\r\n      const labelOfDatasets = _chart.data.labels[_index];\r\n      const labelOfData = _chart.data.datasets[_datasetIndex].label;\r\n\r\n      const selectedDate = labelOfDatasets;\r\n      const portName = labelOfData;\r\n      this.props.selectPortfolio(portName, selectedDate);\r\n    }\r\n  };\r\n}\r\n\r\nexport default PriceChart;\r\n","import React from \"react\";\r\nimport { Select } from \"antd\";\r\n\r\nconst Option = Select.Option;\r\n\r\nclass RebalanceSelect extends React.Component {\r\n  render() {\r\n    return (\r\n      <Select\r\n        defaultValue={this.props.preValue}\r\n        style={{ width: 100 }}\r\n        onChange={this.handleChange}\r\n      >\r\n        <Option value=\"none\">None</Option>\r\n        <Option value=\"daily\">Daily</Option>\r\n        <Option value=\"weekly\">Weekly</Option>\r\n        <Option value=\"monthly\">Monthly</Option>\r\n      </Select>\r\n    );\r\n  }\r\n\r\n  handleChange = value => {\r\n    this.props.handleChange(value);\r\n  };\r\n}\r\n\r\nexport default RebalanceSelect;\r\n","import React from \"react\";\r\nimport { Select } from \"antd\";\r\n\r\nconst Option = Select.Option;\r\n\r\nclass StrategySelect extends React.Component {\r\n  render() {\r\n    return (\r\n      <Select\r\n        defaultValue={this.props.preValue}\r\n        style={{ width: 150 }}\r\n        onChange={this.handleChange}\r\n      >\r\n        <Option value=\"none\">None</Option>\r\n        <Option value=\"momentum\">Momentum</Option>\r\n        <Option value=\"momentum2\">Momentum2</Option>\r\n        <Option value=\"momentum3\">Momentum3</Option>\r\n        <Option value=\"momentum4\">Momentum4</Option>\r\n        <Option value=\"momentum5\">Momentum5</Option>\r\n        <Option value=\"momentum6\">Momentum6</Option>\r\n        <Option value=\"momentum7\">Momentum7</Option>\r\n        <Option value=\"momentum8\">Momentum8</Option>\r\n        <Option value=\"momentum9\">Momentum9</Option>\r\n        <Option value=\"momentum10\">Momentum10</Option>\r\n        <Option value=\"momentum12\">Momentum12</Option>\r\n        <Option value=\"momentum13\">Momentum13</Option>\r\n        <Option value=\"momentum14\">Momentum14</Option>\r\n      </Select>\r\n    );\r\n  }\r\n\r\n  handleChange = value => {\r\n    this.props.handleChange(value);\r\n  };\r\n}\r\n\r\nexport default StrategySelect;\r\n","import React from \"react\";\r\nimport { Select } from \"antd\";\r\n\r\nconst Option = Select.Option;\r\n\r\nclass StrategyArgSelect extends React.Component {\r\n  render() {\r\n    return (\r\n      <Select\r\n        defaultValue={this.props.preValue}\r\n        style={{ width: 70 }}\r\n        onChange={this.handleChange}\r\n      >\r\n        <Option value=\"none\">None</Option>\r\n        <Option value=\"1\">1</Option>\r\n        <Option value=\"2\">2</Option>\r\n        <Option value=\"3\">3</Option>\r\n        <Option value=\"4\">4</Option>\r\n        <Option value=\"5\">5</Option>\r\n        <Option value=\"6\">6</Option>\r\n        <Option value=\"7\">7</Option>\r\n        <Option value=\"8\">8</Option>\r\n        <Option value=\"9\">9</Option>\r\n        <Option value=\"10\">10</Option>\r\n        <Option value=\"20\">20</Option>\r\n        <Option value=\"30\">30</Option>\r\n        <Option value=\"40\">40</Option>\r\n        <Option value=\"50\">50</Option>\r\n        <Option value=\"60\">60</Option>\r\n        <Option value=\"80\">80</Option>\r\n        <Option value=\"100\">100</Option>\r\n        <Option value=\"120\">120</Option>\r\n        <Option value=\"240\">240</Option>\r\n      </Select>\r\n    );\r\n  }\r\n\r\n  handleChange = value => {\r\n    this.props.handleChange(value);\r\n  };\r\n}\r\n\r\nexport default StrategyArgSelect;\r\n","import React from \"react\";\r\nimport { Select } from \"antd\";\r\nimport {  assetCodeList, assetShortNameList,} from \"utils/data\";\r\n\r\nconst Option = Select.Option;\r\n\r\nclass AssetSelect extends React.Component {\r\n  render() {\r\n    return (\r\n      <Select\r\n        defaultValue={this.props.preValue}\r\n        style={{ width: 100 }}\r\n        onChange={this.handleChange}\r\n      >\r\n        <Option value=\"none\">None</Option>\r\n\t\t{assetCodeList.map((code, index) => <Option key={code} value={code}>{assetShortNameList[index]}</Option>)}\r\n      </Select>\r\n    );\r\n  }\r\n\r\n  handleChange = value => {\r\n    this.props.handleChange(value);\r\n  };\r\n}\r\n\r\nexport default AssetSelect;","import React from \"react\";\r\nimport RebalanceSelect from \"./RebalanceSelect\";\r\nimport StrategySelect from \"./StrategySelect\";\r\nimport StrategyArgSelect from \"./StrategyArgSelect\";\r\nimport AssetSelect from \"./AssetSelect\";\r\n\r\nconst BatchSelect = props => {\r\n  const { batchSelection } = props;\r\n  // column 종류 : rebalanceType, strategyType, strategyArg1, strategyArg2, selectedAsset\r\n  return (\r\n    <React.Fragment>\r\n      <RebalanceSelect\r\n        handleChange={type => batchSelection(\"rebalanceType\", type)}\r\n        preValue=\"none\"\r\n      />\r\n\r\n      <StrategySelect\r\n        handleChange={type => batchSelection(\"strategyType\", type)}\r\n        preValue=\"none\"\r\n      />\r\n\r\n      <StrategyArgSelect\r\n        handleChange={type => batchSelection(\"strategyArg1\", type)}\r\n        preValue=\"none\"\r\n      />\r\n      <StrategyArgSelect\r\n        handleChange={type => batchSelection(\"strategyArg2\", type)}\r\n        preValue=\"none\"\r\n      />\r\n      <StrategyArgSelect\r\n        handleChange={type => batchSelection(\"strategyArg3\", type)}\r\n        preValue=\"none\"\r\n      />\r\n      <AssetSelect\r\n        handleChange={type => batchSelection(\"selectedAsset\", type)}\r\n        preValue=\"none\"\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BatchSelect;\r\n","import { Table, Button, Form, Input } from \"antd\";\r\nimport React from \"react\";\r\nimport { assetCodeList } from \"utils/data\";\r\nimport RebalanceSelect from \"./RebalanceSelect\";\r\nimport StrategySelect from \"./StrategySelect\";\r\nimport StrategyArgSelect from \"./StrategyArgSelect\";\r\nimport AssetSelect from \"./AssetSelect\";\r\nimport BatchSelect from \"./BatchSelect\";\r\n\r\nconst FormItem = Form.Item;\r\nconst EditableContext = React.createContext();\r\n\r\nconst EditableRow = ({ form, index, ...props }) => (\r\n  <EditableContext.Provider value={form}>\r\n    <tr {...props} />\r\n  </EditableContext.Provider>\r\n);\r\n\r\nconst EditableFormRow = Form.create()(EditableRow);\r\n\r\nclass EditableCell extends React.Component {\r\n  state = {\r\n    editing: false\r\n  };\r\n\r\n  toggleEdit = () => {\r\n    const editing = !this.state.editing;\r\n    this.setState({ editing }, () => {\r\n      if (editing) {\r\n        this.input.focus();\r\n      }\r\n    });\r\n  };\r\n\r\n  save = e => {\r\n    const { record, handleSave } = this.props;\r\n    this.form.validateFields((error, values) => {\r\n      if (error && error[e.currentTarget.id]) {\r\n        return;\r\n      }\r\n      this.toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { editing } = this.state;\r\n    const {\r\n      editable,\r\n      dataIndex,\r\n      title,\r\n      record,\r\n      index,\r\n      handleSave,\r\n      ...restProps\r\n    } = this.props;\r\n    return (\r\n      <td {...restProps}>\r\n        {editable ? (\r\n          <EditableContext.Consumer>\r\n            {form => {\r\n              this.form = form;\r\n              return editing ? (\r\n                <FormItem style={{ margin: 0 }}>\r\n                  {form.getFieldDecorator(dataIndex, {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: `${title} is required.`\r\n                      }\r\n                    ],\r\n                    initialValue: record[dataIndex]\r\n                  })(\r\n                    <Input\r\n                      ref={node => (this.input = node)}\r\n                      onPressEnter={this.save}\r\n                      onBlur={this.save}\r\n                    />\r\n                  )}\r\n                </FormItem>\r\n              ) : (\r\n                <div\r\n                  className=\"editable-cell-value-wrap\"\r\n                  style={{ paddingRight: 5 }}\r\n                  onClick={this.toggleEdit}\r\n                >\r\n                  {restProps.children}\r\n                </div>\r\n              );\r\n            }}\r\n          </EditableContext.Consumer>\r\n        ) : (\r\n          restProps.children\r\n        )}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nclass EditableTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { columns, dataSource } = props;\r\n    const selectColumn = [\r\n      {\r\n        title: \"Rebalancing\",\r\n        dataIndex: \"rebalancing\",\r\n        render: (text, record) =>\r\n          this.state.dataSource.length >= 1 ? (\r\n            <React.Fragment>\r\n              <RebalanceSelect\r\n                handleChange={type =>\r\n                  this.selectHandler(\"rebalanceType\", record.key, type)\r\n                }\r\n                preValue={\r\n                  this.state.dataSource.filter(\r\n                    data => data.key === record.key\r\n                  )[0]\r\n                    ? this.state.dataSource.filter(\r\n                        data => data.key === record.key\r\n                      )[0].rebalanceType\r\n                    : \"none\"\r\n                }\r\n              />\r\n            </React.Fragment>\r\n          ) : null\r\n      },\r\n      {\r\n        title: \"Strategy\",\r\n        dataIndex: \"strategy\",\r\n        render: (text, record) =>\r\n          this.state.dataSource.length >= 1 ? (\r\n            <React.Fragment>\r\n              <StrategySelect\r\n                handleChange={type =>\r\n                  this.selectHandler(\"strategyType\", record.key, type)\r\n                }\r\n                preValue={\r\n                  this.state.dataSource.filter(\r\n                    data => data.key === record.key\r\n                  )[0]\r\n                    ? this.state.dataSource.filter(\r\n                        data => data.key === record.key\r\n                      )[0].strategyType\r\n                    : \"none\"\r\n                }\r\n              />\r\n            </React.Fragment>\r\n          ) : null\r\n      },\r\n      {\r\n        title: \"Arg1\",\r\n        dataIndex: \"strategyArg1\",\r\n        render: (text, record) =>\r\n          this.state.dataSource.length >= 1 ? (\r\n            <React.Fragment>\r\n              <StrategyArgSelect\r\n                handleChange={type =>\r\n                  this.selectHandler(\"strategyArg1\", record.key, type)\r\n                }\r\n                preValue={\r\n                  this.state.dataSource.filter(\r\n                    data => data.key === record.key\r\n                  )[0]\r\n                    ? this.state.dataSource.filter(\r\n                        data => data.key === record.key\r\n                      )[0].strategyArg1\r\n                    : \"none\"\r\n                }\r\n              />\r\n            </React.Fragment>\r\n          ) : null\r\n      },\r\n      {\r\n        title: \"Arg2\",\r\n        dataIndex: \"strategyArg2\",\r\n        render: (text, record) =>\r\n          this.state.dataSource.length >= 1 ? (\r\n            <React.Fragment>\r\n              <StrategyArgSelect\r\n                handleChange={type =>\r\n                  this.selectHandler(\"strategyArg2\", record.key, type)\r\n                }\r\n                preValue={\r\n                  this.state.dataSource.filter(\r\n                    data => data.key === record.key\r\n                  )[0]\r\n                    ? this.state.dataSource.filter(\r\n                        data => data.key === record.key\r\n                      )[0].strategyArg2\r\n                    : \"none\"\r\n                }\r\n              />\r\n            </React.Fragment>\r\n          ) : null\r\n      },\r\n      {\r\n        title: \"Arg3\",\r\n        dataIndex: \"strategyArg3\",\r\n        render: (text, record) =>\r\n          this.state.dataSource.length >= 1 ? (\r\n            <React.Fragment>\r\n              <StrategyArgSelect\r\n                handleChange={type =>\r\n                  this.selectHandler(\"strategyArg3\", record.key, type)\r\n                }\r\n                preValue={\r\n                  this.state.dataSource.filter(\r\n                    data => data.key === record.key\r\n                  )[0]\r\n                    ? this.state.dataSource.filter(\r\n                        data => data.key === record.key\r\n                      )[0].strategyArg3\r\n                    : \"none\"\r\n                }\r\n              />\r\n            </React.Fragment>\r\n          ) : null\r\n      },\r\n      {\r\n        title: \"Asset\",\r\n        dataIndex: \"selectedAsset\",\r\n        render: (text, record) =>\r\n          this.state.dataSource.length >= 1 ? (\r\n            <React.Fragment>\r\n              <AssetSelect\r\n                handleChange={type =>\r\n                  this.selectHandler(\"selectedAsset\", record.key, type)\r\n                }\r\n                preValue={\r\n                  this.state.dataSource.filter(\r\n                    data => data.key === record.key\r\n                  )[0]\r\n                    ? this.state.dataSource.filter(\r\n                        data => data.key === record.key\r\n                      )[0].selectedAsset\r\n                    : \"none\"\r\n                }\r\n              />\r\n            </React.Fragment>\r\n          ) : null\r\n      },\r\n      {\r\n        title: \"operation\",\r\n        dataIndex: \"operation\",\r\n        render: (text, record) =>\r\n          this.state.dataSource.length >= 1 ? (\r\n            <React.Fragment>\r\n              <button onClick={() => this.handleRun(record.key)}>Run</button>\r\n              <button onClick={() => this.handleDelete(record.key)}>\r\n                Delete\r\n              </button>\r\n            </React.Fragment>\r\n          ) : null\r\n      }\r\n    ];\r\n\r\n    this.columns = columns;\r\n    this.columns.splice(1, 0, ...selectColumn);\r\n\r\n    this.state = dataSource;\r\n  }\r\n\r\n  selectHandler = (selectTarget, key, type) => {\r\n    const { dataSource } = this.state;\r\n    this.setState({\r\n      dataSource: dataSource.map(data =>\r\n        key === data.key ? { ...data, [selectTarget]: type } : data\r\n      )\r\n    });\r\n  };\r\n\r\n  handleRun = key => {\r\n    const dataSource = [...this.state.dataSource];\r\n    const data = dataSource.filter(item => item.key === key);\r\n\r\n    const weightsList = [];\r\n    assetCodeList.map(code => {\r\n      weightsList.push(data[0][code]);\r\n    });\r\n    weightsList.push(0);\r\n\r\n    const {\r\n      name,\r\n      rebalanceType,\r\n      strategyType,\r\n      strategyArg1,\r\n      strategyArg2,\r\n      strategyArg3,\r\n      selectedAsset\r\n    } = data[0];\r\n\r\n    this.props.runHandler(\r\n      weightsList,\r\n      name,\r\n      rebalanceType,\r\n      strategyType,\r\n      strategyArg1,\r\n      strategyArg2,\r\n      strategyArg3,\r\n      selectedAsset\r\n    );\r\n  };\r\n\r\n  handleDelete = key => {\r\n    const dataSource = [...this.state.dataSource];\r\n    this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\r\n  };\r\n\r\n  handleAdd = () => {\r\n    const { count, dataSource } = this.state;\r\n\r\n    const defaultData = {\r\n      \"069500\": 100,\r\n      \"232080\": 0,\r\n      \"143850\": 0,\r\n      \"195930\": 0,\r\n      \"238720\": 0,\r\n      \"192090\": 0,\r\n      \"148070\": 0,\r\n      \"136340\": 0,\r\n      \"182490\": 0,\r\n      \"132030\": 0,\r\n      \"130680\": 0,\r\n      \"114800\": 0,\r\n      \"138230\": 0,\r\n      \"139660\": 0,\r\n      \"130730\": 0,\r\n      WORLD_STOCK: 0,\r\n      rebalanceType: \"none\",\r\n      strategyType: \"none\",\r\n      strategyArg1: \"none\",\r\n      strategyArg2: \"none\",\r\n      strategyArg3: \"none\",\r\n      selectedAsset: \"none\"\r\n    };\r\n\r\n    const length = dataSource.length;\r\n\r\n    const lastData =\r\n      length >= 1 ? dataSource[dataSource.length - 1] : defaultData;\r\n\r\n    const newData = {\r\n      ...lastData,\r\n      key: count,\r\n      name: `Port #${count + 1}`\r\n    };\r\n\r\n    this.setState({\r\n      dataSource: [...dataSource, newData],\r\n      count: count + 1\r\n    });\r\n  };\r\n\r\n  handleAddPortfolio = type => {\r\n    const { count, dataSource } = this.state;\r\n\r\n    const newPortfolio = {\r\n      key: count,\r\n      name: \"\",\r\n      \"069500\": 0,\r\n      \"232080\": 0,\r\n      \"143850\": 0,\r\n      \"195930\": 0,\r\n      \"238720\": 0,\r\n      \"192090\": 0,\r\n      \"148070\": 0,\r\n      \"136340\": 0,\r\n      \"182490\": 0,\r\n      \"132030\": 0,\r\n      \"130680\": 0,\r\n      \"114800\": 0,\r\n      \"138230\": 0,\r\n      \"139660\": 0,\r\n      \"130730\": 0,\r\n      WORLD_STOCK: 0,\r\n      rebalanceType: \"none\",\r\n      strategyType: \"none\",\r\n      strategyArg1: \"none\",\r\n      strategyArg2: \"none\",\r\n      strategyArg3: \"none\",\r\n      selectedAsset: \"none\"\r\n    };\r\n\r\n    if (type === \"Permanent Portfolio\") {\r\n      newPortfolio.name = \"Permanent Portfolio\";\r\n      newPortfolio[\"143850\"] = 25;\r\n      newPortfolio[\"182490\"] = 25;\r\n      newPortfolio[\"132030\"] = 25;\r\n      newPortfolio[\"130730\"] = 25;\r\n      newPortfolio.rebalanceType = \"monthly\";\r\n    } else if (type === \"50:50\") {\r\n      newPortfolio.name = \"50:50\";\r\n      newPortfolio[\"143850\"] = 50;\r\n      newPortfolio[\"182490\"] = 50;\r\n      newPortfolio.rebalanceType = \"monthly\";\r\n    } else if (type === \"Dual Momentum\") {\r\n      newPortfolio.name = \"Dual Momentum\";\r\n      newPortfolio.rebalanceType = \"weekly\";\r\n      newPortfolio.strategyType = \"momentum13\";\r\n      newPortfolio.strategyArg1 = \"80\";\r\n      newPortfolio.strategyArg2 = \"2\";\r\n    } else {\r\n      console.log(type);\r\n      throw \"invalid portfolio type\";\r\n    }\r\n\r\n    this.setState({\r\n      dataSource: [...dataSource, newPortfolio],\r\n      count: count + 1\r\n    });\r\n  };\r\n\r\n  handleSave = row => {\r\n    const newData = [...this.state.dataSource];\r\n    const index = newData.findIndex(item => row.key === item.key);\r\n    const item = newData[index];\r\n    newData.splice(index, 1, {\r\n      ...item,\r\n      ...row\r\n    });\r\n    this.setState({ dataSource: newData });\r\n  };\r\n\r\n  render() {\r\n    const { dataSource } = this.props.dataSource;\r\n    const components = {\r\n      body: {\r\n        row: EditableFormRow,\r\n        cell: EditableCell\r\n      }\r\n    };\r\n    const columns = this.columns.map(col => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n      return {\r\n        ...col,\r\n        onCell: record => ({\r\n          record,\r\n          editable: col.editable,\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n          handleSave: this.handleSave\r\n        })\r\n      };\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <Button\r\n          onClick={this.handleAdd}\r\n          type=\"primary\"\r\n          style={{ marginBottom: 16 }}\r\n        >\r\n          Add a row\r\n        </Button>\r\n        <Button\r\n          onClick={() => this.handleAddPortfolio(\"Permanent Portfolio\")}\r\n          type=\"primary\"\r\n          style={{ marginBottom: 16 }}\r\n        >\r\n          Add Permanent Portfolio\r\n        </Button>\r\n        <Button\r\n          onClick={() => this.handleAddPortfolio(\"50:50\")}\r\n          type=\"primary\"\r\n          style={{ marginBottom: 16 }}\r\n        >\r\n          Add 50:50 Portfolio\r\n        </Button>\r\n        <Button\r\n          onClick={() => this.handleAddPortfolio(\"Dual Momentum\")}\r\n          type=\"primary\"\r\n          style={{ marginBottom: 16 }}\r\n        >\r\n          Dual Momentum\r\n        </Button>\r\n        <br />\r\n        <BatchSelect batchSelection={this.props.batchSelection} />\r\n        <Table\r\n          components={components}\r\n          rowClassName={() => \"editable-row\"}\r\n          bordered\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          size=\"small\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const rootComp = this.props.rootComp;\r\n    const { dataSource, count } = this.state;\r\n\r\n    const preState = rootComp.state.dataSource;\r\n    const newState = this.state;\r\n\r\n    const didChange = JSON.stringify(preState) !== JSON.stringify(newState);\r\n\r\n    if (didChange) {\r\n      rootComp.setState({\r\n        dataSource: {\r\n          dataSource,\r\n          count\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default EditableTable;\r\n","import { Table } from \"antd\";\r\nimport React from \"react\";\r\nimport * as math from \"mathjs\";\r\nimport { getMaximumDrawDown } from \"utils/utils\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\"\r\n  },\r\n  {\r\n    title: \"Start Date\",\r\n    dataIndex: \"startDate\",\r\n    key: \"startDate\"\r\n  },\r\n  {\r\n    title: \"End Date\",\r\n    dataIndex: \"endDate\",\r\n    key: \"endDate\"\r\n  },\r\n  {\r\n    title: \"Returns(%)\",\r\n    dataIndex: \"returns\",\r\n    key: \"returns\"\r\n  },\r\n  {\r\n    title: \"Std(%)\",\r\n    dataIndex: \"std\",\r\n    key: \"std\"\r\n  },\r\n  {\r\n    title: \"AnnualizedReturns(%)\",\r\n    dataIndex: \"annualizedReturns\",\r\n    key: \"annualizedReturns\"\r\n  },\r\n  {\r\n    title: \"AnnualizedStd(%)\",\r\n    dataIndex: \"annualizedStd\",\r\n    key: \"annualizedStd\"\r\n  },\r\n  {\r\n    title: \"MDD(%)\",\r\n    dataIndex: \"maximumDrowDown\",\r\n    key: \"maximumDrowDown\"\r\n  },\r\n  {\r\n    title: \"SharpeRatio\",\r\n    dataIndex: \"sharpeRatio\",\r\n    key: \"sharpeRatio\"\r\n  }\r\n];\r\n\r\nconst BackTestResultTable = props => {\r\n  const dataSource = props.data.map((d, index) => {\r\n    const { result, name } = d;\r\n    let {\r\n      finalReturn,\r\n      std,\r\n      annualizedReturns,\r\n      annualizedStd,\r\n      dateList,\r\n      navList\r\n    } = result;\r\n\r\n    const startDate = dateList[0];\r\n    const endDate = dateList[dateList.length - 1];\r\n    const returns = math.round(finalReturn, 4);\r\n    const maximumDrowDown = getMaximumDrawDown(navList);\r\n    std = math.round(std, 4);\r\n    annualizedReturns = math.round(annualizedReturns, 4);\r\n    annualizedStd = math.round(annualizedStd, 4);\r\n    return {\r\n      key: index,\r\n      name: name,\r\n      startDate,\r\n      endDate,\r\n      maximumDrowDown: \"-\" + (maximumDrowDown * 100).toFixed(2) + \" %\",\r\n      returns: (returns * 100).toFixed(2) + \" %\",\r\n      std: (std * 100).toFixed(2) + \" %\",\r\n      annualizedReturns: (annualizedReturns * 100).toFixed(2) + \" %\",\r\n      annualizedStd: (annualizedStd * 100).toFixed(2) + \" %\",\r\n      sharpeRatio: math.round(annualizedReturns / annualizedStd, 2).toFixed(2)\r\n    };\r\n  });\r\n\r\n  return <Table dataSource={dataSource} columns={columns} size=\"small\" />;\r\n};\r\n\r\nexport default BackTestResultTable;\r\n","import React from \"react\";\r\nimport { schemeCategory20 } from \"utils/chartUtil\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { getAssetShortName, getAssetId } from \"utils/data\";\r\n\r\nclass PortFolioPositionChart extends React.Component {\r\n  render() {\r\n    const { resultList, portInfo } = this.props;\r\n\r\n    if (portInfo == null) return <Doughnut data={{}} />;\r\n\r\n    const { name, date } = portInfo;\r\n\r\n    const portfolioResult = resultList.filter(result => result.name === name)[0]\r\n      .result;\r\n\r\n    const dateIdx = portfolioResult.dateList.indexOf(date);\r\n    const allocation = portfolioResult.allocationList[dateIdx];\r\n\r\n    const labels = [];\r\n    const _data = [];\r\n    const _color = [];\r\n\r\n    if (allocation === undefined) {\r\n      return null;\r\n    }\r\n    allocation.forEach((asset, index) => {\r\n      if (asset.weight === 0) return;\r\n\r\n      const assetIndex = getAssetId(asset.code);\r\n      const color = schemeCategory20[assetIndex];\r\n\r\n      if (asset.code !== \"cash\") {\r\n        labels.push(getAssetShortName(asset.code));\r\n      } else {\r\n        labels.push(\"cash\");\r\n      }\r\n\r\n      _data.push(asset.weight);\r\n      _color.push(color);\r\n    });\r\n\r\n    const data = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          data: _data,\r\n          backgroundColor: _color,\r\n          hoverBackgroundColor: _color\r\n        }\r\n      ]\r\n    };\r\n\r\n    const options = {\r\n      legend: {\r\n        position: \"left\"\r\n      }\r\n    };\r\n\r\n    return <Doughnut data={data} options={options} />;\r\n  }\r\n}\r\n\r\nexport default PortFolioPositionChart;\r\n","import React from \"react\";\r\nimport PriceChart from \"./PriceChart\";\r\nimport WeightsInputTable from \"./WeightsInputTable\";\r\nimport BackTestResultTable from \"./BackTestResultTable\";\r\nimport PortFolioPositionChart from \"./PortFolioPositionChart\";\r\nimport { Button } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nconst BackTestPresenter = props => {\r\n  const {\r\n    data,\r\n    client,\r\n    columns,\r\n    dataSource,\r\n    func,\r\n    resultList,\r\n    selectedPortfolio,\r\n    selectPortfolioHandler,\r\n    refreshHandler,\r\n    rootComp,\r\n    setLogScale,\r\n    isLogScale,\r\n    batchSelection\r\n  } = props;\r\n  const { globalVariables } = data;\r\n  const { runSimulation } = func;\r\n\r\n  return (\r\n    <Container>\r\n      <StrategyInputContainer>\r\n        <WeightsInputTable\r\n          columns={columns}\r\n          dataSource={dataSource}\r\n          runHandler={(\r\n            weightsList,\r\n            name,\r\n            rebalanceType,\r\n            strategyType,\r\n            strategyArg1,\r\n            strategyArg2,\r\n            strategyArg3,\r\n            selectedAsset\r\n          ) =>\r\n            runSimulation(\r\n              globalVariables,\r\n              weightsList,\r\n              name,\r\n              rebalanceType,\r\n              strategyType,\r\n              strategyArg1,\r\n              strategyArg2,\r\n              strategyArg3,\r\n              selectedAsset\r\n            )\r\n          }\r\n          rootComp={rootComp}\r\n          batchSelection={batchSelection}\r\n        />\r\n        <Button type=\"default\" onClick={() => refreshHandler(globalVariables)}>\r\n          Refresh\r\n        </Button>\r\n      </StrategyInputContainer>\r\n\r\n      <ChartContainer>\r\n        <PriceChartContainer>\r\n          <PriceChart\r\n            data={data}\r\n            resultList={resultList}\r\n            selectPortfolio={selectPortfolioHandler}\r\n            isLogScale={isLogScale}\r\n          />\r\n          {/* <span>Returns Log scale </span>\r\n        <Switch onChange={setLogScale} /> */}\r\n        </PriceChartContainer>\r\n        <PortFolioPositionChartContainer>\r\n          <PortFolioPositionChart\r\n            resultList={resultList}\r\n            portInfo={selectedPortfolio}\r\n          />\r\n        </PortFolioPositionChartContainer>\r\n      </ChartContainer>\r\n\r\n      <BackTestResultTable data={resultList} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  min-width: 1500px;\r\n`;\r\n\r\nconst StrategyDescriptionContainer = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nconst StrategyInputContainer = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nconst ChartContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nconst PriceChartContainer = styled.div`\r\n  height: 100%;\r\n  width: 60%;\r\n`;\r\n\r\nconst PortFolioPositionChartContainer = styled.div`\r\n  height: 100%;\r\n  width: 40%;\r\n`;\r\n\r\nexport default BackTestPresenter;\r\n","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport * as math from \"mathjs\";\r\nimport { GET_GLOBAL_VARIABLES } from \"apollo/queries\";\r\nimport BackTestPresenter from \"./BackTestPresenter\";\r\nimport { assetCodeList, getAssetShortName } from \"utils/data\";\r\nimport { dateList, firstDateOfMonth, firtDateOfWeek } from \"priceData\";\r\nimport { BackTest, BackTestArgsHandler } from \"utils/simulation\";\r\n// import { BackTest as backTesting, main, strategyStore } from \"backtesting\";\r\n\r\nclass BackTestContainer extends Component {\r\n  render() {\r\n    return (\r\n      <Query query={GET_GLOBAL_VARIABLES}>\r\n        {({ loading, error, data, client }) => {\r\n          return (\r\n            <BackTestPresenter\r\n              rootComp={this}\r\n              data={data}\r\n              client={client}\r\n              columns={this.columns}\r\n              dataSource={this.state.dataSource}\r\n              func={{ runSimulation: this.runSimulation }}\r\n              resultList={this.state.resultList}\r\n              selectPortfolioHandler={this.selectPortfolioHandler}\r\n              selectedPortfolio={this.state.selectedPortfolio}\r\n              refreshHandler={this.refreshHandler}\r\n              setLogScale={this.setLogScale}\r\n              isLogScale={this.state.logScale}\r\n              batchSelection={this.batchSelection}\r\n            />\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const columns = [\r\n      {\r\n        title: \"name\",\r\n        dataIndex: \"name\",\r\n        editable: true\r\n      }\r\n    ];\r\n\r\n    assetCodeList.forEach(code => {\r\n      columns.push({\r\n        title: getAssetShortName(code),\r\n        dataIndex: code,\r\n        editable: true\r\n      });\r\n    });\r\n\r\n    this.columns = columns;\r\n\r\n    const dataSource = {\r\n      dataSource: [],\r\n      count: 0\r\n    };\r\n\r\n    this.state = {\r\n      dataSource,\r\n      resultList: [],\r\n      selectedPortfolio: null,\r\n      logScale: false\r\n    };\r\n  }\r\n\r\n  runSimulation = (\r\n    variables,\r\n    weightsList,\r\n    name,\r\n    rebalanceType = \"none\",\r\n    strategyType = \"none\",\r\n    strategyArg1 = \"none\",\r\n    strategyArg2 = \"none\",\r\n    strategyArg3 = \"none\",\r\n    selectedAsset = \"none\"\r\n  ) => {\r\n    const { startDate, endDate } = variables;\r\n    let newAllocation = weightsList;\r\n\r\n    // EF LINE 에 영향을 미침\r\n    newAllocation = newAllocation.map(value => math.floor(value));\r\n    const remainWieght = 100 - math.sum(newAllocation);\r\n    newAllocation[newAllocation.length - 1] += remainWieght;\r\n\r\n    const backTestArgsHandler = new BackTestArgsHandler();\r\n    backTestArgsHandler.replaceAllocation(newAllocation);\r\n    backTestArgsHandler.setDateRange(startDate, endDate);\r\n    if (rebalanceType === \"none\") {\r\n      backTestArgsHandler.setRebalanceDateList([]);\r\n    } else if (rebalanceType === \"daily\") {\r\n      backTestArgsHandler.setRebalanceDateList(dateList);\r\n    } else if (rebalanceType === \"weekly\") {\r\n      backTestArgsHandler.setRebalanceDateList(firtDateOfWeek);\r\n    } else if (rebalanceType === \"monthly\") {\r\n      backTestArgsHandler.setRebalanceDateList(firstDateOfMonth);\r\n    }\r\n\r\n    const testArgs = backTestArgsHandler.getArgs();\r\n    const backTest = new BackTest();\r\n    backTest.init(testArgs);\r\n    const backTestArgs = {\r\n      strategyType,\r\n      strategyArg1,\r\n      strategyArg2,\r\n      strategyArg3,\r\n      selectedAsset\r\n    };\r\n    executeBacktest(backTest, backTestArgs);\r\n    backTest.createMetaData();\r\n    const result = backTest.result();\r\n    console.log(result);\r\n\r\n    this.setState({ resultList: [...this.state.resultList, { result, name }] });\r\n  };\r\n\r\n  // runSimulation2 = (\r\n  //   variables,\r\n  //   weightsList,\r\n  //   name,\r\n  //   rebalanceType = \"none\",\r\n  //   strategyType = \"none\",\r\n  //   strategyArg1 = \"none\",\r\n  //   strategyArg2 = \"none\",\r\n  //   strategyArg3 = \"none\",\r\n  //   selectedAsset = \"none\"\r\n  // ) => {\r\n  //   const { startDate, endDate } = variables;\r\n  //   const strategy = strategyStore[\"momentum\"];\r\n\r\n  //   const context = {\r\n  //     startDate,\r\n  //     endDate,\r\n  //     rebalanceType: rebalanceType,\r\n  //     taxRate: 0,\r\n  //     commissionRate: 0.00015,\r\n  //     strategyArgs: {\r\n  //       momentumWindow: 80,\r\n  //       top: 2\r\n  //     }\r\n  //   };\r\n\r\n  //   let backtest = new backTesting(context, strategy);\r\n  //   backtest.run();\r\n  //   const result = backtest.result();\r\n  //   this.setState({ resultList: [...this.state.resultList, { result, name }] });\r\n  // };\r\n\r\n  refreshSimulations = (\r\n    variables,\r\n    weightsList,\r\n    name,\r\n    rebalanceType = \"none\",\r\n    strategyType = \"none\",\r\n    strategyArg1 = \"none\",\r\n    strategyArg2 = \"none\",\r\n    strategyArg3 = \"none\",\r\n    selectedAsset = \"none\"\r\n  ) => {\r\n    const { startDate, endDate } = variables;\r\n    let newAllocation = weightsList;\r\n\r\n    // EF LINE 에 영향을 미침\r\n    newAllocation = newAllocation.map(value => math.floor(value));\r\n    const remainWieght = 100 - math.sum(newAllocation);\r\n    newAllocation[newAllocation.length - 1] += remainWieght;\r\n\r\n    const backTestArgsHandler = new BackTestArgsHandler();\r\n    backTestArgsHandler.replaceAllocation(newAllocation);\r\n    backTestArgsHandler.setDateRange(startDate, endDate);\r\n    if (rebalanceType === \"none\") {\r\n      backTestArgsHandler.setRebalanceDateList([]);\r\n    } else if (rebalanceType === \"daily\") {\r\n      backTestArgsHandler.setRebalanceDateList(dateList);\r\n    } else if (rebalanceType === \"weekly\") {\r\n      backTestArgsHandler.setRebalanceDateList(firtDateOfWeek);\r\n    } else if (rebalanceType === \"monthly\") {\r\n      backTestArgsHandler.setRebalanceDateList(firstDateOfMonth);\r\n    }\r\n\r\n    const testArgs = backTestArgsHandler.getArgs();\r\n    const backTest = new BackTest();\r\n\r\n    backTest.init(testArgs);\r\n\r\n    const backTestArgs = {\r\n      strategyType,\r\n      strategyArg1,\r\n      strategyArg2,\r\n      strategyArg3,\r\n      selectedAsset\r\n    };\r\n\r\n    executeBacktest(backTest, backTestArgs);\r\n\r\n    backTest.createMetaData();\r\n    const result = backTest.result();\r\n\r\n    return { result, name };\r\n  };\r\n\r\n  selectPortfolioHandler = (portName, selectedDate) => {\r\n    this.setState({\r\n      selectedPortfolio: { name: portName, date: selectedDate }\r\n    });\r\n  };\r\n\r\n  refreshHandler = variables => {\r\n    const { dataSource } = this.state.dataSource;\r\n    const resultList = this.state.resultList;\r\n    const numOfPreSimulation = resultList.length;\r\n    const newResultList = [];\r\n\r\n    for (let i = 0; i < numOfPreSimulation; i++) {\r\n      const data = dataSource[i];\r\n      const weightsList = [];\r\n      assetCodeList.forEach(code => {\r\n        weightsList.push(data[code]);\r\n      });\r\n      weightsList.push(0);\r\n\r\n      const {\r\n        name,\r\n        rebalanceType,\r\n        strategyType,\r\n        strategyArg1,\r\n        strategyArg2,\r\n        strategyArg3,\r\n        selectedAsset\r\n      } = data;\r\n\r\n      const result = this.refreshSimulations(\r\n        variables,\r\n        weightsList,\r\n        name,\r\n        rebalanceType,\r\n        strategyType,\r\n        strategyArg1,\r\n        strategyArg2,\r\n        strategyArg3,\r\n        selectedAsset\r\n      );\r\n      newResultList.push(result);\r\n    }\r\n\r\n    this.setState({\r\n      resultList: newResultList\r\n    });\r\n  };\r\n\r\n  setLogScale = () => {\r\n    this.setState({\r\n      logScale: !this.state.logScale\r\n    });\r\n  };\r\n\r\n  batchSelection = (column, newValue) => {\r\n    // column 종류 : rebalanceType, strategyType, strategyArg1, strategyArg2, strategyArg3, selectedAsset\r\n    const { dataSource } = this.state.dataSource;\r\n\r\n    const newDataSource = dataSource.map(port => {\r\n      port[column] = newValue;\r\n      return port;\r\n    });\r\n    this.setState({\r\n      dataSource: newDataSource\r\n    });\r\n  };\r\n}\r\n\r\nconst executeBacktest = (backTest, backTestArgs) => {\r\n  const {\r\n    strategyType,\r\n    strategyArg1,\r\n    strategyArg2,\r\n    strategyArg3,\r\n    selectedAsset\r\n  } = backTestArgs;\r\n\r\n  if (strategyType === \"none\") {\r\n    backTest.run();\r\n  } else if (strategyType === \"momentum\") {\r\n    const simulationArgs = { momentumWindow: strategyArg1 };\r\n    backTest.run2(simulationArgs);\r\n  } else if (strategyType === \"momentum2\") {\r\n    const simulationArgs = {\r\n      top: strategyArg1,\r\n      momentumWindow: strategyArg2\r\n    };\r\n    backTest.run3(simulationArgs);\r\n  } else if (strategyType === \"momentum3\") {\r\n    backTest.run4(backTestArgs);\r\n  } else if (strategyType === \"momentum4\") {\r\n    const momentumWindow = strategyArg1;\r\n    backTest.run5(backTestArgs);\r\n  } else if (strategyType === \"momentum5\") {\r\n    const topLimit = strategyArg1;\r\n    backTest.run6(topLimit);\r\n  } else if (strategyType === \"momentum6\") {\r\n    const momentumWindow = strategyArg1;\r\n    const absScore = strategyArg2 / 100;\r\n    backTest.run7(momentumWindow, absScore);\r\n  } else if (strategyType === \"momentum7\") {\r\n    const topLimit = strategyArg1;\r\n    const momentumWindow = strategyArg2;\r\n    backTest.run8(topLimit, momentumWindow);\r\n  } else if (strategyType === \"momentum8\") {\r\n    const momentumWindow = strategyArg1;\r\n    const asset = selectedAsset;\r\n    backTest.run9(momentumWindow, asset);\r\n  } else if (strategyType === \"momentum9\") {\r\n    const momentumWindow = strategyArg1;\r\n    const top = strategyArg2;\r\n    backTest.run10(momentumWindow, top);\r\n  } else if (strategyType === \"momentum10\") {\r\n    const momentumWindow = strategyArg1;\r\n    backTest.run11(momentumWindow);\r\n  } else if (strategyType === \"momentum11\") {\r\n    const top = strategyArg1;\r\n    const momentumWindow = strategyArg2;\r\n    backTest.run12(top, momentumWindow);\r\n  } else if (strategyType === \"momentum12\") {\r\n    const momentumWindow = strategyArg1;\r\n    const top = strategyArg2;\r\n    const stockWeight = strategyArg3;\r\n    const asset = selectedAsset;\r\n    backTest.run13(momentumWindow, top, stockWeight, asset);\r\n  } else if (strategyType === \"momentum13\") {\r\n    backTest.run14(backTestArgs);\r\n  } else if (strategyType === \"momentum14\") {\r\n    const momentumWindow = strategyArg1;\r\n    const top = strategyArg2;\r\n    backTest.run15(momentumWindow, top);\r\n  }\r\n};\r\n\r\nexport default BackTestContainer;\r\n","import React from \"react\";\r\nimport \"./CorrelationMatrix.css\";\r\nimport * as d3 from \"d3\";\r\nimport { Query } from \"react-apollo\";\r\nimport * as jStat from \"jStat\";\r\nimport { GET_GLOBAL_VARIABLES } from \"apollo/queries\";\r\nimport { Market } from \"market\";\r\nimport MarketCalendar from \"components/MarketCalendar\";\r\nimport { assetCodeList, getAssetShortName } from \"utils/data\";\r\n\r\nconst market = new Market();\r\n\r\nclass CorrelationMatrix extends React.Component {\r\n  render() {\r\n    return (\r\n      <Query query={GET_GLOBAL_VARIABLES}>\r\n        {({ data, client }) => {\r\n          const { startDate, endDate } = data.globalVariables;\r\n          const codeList = assetCodeList;\r\n\r\n          const result = getCorMatrixData(codeList, startDate, endDate);\r\n          return (\r\n            <React.Fragment>\r\n              <CorrelationMatrixChart corData={result} />\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nconst generateCorMatrix = _data => {\r\n  var data = [];\r\n\r\n  let rows = _data;\r\n\r\n  rows.forEach(function(d) {\r\n    var x = d[\"\"];\r\n    delete d[\"\"];\r\n    for (let prop in d) {\r\n      var y = prop,\r\n        value = d[prop];\r\n      data.push({\r\n        x: getAssetShortName(x),\r\n        y: getAssetShortName(y),\r\n        value: +value\r\n      });\r\n    }\r\n  });\r\n\r\n  var margin = {\r\n      top: 25,\r\n      right: 80,\r\n      bottom: 25,\r\n      left: 25\r\n    },\r\n    width = 800 - margin.left - margin.right,\r\n    height = 800 - margin.top - margin.bottom,\r\n    domain = d3\r\n      .set(\r\n        data.map(function(d) {\r\n          return d.x;\r\n        })\r\n      )\r\n      .values(),\r\n    num = Math.sqrt(data.length),\r\n    color = d3\r\n      .scaleLinear()\r\n      .domain([-1, 0, 1])\r\n      .range([\"#B22222\", \"#fff\", \"#000080\"]);\r\n\r\n  var x = d3\r\n      .scalePoint()\r\n      .range([0, width])\r\n      .domain(domain),\r\n    y = d3\r\n      .scalePoint()\r\n      .range([0, height])\r\n      .domain(domain),\r\n    xSpace = x.range()[1] - x.range()[0],\r\n    ySpace = y.range()[1] - y.range()[0];\r\n  ySpace = y.range()[1] - y.range()[0];\r\n\r\n  var svg = d3\r\n    .select(\"#matrix\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", width + margin.left + margin.right)\r\n    .attr(\"height\", height + margin.top + margin.bottom)\r\n    .append(\"g\")\r\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n  var cor = svg\r\n    .selectAll(\".cor\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"g\")\r\n    .attr(\"class\", \"cor\")\r\n    .attr(\"transform\", function(d) {\r\n      return \"translate(\" + x(d.x) + \",\" + y(d.y) + \")\";\r\n    });\r\n\r\n  // it fits with v3\r\n  // cor.append(\"rect\")\r\n  //   .attr(\"width\", xSpace)\r\n  //   .attr(\"height\", ySpace)\r\n  //   .attr(\"x\", -xSpace / 2)\r\n  //   .attr(\"y\", -ySpace / 2)\r\n\r\n  // //edited to fit with v4 update  2/5/18\r\n  // cor\r\n  //   .append(\"rect\")\r\n  //   .attr(\"width\", xSpace / 10)\r\n  //   .attr(\"height\", ySpace / 10)\r\n  //   .attr(\"x\", -xSpace / 20)\r\n  //   .attr(\"y\", -ySpace / 20);\r\n\r\n  cor\r\n    .filter(function(d) {\r\n      var ypos = domain.indexOf(d.y);\r\n      var xpos = domain.indexOf(d.x);\r\n      for (var i = ypos + 1; i < num; i++) {\r\n        if (i === xpos) return false;\r\n      }\r\n      return true;\r\n    })\r\n    .append(\"text\")\r\n    .attr(\"y\", 5)\r\n    .text(function(d) {\r\n      if (d.x === d.y) {\r\n        return d.x;\r\n      } else {\r\n        return d.value.toFixed(2);\r\n      }\r\n    })\r\n    .style(\"font-size\", \"11px\")\r\n    .style(\"fill\", function(d) {\r\n      if (d.value === 1) {\r\n        return \"#000\";\r\n      } else {\r\n        return color(d.value);\r\n      }\r\n    });\r\n\r\n  cor\r\n    .filter(function(d) {\r\n      var ypos = domain.indexOf(d.y);\r\n      var xpos = domain.indexOf(d.x);\r\n      for (var i = ypos + 1; i < num; i++) {\r\n        if (i === xpos) return true;\r\n      }\r\n      return false;\r\n    })\r\n    .append(\"circle\")\r\n    .attr(\"r\", function(d) {\r\n      return (width / (num * 2)) * (Math.abs(d.value) + 0.1);\r\n    })\r\n    .style(\"fill\", function(d) {\r\n      if (d.value === 1) {\r\n        return \"#000\";\r\n      } else {\r\n        return color(d.value);\r\n      }\r\n    });\r\n\r\n  var aS = d3\r\n    .scaleLinear()\r\n    .range([-margin.top + 5, height + margin.bottom - 5])\r\n    .domain([1, -1]);\r\n\r\n  var yA = d3\r\n    .axisRight()\r\n    .scale(aS)\r\n    .tickPadding(7);\r\n\r\n  var aG = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"y axis\")\r\n    .call(yA)\r\n    .attr(\"transform\", \"translate(\" + (width + margin.right / 2) + \" ,0)\");\r\n\r\n  var iR = d3.range(-1, 1.01, 0.01);\r\n  var h = height / iR.length + 3;\r\n  iR.forEach(function(d) {\r\n    aG.append(\"rect\")\r\n      .style(\"fill\", color(d))\r\n      .style(\"stroke-width\", 0)\r\n      .style(\"stoke\", \"none\")\r\n      .attr(\"height\", h)\r\n      .attr(\"width\", 10)\r\n      .attr(\"x\", 0)\r\n      .attr(\"y\", aS(d));\r\n  });\r\n};\r\n\r\nconst getCorMatrixData = (codeList, startDate, endDate) => {\r\n  const listOfPriceList = codeList.map(code =>\r\n    market.getReturnsListInRange(code, startDate, endDate)\r\n  );\r\n\r\n  const corList = [];\r\n  for (let i = 0; i < codeList.length; i++) {\r\n    let row = {};\r\n    row[\"\"] = codeList[i];\r\n    for (let j = 0; j < codeList.length; j++) {\r\n      const corrcoeff = jStat.corrcoeff(listOfPriceList[i], listOfPriceList[j]);\r\n      row[codeList[j]] = corrcoeff.toString();\r\n    }\r\n    corList.push(row);\r\n  }\r\n\r\n  corList[\"columns\"] = [\"\"].concat(codeList);\r\n  return corList;\r\n};\r\n\r\nclass CorrelationMatrixChart extends React.Component {\r\n  render() {\r\n    return <div id=\"matrix\" />;\r\n  }\r\n\r\n  componentDidMount() {\r\n    generateCorMatrix(this.props.corData);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    var data = [];\r\n\r\n    let rows = this.props.corData;\r\n\r\n    rows.forEach(function(d) {\r\n      var x = d[\"\"];\r\n      delete d[\"\"];\r\n      for (let prop in d) {\r\n        var y = prop,\r\n          value = d[prop];\r\n        data.push({\r\n          x: x,\r\n          y: y,\r\n          value: +value\r\n        });\r\n      }\r\n    });\r\n\r\n    console.log(this.props.corData);\r\n  }\r\n}\r\n\r\nexport default CorrelationMatrix;\r\n","import React, { Component } from \"react\";\r\nimport { Query } from \"react-apollo\";\r\nimport { GET_GLOBAL_VARIABLES } from \"apollo/queries\";\r\nimport MarketCalendar from \"components/MarketCalendar\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <Query query={GET_GLOBAL_VARIABLES}>\r\n        {({ loading, error, data, client }) => {\r\n          return (\r\n            <React.Fragment>\r\n              <MarketCalendar data={data} client={client} />\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport styled, { createGlobalStyle, ThemeProvider } from \"styled-components\";\r\nimport theme from \"./theme\";\r\nimport {\r\n  Route,\r\n  NavLink,\r\n  HashRouter,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport Notfound from \"./pages/notfound\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport client from \"./apollo/apollo\";\r\nimport PriceChartPage from \"pages/PriceChartPage\";\r\nimport AssetAllocationPage from \"pages/AssetAllocationPage\";\r\nimport BackTestPage from \"pages/BackTestPage\";\r\nimport CorrelationMatrix from \"pages/CorrelationMatrix/CorrelationMatrix\";\r\nimport Header from \"components/Header/Header\";\r\nconst onTestPage = false;\r\n\r\nlet prodPages = [\r\n  <NavLink exact activeClassName=\"active\" to=\"/\">\r\n    Home\r\n  </NavLink>,\r\n  <NavLink activeClassName=\"active\" to=\"/price_chart\">\r\n    PriceChart\r\n  </NavLink>,\r\n  <NavLink activeClassName=\"active\" to=\"/asset-allocation\">\r\n    AssetAllocation\r\n  </NavLink>,\r\n  <NavLink activeClassName=\"active\" to=\"/correlation-matrix\">\r\n    CorrelationMatrix\r\n  </NavLink>,\r\n  <NavLink activeClassName=\"active\" to=\"/backtest\">\r\n    BackTest\r\n  </NavLink>\r\n];\r\n\r\nif (onTestPage) {\r\n  const testPage = [];\r\n  prodPages = prodPages.concat(testPage);\r\n}\r\n\r\nconst routing = (\r\n  <HashRouter basename=\"/\">\r\n    <div>\r\n      <ul>\r\n        {prodPages.map((page, index) => (\r\n          <li key={index}>{page}</li>\r\n        ))}\r\n      </ul>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={App} />\r\n        <Route path=\"/price_chart\" component={PriceChartPage} />\r\n        <Route path=\"/asset-allocation\" component={AssetAllocationPage} />\r\n        <Route path=\"/backtest\" component={BackTestPage} />\r\n        <Route path=\"/correlation-matrix\" component={CorrelationMatrix} />\r\n        <Route component={Notfound} />\r\n      </Switch>\r\n    </div>\r\n  </HashRouter>\r\n);\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <GlobalStyle />\r\n        <ThemeProvider theme={theme}>\r\n          <Container theme={theme}>\r\n            <ApolloProvider client={client}>{routing}</ApolloProvider>\r\n          </Container>\r\n        </ThemeProvider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  background-color: ${props => props.theme.mainColor};\r\n  color: ${props => props.theme.textColor};\r\n`;\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}